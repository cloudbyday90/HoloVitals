{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/docs/RBAC_IMPLEMENTATION.md">\n# Role-Based Access Control (RBAC) Implementation\n\n## Overview\n\nHoloVitals implements a comprehensive Role-Based Access Control (RBAC) system to protect sensitive financial, administrative, and operational data. This ensures that only authorized users can access specific resources and functionality.\n\n## User Roles\n\n### Role Hierarchy\n\n```\nOWNER (Level 100)\n  └── ADMIN (Level 80)\n      └── DOCTOR (Level 60)\n          └── SUPPORT (Level 40)\n              └── ANALYST (Level 30)\n                  └── PATIENT (Level 20)\n```\n\n### Role Definitions\n\n#### 1. OWNER\n- **Access Level:** Full access to everything\n- **Primary Use:** Platform owner/founder\n- **Key Permissions:**\n  - View all financial data (costs, revenue, expenses)\n  - Access system-wide statistics\n  - Manage all users and roles\n  - View and export all data\n  - Configure system settings\n  - Access audit logs\n\n#### 2. ADMIN\n- **Access Level:** Administrative access (no financial data)\n- **Primary Use:** System administrators\n- **Key Permissions:**\n  - View system statistics\n  - Manage users (except role changes)\n  - Provision and manage cloud instances\n  - Manage task queue\n  - View all patient data (with consent)\n  - Access audit logs\n\n#### 3. DOCTOR\n- **Access Level:** Medical professional access\n- **Primary Use:** Healthcare providers\n- **Key Permissions:**\n  - View patient data (with explicit consent)\n  - Upload and manage documents\n  - Use AI chatbot\n  - Provision instances for analysis\n  - View own data and conversations\n\n#### 4. PATIENT\n- **Access Level:** Personal data only\n- **Primary Use:** End users\n- **Key Permissions:**\n  - View and manage own data\n  - Upload and manage own documents\n  - Use AI chatbot\n  - View own conversations\n  - Grant/revoke consent to doctors\n\n#### 5. SUPPORT\n- **Access Level:** Customer support access\n- **Primary Use:** Customer service representatives\n- **Key Permissions:**\n  - View all users (limited info)\n  - View patient data (with consent)\n  - View documents and conversations (read-only)\n  - No modification permissions\n\n#### 6. ANALYST\n- **Access Level:** Anonymized data only\n- **Primary Use:** Data analysts\n- **Key Permissions:**\n  - View anonymized analytics\n  - Export anonymized data\n  - View system statistics (no PII)\n  - No access to individual patient data\n\n---\n\n## Protected Resources\n\n### Financial Data (OWNER Only)\n\n**Routes:**\n- `/dashboard/costs` - Cost dashboard\n- `/dashboard/financials` - Financial reports\n- `/api/costs/*` - Cost API endpoints\n- `/api/financials/*` - Financial API endpoints\n\n**Data Protected:**\n- Operating costs\n- Revenue data\n- Expense tracking\n- Cost per user\n- Profit margins\n- Financial projections\n\n### Administrative Data (OWNER/ADMIN)\n\n**Routes:**\n- `/dashboard/admin` - Admin dashboard\n- `/dashboard/users` - User management\n- `/api/admin/*` - Admin API endpoints\n\n**Data Protected:**\n- System-wide statistics\n- User management\n- System configuration\n- Audit logs\n\n### Infrastructure Management (OWNER/ADMIN)\n\n**Routes:**\n- `/dashboard/instances` - Instance management\n- `/dashboard/queue` - Queue management\n- `/api/instances/*` - Instance API endpoints\n- `/api/queue/*` - Queue API endpoints\n\n**Data Protected:**\n- Cloud instance provisioning\n- Task queue management\n- Resource allocation\n- System performance metrics\n\n---\n\n## Implementation Components\n\n### 1. Type Definitions (`lib/types/rbac.ts`)\n\nDefines:\n- User roles enum\n- Permissions enum\n- Role-permission mappings\n- Resource types\n- Access control context\n- Access decisions\n\n### 2. Access Control Service (`lib/services/AccessControlService.ts`)\n\n**Key Methods:**\n- `hasPermission(role, permission)` - Check single permission\n- `hasAnyPermission(role, permissions)` - Check if user has any permission\n- `hasAllPermissions(role, permissions)` - Check if user has all permissions\n- `canAccessResource(context)` - Check resource-specific access\n- `logAccess(context, action, decision)` - Audit logging\n\n**Resource Access Control:**\n- Patient data access (with consent checking)\n- Document access (ownership verification)\n- Conversation access (ownership verification)\n- Financial data access (OWNER only)\n- Instance access (ownership or admin)\n\n### 3. Authentication Middleware (`lib/middleware/auth.ts`)\n\n**Functions:**\n- `requireAuth(req)` - Require authentication\n- `requireRole(req, role)` - Require specific role\n- `requireOwner(req)` - Require OWNER role\n- `requireAdmin(req)` - Require ADMIN or higher\n- `requirePermission(req, permission)` - Require specific permission\n- `requireResourceAccess(req, resourceType, resourceId, permissions)` - Require resource access\n- `protectFinancialEndpoint(req)` - Protect financial endpoints\n- `protectCostEndpoint(req)` - Protect cost endpoints\n\n### 4. Global Middleware (`middleware.ts`)\n\n**Features:**\n- Route-based protection\n- Automatic role checking\n- Redirect to access denied page\n- API endpoint protection (401/403 responses)\n- User context injection into request headers\n\n### 5. UI Components\n\n#### RoleGuard Component (`components/ui/RoleGuard.tsx`)\n\n**Usage:**\n```tsx\n// Require specific role\n<RoleGuard requiredRole={UserRole.OWNER}>\n  <FinancialDashboard />\n</RoleGuard>\n\n// Require specific permission\n<RoleGuard requiredPermission={Permission.VIEW_COSTS}>\n  <CostChart />\n</RoleGuard>\n\n// Require any permission\n<RoleGuard requiredPermissions={[Permission.VIEW_COSTS, Permission.VIEW_FINANCIALS]} requireAll={false}>\n  <FinancialData />\n</RoleGuard>\n```\n\n**Convenience Components:**\n```tsx\n<OwnerOnly>\n  <FinancialDashboard />\n</OwnerOnly>\n\n<AdminOnly>\n  <UserManagement />\n</AdminOnly>\n\n<DoctorOnly>\n  <PatientRecords />\n</DoctorOnly>\n\n<HasPermission permission={Permission.VIEW_COSTS}>\n  <CostChart />\n</HasPermission>\n```\n\n#### useRoleGuard Hook\n\n```tsx\nconst { isOwner, isAdmin, hasPermission } = useRoleGuard();\n\nif (isOwner) {\n  // Show owner-only content\n}\n\nif (hasPermission(Permission.VIEW_COSTS)) {\n  // Show cost data\n}\n```\n\n### 6. Access Denied Page (`app/dashboard/access-denied/page.tsx`)\n\n**Features:**\n- Shows attempted path\n- Displays current vs required role\n- Provides explanation\n- Offers navigation back to dashboard\n- Contact support option\n\n---\n\n## API Protection Examples\n\n### Protecting Cost Endpoints\n\n```typescript\n// app/api/costs/route.ts\nimport { protectCostEndpoint } from \'@/lib/middleware/auth\';\n\nexport async function GET(req: NextRequest) {\n  // Protect endpoint - OWNER only\n  const user = await protectCostEndpoint(req);\n  if (user instanceof NextResponse) {\n    return user; // Return error response\n  }\n\n  // User is OWNER, proceed with logic\n  const costs = await getCostData();\n  return NextResponse.json(costs);\n}\n```\n\n### Protecting Admin Endpoints\n\n```typescript\n// app/api/admin/users/route.ts\nimport { requireAdmin } from \'@/lib/middleware/auth\';\n\nexport async function GET(req: NextRequest) {\n  const user = await requireAdmin(req);\n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  // User is ADMIN or OWNER\n  const users = await getAllUsers();\n  return NextResponse.json(users);\n}\n```\n\n### Protecting Resource Access\n\n```typescript\n// app/api/documents/[id]/route.ts\nimport { requireResourceAccess } from \'@/lib/middleware/auth\';\nimport { ResourceType, Permission } from \'@/lib/types/rbac\';\n\nexport async function GET(req: NextRequest, { params }: { params: { id: string } }) {\n  const user = await requireResourceAccess(\n    req,\n    ResourceType.DOCUMENT,\n    params.id,\n    [Permission.VIEW_OWN_DOCUMENTS]\n  );\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  // User has access to this document\n  const document = await getDocument(params.id);\n  return NextResponse.json(document);\n}\n```\n\n---\n\n## UI Protection Examples\n\n### Sidebar Navigation\n\n```tsx\n// components/layout/Sidebar.tsx\nconst navigation = [\n  { name: \'Overview\', href: \'/dashboard\', icon: Home, public: true },\n  { name: \'Documents\', href: \'/dashboard/documents\', icon: FileText, public: true },\n  { name: \'Chat\', href: \'/dashboard/chat\', icon: MessageSquare, public: true },\n  { name: \'Queue\', href: \'/dashboard/queue\', icon: ListTodo, adminOnly: true },\n  { name: \'Instances\', href: \'/dashboard/instances\', icon: Server, adminOnly: true },\n  { name: \'Costs\', href: \'/dashboard/costs\', icon: DollarSign, ownerOnly: true },\n];\n\n// Render with protection\n{navigation.map((item) => {\n  if (item.ownerOnly) {\n    return (\n      <OwnerOnly key={item.name}>\n        <NavLink {...item} />\n      </OwnerOnly>\n    );\n  }\n  \n  if (item.adminOnly) {\n    return (\n      <AdminOnly key={item.name}>\n        <NavLink {...item} />\n      </AdminOnly>\n    );\n  }\n  \n  return <NavLink key={item.name} {...item} />;\n})}\n```\n\n### Dashboard Components\n\n```tsx\n// app/dashboard/page.tsx\nexport default function DashboardPage() {\n  return (\n    <div>\n      {/* Public stats - everyone can see */}\n      <StatsCard title="My Documents" value={documents.length} />\n      \n      {/* Admin stats - ADMIN and OWNER only */}\n      <AdminOnly>\n        <StatsCard title="Total Users" value={totalUsers} />\n        <StatsCard title="Active Tasks" value={activeTasks} />\n      </AdminOnly>\n      \n      {/* Financial stats - OWNER only */}\n      <OwnerOnly>\n        <StatsCard title="Monthly Revenue" value={revenue} />\n        <StatsCard title="Operating Costs" value={costs} />\n      </OwnerOnly>\n    </div>\n  );\n}\n```\n\n---\n\n## Audit Logging\n\n### Access Logging\n\nAll access attempts are logged with:\n- User ID and role\n- Action performed\n- Resource type and ID\n- Permission checked\n- Access decision (allowed/denied)\n- Reason for decision\n- IP address\n- User agent\n- Timestamp\n\n### Suspicious Activity Detection\n\nThe system automatically detects:\n- Multiple failed access attempts (>5 in 1 hour)\n- Unusual access patterns\n- Access to resources outside normal scope\n- Rapid sequential access attempts\n\n### Audit Log Queries\n\n```typescript\n// Get user access logs\nconst logs = await accessControl.getUserAccessLogs(userId, 100);\n\n// Get suspicious access patterns\nconst suspicious = await accessControl.getSuspiciousAccess(60); // Last 60 minutes\n```\n\n---\n\n## Security Best Practices\n\n### 1. Principle of Least Privilege\n- Users only get permissions they need\n- Default to most restrictive access\n- Explicit permission grants required\n\n### 2. Defense in Depth\n- Multiple layers of protection:\n  1. Global middleware (route-level)\n  2. API middleware (endpoint-level)\n  3. Service-level checks (resource-level)\n  4. UI guards (component-level)\n\n### 3. Audit Everything\n- All access attempts logged\n- Failed attempts tracked\n- Suspicious patterns detected\n- Complete audit trail maintained\n\n### 4. Explicit Consent\n- Doctors need patient consent\n- Time-limited access grants\n- Revocable at any time\n- Complete consent audit trail\n\n### 5. Data Segregation\n- Financial data completely isolated\n- Only OWNER can access\n- No shared access with other roles\n- Separate API endpoints\n\n---\n\n## Testing Access Control\n\n### Unit Tests\n\n```typescript\ndescribe(\'AccessControlService\', () => {\n  it(\'should allow OWNER to access financial data\', () => {\n    const decision = accessControl.canAccessFinancialData(UserRole.OWNER);\n    expect(decision.allowed).toBe(true);\n  });\n\n  it(\'should deny ADMIN access to financial data\', () => {\n    const decision = accessControl.canAccessFinancialData(UserRole.ADMIN);\n    expect(decision.allowed).toBe(false);\n  });\n\n  it(\'should allow PATIENT to access own documents\', async () => {\n    const decision = await accessControl.canAccessDocument(\n      UserRole.PATIENT,\n      \'user-123\',\n      \'doc-owned-by-user-123\'\n    );\n    expect(decision.allowed).toBe(true);\n  });\n});\n```\n\n### Integration Tests\n\n```typescript\ndescribe(\'Cost API\', () => {\n  it(\'should return 403 for non-owner users\', async () => {\n    const response = await fetch(\'/api/costs\', {\n      headers: { Authorization: `Bearer ${adminToken}` }\n    });\n    expect(response.status).toBe(403);\n  });\n\n  it(\'should return cost data for owner\', async () => {\n    const response = await fetch(\'/api/costs\', {\n      headers: { Authorization: `Bearer ${ownerToken}` }\n    });\n    expect(response.status).toBe(200);\n    const data = await response.json();\n    expect(data.costs).toBeDefined();\n  });\n});\n```\n\n---\n\n## Migration Guide\n\n### Adding New Protected Routes\n\n1. **Define route in middleware.ts:**\n```typescript\nconst PROTECTED_ROUTES = {\n  OWNER_ONLY: [\n    \'/dashboard/costs\',\n    \'/dashboard/financials\',\n    \'/your-new-route\', // Add here\n  ],\n};\n```\n\n2. **Protect API endpoint:**\n```typescript\nexport async function GET(req: NextRequest) {\n  const user = await requireOwner(req);\n  if (user instanceof NextResponse) return user;\n  // Your logic here\n}\n```\n\n3. **Protect UI component:**\n```tsx\n<OwnerOnly>\n  <YourNewComponent />\n</OwnerOnly>\n```\n\n### Adding New Permissions\n\n1. **Add to Permission enum:**\n```typescript\nexport enum Permission {\n  // ... existing permissions\n  YOUR_NEW_PERMISSION = \'YOUR_NEW_PERMISSION\',\n}\n```\n\n2. **Add to role mappings:**\n```typescript\nexport const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {\n  [UserRole.OWNER]: [\n    // ... existing permissions\n    Permission.YOUR_NEW_PERMISSION,\n  ],\n};\n```\n\n3. **Use in code:**\n```typescript\nconst user = await requirePermission(req, Permission.YOUR_NEW_PERMISSION);\n```\n\n---\n\n## Summary\n\nThe RBAC system provides:\n- ✅ **Complete financial data protection** (OWNER only)\n- ✅ **Administrative access control** (OWNER/ADMIN)\n- ✅ **Resource-level permissions** (ownership verification)\n- ✅ **Comprehensive audit logging** (all access tracked)\n- ✅ **UI and API protection** (multiple layers)\n- ✅ **Flexible permission system** (easy to extend)\n- ✅ **HIPAA compliance** (consent management, audit trails)\n\nThis ensures that sensitive business information remains private while maintaining proper access control for all user types.\n</create-file>\n</function_calls>'}