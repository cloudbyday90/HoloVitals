{'role': 'assistant', 'content': 'Now let me create comprehensive tests for the ContextOptimizerService:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/__tests__/services/ContextOptimizerService.test.ts">\n/**\n * Context Optimizer Service Tests\n */\n\nimport { \n  ContextOptimizerService,\n  OptimizationStrategy,\n  ContentType\n} from \'@/lib/services/ContextOptimizerService\';\n\ndescribe(\'ContextOptimizerService\', () => {\n  let service: ContextOptimizerService;\n\n  beforeEach(() => {\n    service = ContextOptimizerService.getInstance();\n  });\n\n  describe(\'Singleton Pattern\', () => {\n    it(\'should return the same instance\', () => {\n      const instance1 = ContextOptimizerService.getInstance();\n      const instance2 = ContextOptimizerService.getInstance();\n      expect(instance1).toBe(instance2);\n    });\n  });\n\n  describe(\'Basic Optimization\', () => {\n    it(\'should optimize simple text\', async () => {\n      const content = \'The patient has a history of high blood pressure and diabetes. The patient is currently taking medication for both conditions.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toBeDefined();\n      expect(result.originalTokens).toBeGreaterThan(0);\n      expect(result.optimizedTokens).toBeGreaterThan(0);\n      expect(result.optimizedTokens).toBeLessThan(result.originalTokens);\n      expect(result.reductionPercentage).toBeGreaterThan(0);\n    });\n\n    it(\'should preserve medical keywords\', async () => {\n      const content = \'Patient diagnosed with hypertension. Blood pressure: 140/90 mmHg. Prescribed lisinopril 10mg daily.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED,\n        contentType: ContentType.MEDICAL_REPORT\n      });\n\n      const optimized = result.optimizedContent.toLowerCase();\n      expect(optimized).toContain(\'hypertension\');\n      expect(optimized).toContain(\'blood pressure\');\n      expect(optimized).toContain(\'lisinopril\');\n    });\n\n    it(\'should handle empty content\', async () => {\n      const result = await service.optimize({\n        content: \'\',\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toBe(\'\');\n      expect(result.originalTokens).toBe(0);\n      expect(result.optimizedTokens).toBe(0);\n    });\n  });\n\n  describe(\'Optimization Strategies\', () => {\n    const testContent = `\n      Patient History: The patient is a 45-year-old male with a long history of type 2 diabetes mellitus.\n      He has been managing his condition with metformin and lifestyle modifications for the past 10 years.\n      Current Symptoms: The patient reports increased thirst, frequent urination, and fatigue over the past 2 weeks.\n      Vital Signs: Blood pressure 130/85 mmHg, heart rate 78 bpm, temperature 98.6Â°F, weight 185 lbs.\n      Assessment: The patient\'s symptoms suggest poor glycemic control. HbA1c test ordered.\n      Plan: Adjust medication dosage and schedule follow-up in 2 weeks.\n    `;\n\n    it(\'should apply AGGRESSIVE strategy with high reduction\', async () => {\n      const result = await service.optimize({\n        content: testContent,\n        strategy: OptimizationStrategy.AGGRESSIVE\n      });\n\n      expect(result.reductionPercentage).toBeGreaterThan(40);\n      expect(result.strategy).toBe(OptimizationStrategy.AGGRESSIVE);\n    });\n\n    it(\'should apply BALANCED strategy with moderate reduction\', async () => {\n      const result = await service.optimize({\n        content: testContent,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.reductionPercentage).toBeGreaterThan(20);\n      expect(result.reductionPercentage).toBeLessThan(50);\n      expect(result.strategy).toBe(OptimizationStrategy.BALANCED);\n    });\n\n    it(\'should apply CONSERVATIVE strategy with low reduction\', async () => {\n      const result = await service.optimize({\n        content: testContent,\n        strategy: OptimizationStrategy.CONSERVATIVE\n      });\n\n      expect(result.reductionPercentage).toBeGreaterThan(10);\n      expect(result.reductionPercentage).toBeLessThan(30);\n      expect(result.strategy).toBe(OptimizationStrategy.CONSERVATIVE);\n    });\n\n    it(\'should apply MINIMAL strategy with minimal reduction\', async () => {\n      const result = await service.optimize({\n        content: testContent,\n        strategy: OptimizationStrategy.MINIMAL\n      });\n\n      expect(result.reductionPercentage).toBeGreaterThan(0);\n      expect(result.reductionPercentage).toBeLessThan(15);\n      expect(result.strategy).toBe(OptimizationStrategy.MINIMAL);\n    });\n  });\n\n  describe(\'Content Types\', () => {\n    it(\'should handle MEDICAL_REPORT type\', async () => {\n      const content = \'Diagnosis: Type 2 Diabetes Mellitus. Treatment: Metformin 500mg twice daily.\';\n      \n      const result = await service.optimize({\n        content,\n        contentType: ContentType.MEDICAL_REPORT,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toContain(\'Diabetes\');\n      expect(result.optimizedContent).toContain(\'Metformin\');\n    });\n\n    it(\'should handle LAB_RESULTS type\', async () => {\n      const content = \'Glucose: 180 mg/dL (High). HbA1c: 8.5% (Elevated). Cholesterol: 220 mg/dL.\';\n      \n      const result = await service.optimize({\n        content,\n        contentType: ContentType.LAB_RESULTS,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      // Should preserve numerical values\n      expect(result.optimizedContent).toContain(\'180\');\n      expect(result.optimizedContent).toContain(\'8.5\');\n    });\n\n    it(\'should handle PRESCRIPTION type\', async () => {\n      const content = \'Prescription: Lisinopril 10mg, take one tablet daily in the morning with food.\';\n      \n      const result = await service.optimize({\n        content,\n        contentType: ContentType.PRESCRIPTION,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toContain(\'Lisinopril\');\n      expect(result.optimizedContent).toContain(\'10mg\');\n    });\n  });\n\n  describe(\'Target Tokens\', () => {\n    it(\'should respect target token limit\', async () => {\n      const longContent = \'This is a very long medical report. \'.repeat(100);\n      \n      const result = await service.optimize({\n        content: longContent,\n        strategy: OptimizationStrategy.BALANCED,\n        targetTokens: 50\n      });\n\n      expect(result.optimizedTokens).toBeLessThanOrEqual(60); // Allow some margin\n    });\n\n    it(\'should not over-compress if already under target\', async () => {\n      const shortContent = \'Patient has diabetes.\';\n      \n      const result = await service.optimize({\n        content: shortContent,\n        strategy: OptimizationStrategy.BALANCED,\n        targetTokens: 100\n      });\n\n      expect(result.optimizedTokens).toBeLessThan(100);\n    });\n  });\n\n  describe(\'Keyword Preservation\', () => {\n    it(\'should preserve specified keywords\', async () => {\n      const content = \'Patient has hypertension and takes lisinopril. Also has diabetes and takes metformin.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.AGGRESSIVE,\n        preserveKeywords: [\'hypertension\', \'diabetes\']\n      });\n\n      const optimized = result.optimizedContent.toLowerCase();\n      expect(optimized).toContain(\'hypertension\');\n      expect(optimized).toContain(\'diabetes\');\n    });\n\n    it(\'should return preserved keywords in result\', async () => {\n      const content = \'Patient diagnosed with hypertension and diabetes mellitus.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.preservedKeywords).toBeDefined();\n      expect(Array.isArray(result.preservedKeywords)).toBe(true);\n    });\n  });\n\n  describe(\'Metrics\', () => {\n    it(\'should calculate compression ratio\', async () => {\n      const content = \'The patient has a history of diabetes. The patient takes medication daily.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.metrics.compressionRatio).toBeGreaterThan(1);\n      expect(result.metrics.compressionRatio).toBeDefined();\n    });\n\n    it(\'should calculate relevance score\', async () => {\n      const content = \'Patient has diabetes. Blood sugar: 180 mg/dL. Prescribed metformin.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.metrics.relevanceScore).toBeGreaterThan(0);\n      expect(result.metrics.relevanceScore).toBeLessThanOrEqual(1);\n    });\n\n    it(\'should calculate information density\', async () => {\n      const content = \'Patient diagnosed with type 2 diabetes mellitus.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.metrics.informationDensity).toBeGreaterThan(0);\n      expect(result.metrics.informationDensity).toBeLessThanOrEqual(1);\n    });\n\n    it(\'should track processing time\', async () => {\n      const content = \'Patient has diabetes and hypertension.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.metrics.processingTimeMs).toBeGreaterThan(0);\n    });\n\n    it(\'should calculate quality score\', async () => {\n      const content = \'Patient has diabetes. Takes metformin 500mg twice daily.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.metrics.qualityScore).toBeGreaterThan(0);\n      expect(result.metrics.qualityScore).toBeLessThanOrEqual(1);\n    });\n  });\n\n  describe(\'Batch Optimization\', () => {\n    it(\'should optimize multiple contexts\', async () => {\n      const requests = [\n        { content: \'Patient has diabetes.\' },\n        { content: \'Patient has hypertension.\' },\n        { content: \'Patient takes metformin.\' }\n      ];\n\n      const results = await service.batchOptimize(requests);\n\n      expect(results).toHaveLength(3);\n      results.forEach(result => {\n        expect(result.optimizedContent).toBeDefined();\n        expect(result.originalTokens).toBeGreaterThan(0);\n      });\n    });\n\n    it(\'should handle empty batch\', async () => {\n      const results = await service.batchOptimize([]);\n      expect(results).toHaveLength(0);\n    });\n  });\n\n  describe(\'Edge Cases\', () => {\n    it(\'should handle very short content\', async () => {\n      const result = await service.optimize({\n        content: \'Diabetes.\',\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toBeDefined();\n      expect(result.optimizedTokens).toBeGreaterThan(0);\n    });\n\n    it(\'should handle content with special characters\', async () => {\n      const content = \'Patient BP: 140/90 mmHg. Temp: 98.6Â°F. Weight: 185 lbs.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toBeDefined();\n      expect(result.optimizedTokens).toBeGreaterThan(0);\n    });\n\n    it(\'should handle content with numbers\', async () => {\n      const content = \'Glucose: 180 mg/dL. HbA1c: 8.5%. Cholesterol: 220 mg/dL.\';\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      // Should preserve numbers\n      expect(result.optimizedContent).toContain(\'180\');\n      expect(result.optimizedContent).toContain(\'8.5\');\n      expect(result.optimizedContent).toContain(\'220\');\n    });\n\n    it(\'should handle content with multiple paragraphs\', async () => {\n      const content = `\n        Patient History:\n        45-year-old male with diabetes.\n\n        Current Symptoms:\n        Increased thirst and fatigue.\n\n        Assessment:\n        Poor glycemic control.\n      `;\n      \n      const result = await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.optimizedContent).toBeDefined();\n      expect(result.optimizedTokens).toBeLessThan(result.originalTokens);\n    });\n  });\n\n  describe(\'Performance\', () => {\n    it(\'should optimize within reasonable time\', async () => {\n      const content = \'Patient has diabetes. \'.repeat(100);\n      \n      const startTime = Date.now();\n      await service.optimize({\n        content,\n        strategy: OptimizationStrategy.BALANCED\n      });\n      const endTime = Date.now();\n\n      expect(endTime - startTime).toBeLessThan(1000); // Should complete in < 1 second\n    });\n\n    it(\'should handle large content efficiently\', async () => {\n      const largeContent = \'This is a medical report with lots of details. \'.repeat(500);\n      \n      const result = await service.optimize({\n        content: largeContent,\n        strategy: OptimizationStrategy.BALANCED\n      });\n\n      expect(result.metrics.processingTimeMs).toBeLessThan(5000); // Should complete in < 5 seconds\n    });\n  });\n});\n</create-file>\n</function_calls>'}