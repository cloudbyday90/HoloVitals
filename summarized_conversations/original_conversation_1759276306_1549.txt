{'role': 'assistant', 'content': 'Now let\'s create the Instances management page:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/dashboard/instances/page.tsx">\n\'use client\';\n\nimport { useState } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport {\n  Server,\n  Plus,\n  Trash2,\n  DollarSign,\n  Clock,\n  Cpu,\n  HardDrive,\n  Zap,\n  MapPin,\n  Activity,\n  CheckCircle2,\n  Loader2,\n  XCircle\n} from \'lucide-react\';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \'@/components/ui/select\';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \'@/components/ui/dialog\';\nimport { Label } from \'@/components/ui/label\';\n\ninterface Instance {\n  id: string;\n  provider: \'AZURE\' | \'AWS\';\n  instanceType: string;\n  region: string;\n  status: \'PROVISIONING\' | \'CONFIGURING\' | \'READY\' | \'RUNNING\' | \'STOPPING\' | \'TERMINATED\';\n  publicIp?: string;\n  privateIp?: string;\n  costPerHour: number;\n  totalCost: number;\n  createdAt: Date;\n  terminatedAt?: Date;\n  purpose: string;\n  autoTerminateMinutes: number;\n}\n\nexport default function InstancesPage() {\n  const [instances, setInstances] = useState<Instance[]>([\n    {\n      id: \'1\',\n      provider: \'AZURE\',\n      instanceType: \'Standard_NC6\',\n      region: \'eastus\',\n      status: \'RUNNING\',\n      publicIp: \'20.123.45.67\',\n      privateIp: \'10.0.1.5\',\n      costPerHour: 0.90,\n      totalCost: 2.70,\n      createdAt: new Date(\'2024-09-30T07:00:00\'),\n      purpose: \'Document Analysis\',\n      autoTerminateMinutes: 60,\n    },\n    {\n      id: \'2\',\n      provider: \'AWS\',\n      instanceType: \'g4dn.xlarge\',\n      region: \'us-east-1\',\n      status: \'READY\',\n      publicIp: \'54.123.45.67\',\n      privateIp: \'172.31.1.10\',\n      costPerHour: 0.526,\n      totalCost: 0.263,\n      createdAt: new Date(\'2024-09-30T09:30:00\'),\n      purpose: \'Batch Processing\',\n      autoTerminateMinutes: 30,\n    },\n    {\n      id: \'3\',\n      provider: \'AZURE\',\n      instanceType: \'Standard_NC12\',\n      region: \'westus2\',\n      status: \'TERMINATED\',\n      publicIp: \'20.234.56.78\',\n      privateIp: \'10.0.2.8\',\n      costPerHour: 1.80,\n      totalCost: 5.40,\n      createdAt: new Date(\'2024-09-29T14:00:00\'),\n      terminatedAt: new Date(\'2024-09-29T17:00:00\'),\n      purpose: \'AI Model Training\',\n      autoTerminateMinutes: 180,\n    },\n  ]);\n\n  const [showProvisionDialog, setShowProvisionDialog] = useState(false);\n  const [provisionForm, setProvisionForm] = useState({\n    provider: \'AZURE\',\n    instanceType: \'Standard_NC6\',\n    region: \'eastus\',\n    diskSizeGB: 100,\n    autoTerminateMinutes: 60,\n    purpose: \'\',\n  });\n\n  const handleProvision = () => {\n    const newInstance: Instance = {\n      id: Date.now().toString(),\n      provider: provisionForm.provider as \'AZURE\' | \'AWS\',\n      instanceType: provisionForm.instanceType,\n      region: provisionForm.region,\n      status: \'PROVISIONING\',\n      costPerHour: getCostPerHour(provisionForm.instanceType),\n      totalCost: 0,\n      createdAt: new Date(),\n      purpose: provisionForm.purpose,\n      autoTerminateMinutes: provisionForm.autoTerminateMinutes,\n    };\n\n    setInstances([newInstance, ...instances]);\n    setShowProvisionDialog(false);\n    \n    // Simulate provisioning\n    setTimeout(() => {\n      setInstances(prev => prev.map(inst => \n        inst.id === newInstance.id \n          ? { ...inst, status: \'READY\', publicIp: \'20.123.45.89\', privateIp: \'10.0.1.20\' }\n          : inst\n      ));\n    }, 5000);\n  };\n\n  const handleTerminate = (id: string) => {\n    if (confirm(\'Terminate this instance? This action cannot be undone.\')) {\n      setInstances(instances.map(inst => \n        inst.id === id \n          ? { ...inst, status: \'STOPPING\' }\n          : inst\n      ));\n\n      setTimeout(() => {\n        setInstances(prev => prev.map(inst => \n          inst.id === id \n            ? { ...inst, status: \'TERMINATED\', terminatedAt: new Date() }\n            : inst\n        ));\n      }, 2000);\n    }\n  };\n\n  const getCostPerHour = (instanceType: string): number => {\n    const costs: Record<string, number> = {\n      \'Standard_NC6\': 0.90,\n      \'Standard_NC12\': 1.80,\n      \'Standard_NC24\': 3.60,\n      \'g4dn.xlarge\': 0.526,\n      \'g4dn.12xlarge\': 3.912,\n      \'p3.2xlarge\': 3.06,\n    };\n    return costs[instanceType] || 0;\n  };\n\n  const stats = {\n    total: instances.length,\n    running: instances.filter(i => [\'READY\', \'RUNNING\'].includes(i.status)).length,\n    provisioning: instances.filter(i => [\'PROVISIONING\', \'CONFIGURING\'].includes(i.status)).length,\n    totalCost: instances.reduce((sum, i) => sum + i.totalCost, 0),\n    hourlyCost: instances\n      .filter(i => [\'READY\', \'RUNNING\'].includes(i.status))\n      .reduce((sum, i) => sum + i.costPerHour, 0),\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \'RUNNING\':\n      case \'READY\':\n        return <CheckCircle2 className="w-4 h-4 text-green-600" />;\n      case \'PROVISIONING\':\n      case \'CONFIGURING\':\n      case \'STOPPING\':\n        return <Loader2 className="w-4 h-4 text-blue-600 animate-spin" />;\n      case \'TERMINATED\':\n        return <XCircle className="w-4 h-4 text-gray-600" />;\n      default:\n        return <Activity className="w-4 h-4 text-gray-400" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \'RUNNING\':\n      case \'READY\':\n        return \'bg-green-100 text-green-700\';\n      case \'PROVISIONING\':\n      case \'CONFIGURING\':\n      case \'STOPPING\':\n        return \'bg-blue-100 text-blue-700\';\n      case \'TERMINATED\':\n        return \'bg-gray-100 text-gray-700\';\n      default:\n        return \'bg-yellow-100 text-yellow-700\';\n    }\n  };\n\n  const getProviderLogo = (provider: string) => {\n    return provider === \'AZURE\' ? \'‚òÅÔ∏è\' : \'üî∂\';\n  };\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold mb-2">Cloud Instances</h1>\n          <p className="text-gray-600">Manage your ephemeral GPU instances</p>\n        </div>\n        <Dialog open={showProvisionDialog} onOpenChange={setShowProvisionDialog}>\n          <DialogTrigger asChild>\n            <Button>\n              <Plus className="w-4 h-4 mr-2" />\n              Provision Instance\n            </Button>\n          </DialogTrigger>\n          <DialogContent className="max-w-2xl">\n            <DialogHeader>\n              <DialogTitle>Provision New Instance</DialogTitle>\n              <DialogDescription>\n                Create a new GPU instance for AI processing\n              </DialogDescription>\n            </DialogHeader>\n            <div className="space-y-4 py-4">\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label>Provider</Label>\n                  <Select\n                    value={provisionForm.provider}\n                    onValueChange={(value) => setProvisionForm({ ...provisionForm, provider: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value="AZURE">Azure</SelectItem>\n                      <SelectItem value="AWS">AWS</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className="space-y-2">\n                  <Label>Instance Type</Label>\n                  <Select\n                    value={provisionForm.instanceType}\n                    onValueChange={(value) => setProvisionForm({ ...provisionForm, instanceType: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {provisionForm.provider === \'AZURE\' ? (\n                        <>\n                          <SelectItem value="Standard_NC6">Standard_NC6 ($0.90/hr)</SelectItem>\n                          <SelectItem value="Standard_NC12">Standard_NC12 ($1.80/hr)</SelectItem>\n                          <SelectItem value="Standard_NC24">Standard_NC24 ($3.60/hr)</SelectItem>\n                        </>\n                      ) : (\n                        <>\n                          <SelectItem value="g4dn.xlarge">g4dn.xlarge ($0.526/hr)</SelectItem>\n                          <SelectItem value="g4dn.12xlarge">g4dn.12xlarge ($3.912/hr)</SelectItem>\n                          <SelectItem value="p3.2xlarge">p3.2xlarge ($3.06/hr)</SelectItem>\n                        </>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n\n              <div className="grid grid-cols-2 gap-4">\n                <div className="space-y-2">\n                  <Label>Region</Label>\n                  <Select\n                    value={provisionForm.region}\n                    onValueChange={(value) => setProvisionForm({ ...provisionForm, region: value })}\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      {provisionForm.provider === \'AZURE\' ? (\n                        <>\n                          <SelectItem value="eastus">East US</SelectItem>\n                          <SelectItem value="westus2">West US 2</SelectItem>\n                          <SelectItem value="westeurope">West Europe</SelectItem>\n                        </>\n                      ) : (\n                        <>\n                          <SelectItem value="us-east-1">US East 1</SelectItem>\n                          <SelectItem value="us-west-2">US West 2</SelectItem>\n                          <SelectItem value="eu-west-1">EU West 1</SelectItem>\n                        </>\n                      )}\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div className="space-y-2">\n                  <Label>Disk Size (GB)</Label>\n                  <Input\n                    type="number"\n                    value={provisionForm.diskSizeGB}\n                    onChange={(e) => setProvisionForm({ ...provisionForm, diskSizeGB: parseInt(e.target.value) })}\n                    min={30}\n                  />\n                </div>\n              </div>\n\n              <div className="space-y-2">\n                <Label>Auto-Terminate (minutes)</Label>\n                <Input\n                  type="number"\n                  value={provisionForm.autoTerminateMinutes}\n                  onChange={(e) => setProvisionForm({ ...provisionForm, autoTerminateMinutes: parseInt(e.target.value) })}\n                  min={5}\n                />\n                <p className="text-xs text-gray-500">\n                  Instance will automatically terminate after this duration\n                </p>\n              </div>\n\n              <div className="space-y-2">\n                <Label>Purpose</Label>\n                <Input\n                  placeholder="e.g., Document Analysis, Model Training"\n                  value={provisionForm.purpose}\n                  onChange={(e) => setProvisionForm({ ...provisionForm, purpose: e.target.value })}\n                />\n              </div>\n\n              <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">\n                <h4 className="font-medium text-blue-900 mb-2">Cost Estimate</h4>\n                <div className="space-y-1 text-sm text-blue-800">\n                  <p>Hourly: ${getCostPerHour(provisionForm.instanceType).toFixed(3)}</p>\n                  <p>\n                    For {provisionForm.autoTerminateMinutes} minutes: $\n                    {(getCostPerHour(provisionForm.instanceType) * (provisionForm.autoTerminateMinutes / 60)).toFixed(3)}\n                  </p>\n                </div>\n              </div>\n            </div>\n            <div className="flex justify-end gap-2">\n              <Button variant="outline" onClick={() => setShowProvisionDialog(false)}>\n                Cancel\n              </Button>\n              <Button onClick={handleProvision} disabled={!provisionForm.purpose}>\n                Provision Instance\n              </Button>\n            </div>\n          </DialogContent>\n        </Dialog>\n      </div>\n\n      {/* Stats */}\n      <div className="grid gap-4 md:grid-cols-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Total Instances\n            </CardTitle>\n            <Server className="w-4 h-4 text-gray-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Running\n            </CardTitle>\n            <Activity className="w-4 h-4 text-green-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">{stats.running}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Hourly Cost\n            </CardTitle>\n            <DollarSign className="w-4 h-4 text-blue-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-blue-600">\n              ${stats.hourlyCost.toFixed(2)}\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Total Cost\n            </CardTitle>\n            <DollarSign className="w-4 h-4 text-purple-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-purple-600">\n              ${stats.totalCost.toFixed(2)}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Instances List */}\n      <div className="space-y-4">\n        {instances.length === 0 ? (\n          <Card>\n            <CardContent className="py-12 text-center">\n              <Server className="w-16 h-16 text-gray-400 mx-auto mb-4" />\n              <h3 className="text-xl font-semibold mb-2">No instances</h3>\n              <p className="text-gray-600 mb-4">\n                Provision your first GPU instance to get started\n              </p>\n              <Button onClick={() => setShowProvisionDialog(true)}>\n                <Plus className="w-4 h-4 mr-2" />\n                Provision Instance\n              </Button>\n            </CardContent>\n          </Card>\n        ) : (\n          instances.map((instance) => (\n            <Card key={instance.id} className="hover:shadow-md transition-shadow">\n              <CardContent className="p-6">\n                <div className="flex items-start justify-between">\n                  <div className="flex items-start gap-4 flex-1">\n                    <div className="text-4xl">{getProviderLogo(instance.provider)}</div>\n                    \n                    <div className="flex-1 min-w-0">\n                      <div className="flex items-center gap-2 mb-2">\n                        <h3 className="font-semibold text-lg">{instance.instanceType}</h3>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${getStatusColor(instance.status)}`}>\n                          {getStatusIcon(instance.status)}\n                          {instance.status}\n                        </span>\n                      </div>\n\n                      <p className="text-sm text-gray-600 mb-3">{instance.purpose}</p>\n\n                      <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">\n                        <div className="flex items-center gap-2 text-gray-600">\n                          <MapPin className="w-4 h-4" />\n                          <span>{instance.region}</span>\n                        </div>\n                        <div className="flex items-center gap-2 text-gray-600">\n                          <DollarSign className="w-4 h-4" />\n                          <span>${instance.costPerHour}/hr</span>\n                        </div>\n                        <div className="flex items-center gap-2 text-gray-600">\n                          <Clock className="w-4 h-4" />\n                          <span>{instance.autoTerminateMinutes}min</span>\n                        </div>\n                        <div className="flex items-center gap-2 text-gray-600">\n                          <Zap className="w-4 h-4" />\n                          <span>${instance.totalCost.toFixed(2)} total</span>\n                        </div>\n                      </div>\n\n                      {instance.publicIp && (\n                        <div className="mt-3 p-3 bg-gray-50 rounded-lg">\n                          <div className="grid grid-cols-2 gap-4 text-sm">\n                            <div>\n                              <span className="text-gray-600">Public IP:</span>\n                              <span className="ml-2 font-mono">{instance.publicIp}</span>\n                            </div>\n                            <div>\n                              <span className="text-gray-600">Private IP:</span>\n                              <span className="ml-2 font-mono">{instance.privateIp}</span>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n\n                      <div className="mt-3 text-xs text-gray-500">\n                        Created: {instance.createdAt.toLocaleString()}\n                        {instance.terminatedAt && (\n                          <> ‚Ä¢ Terminated: {instance.terminatedAt.toLocaleString()}</>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  {[\'READY\', \'RUNNING\'].includes(instance.status) && (\n                    <Button\n                      variant="outline"\n                      size="sm"\n                      onClick={() => handleTerminate(instance.id)}\n                      className="ml-4"\n                    >\n                      <Trash2 className="w-4 h-4 mr-2 text-red-600" />\n                      Terminate\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}