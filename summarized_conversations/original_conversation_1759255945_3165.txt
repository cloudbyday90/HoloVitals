{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="src/services/HIPAAComplianceGateService.ts">\n/**\n * HIPAA Compliance Gate Service\n * \n * Blocks non-compliant actions and requires compliance review before proceeding.\n * Integrates with all repositories to enforce HIPAA compliance.\n */\n\nimport { PrismaClient, ComplianceGate, GateStatus, ComplianceOverride, OverrideStatus } from \'@prisma/client\';\nimport HIPAAComplianceService from \'./HIPAAComplianceService\';\n\nconst prisma = new PrismaClient();\n\ninterface GateRequest {\n  repository: string;\n  action: string;\n  actionDetails: any;\n  rules?: string[];\n  triggeredBy: string;\n}\n\ninterface GateResult {\n  gateId: string;\n  status: GateStatus;\n  blocked: boolean;\n  requiresReview: boolean;\n  violations: any[];\n  canProceed: boolean;\n  message: string;\n}\n\ninterface OverrideRequest {\n  gateId?: string;\n  violationId?: string;\n  requestedBy: string;\n  requestedByName: string;\n  justification: string;\n  businessNeed: string;\n  riskAssessment: string;\n  mitigationPlan: string;\n  expiresAt?: Date;\n}\n\nexport class HIPAAComplianceGateService {\n  private complianceService: HIPAAComplianceService;\n\n  constructor() {\n    this.complianceService = new HIPAAComplianceService();\n  }\n\n  /**\n   * Check compliance gate\n   */\n  async checkGate(request: GateRequest): Promise<GateResult> {\n    // Create gate record\n    const gate = await prisma.complianceGate.create({\n      data: {\n        gateId: `gate_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        repository: request.repository,\n        action: request.action,\n        actionDetails: request.actionDetails,\n        rulesChecked: request.rules || [],\n        status: GateStatus.CHECKING,\n      },\n    });\n\n    try {\n      // Perform compliance check\n      const complianceCheck = await this.complianceService.checkCompliance({\n        action: request.action,\n        repository: request.repository,\n        targetType: \'action\',\n        targetId: gate.gateId,\n        targetDetails: request.actionDetails,\n        rules: request.rules,\n        triggeredBy: request.triggeredBy,\n      });\n\n      // Update gate with check results\n      const updatedGate = await prisma.complianceGate.update({\n        where: { id: gate.id },\n        data: {\n          status: complianceCheck.blocked ? GateStatus.BLOCKED :\n                  complianceCheck.requiresReview ? GateStatus.REVIEW_REQUIRED :\n                  complianceCheck.passed ? GateStatus.PASSED :\n                  GateStatus.BLOCKED,\n          checkResults: {\n            passed: complianceCheck.passed,\n            score: complianceCheck.score,\n            violations: complianceCheck.violations.length,\n            warnings: complianceCheck.warnings.length,\n          },\n          violations: complianceCheck.violations.map(v => v.id),\n          riskScore: complianceCheck.score,\n          blocked: complianceCheck.blocked,\n          blockedAt: complianceCheck.blocked ? new Date() : null,\n          blockReason: complianceCheck.blocked ? \n            `Action blocked due to ${complianceCheck.violations.length} HIPAA violation(s)` : null,\n          reviewRequired: complianceCheck.requiresReview,\n          reviewRequestedAt: complianceCheck.requiresReview ? new Date() : null,\n        },\n      });\n\n      // Notify if blocked or requires review\n      if (complianceCheck.blocked || complianceCheck.requiresReview) {\n        await this.notifyComplianceIssue(updatedGate, complianceCheck);\n      }\n\n      return {\n        gateId: gate.gateId,\n        status: updatedGate.status,\n        blocked: complianceCheck.blocked,\n        requiresReview: complianceCheck.requiresReview,\n        violations: complianceCheck.violations,\n        canProceed: !complianceCheck.blocked && !complianceCheck.requiresReview,\n        message: this.generateGateMessage(updatedGate, complianceCheck),\n      };\n    } catch (error: any) {\n      // Mark gate as failed\n      await prisma.complianceGate.update({\n        where: { id: gate.id },\n        data: {\n          status: GateStatus.BLOCKED,\n          blocked: true,\n          blockReason: `Compliance check failed: ${error.message}`,\n        },\n      });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request compliance review\n   */\n  async requestReview(gateId: string, reviewNotes?: string): Promise<void> {\n    await prisma.complianceGate.update({\n      where: { gateId },\n      data: {\n        reviewRequired: true,\n        reviewRequestedAt: new Date(),\n        reviewNotes,\n      },\n    });\n\n    // Notify compliance team\n    await this.notifyReviewRequested(gateId);\n  }\n\n  /**\n   * Approve gate (after review)\n   */\n  async approveGate(gateId: string, reviewedBy: string, reviewNotes: string, conditions?: string[]): Promise<void> {\n    await prisma.complianceGate.update({\n      where: { gateId },\n      data: {\n        status: GateStatus.APPROVED,\n        reviewedBy,\n        reviewedAt: new Date(),\n        reviewDecision: \'APPROVE\',\n        reviewNotes,\n        resolved: true,\n        resolvedAt: new Date(),\n        resolution: conditions ? \n          `Approved with conditions: ${conditions.join(\', \')}` :\n          \'Approved without conditions\',\n      },\n    });\n\n    // Notify requester\n    await this.notifyGateApproved(gateId);\n  }\n\n  /**\n   * Reject gate (after review)\n   */\n  async rejectGate(gateId: string, reviewedBy: string, reviewNotes: string): Promise<void> {\n    await prisma.complianceGate.update({\n      where: { gateId },\n      data: {\n        status: GateStatus.REJECTED,\n        reviewedBy,\n        reviewedAt: new Date(),\n        reviewDecision: \'REJECT\',\n        reviewNotes,\n        resolved: true,\n        resolvedAt: new Date(),\n        resolution: \'Rejected due to HIPAA compliance concerns\',\n      },\n    });\n\n    // Notify requester\n    await this.notifyGateRejected(gateId);\n  }\n\n  /**\n   * Request compliance override\n   */\n  async requestOverride(request: OverrideRequest): Promise<ComplianceOverride> {\n    // Determine approval level based on risk\n    const approvalLevel = await this.determineApprovalLevel(request);\n\n    const override = await prisma.complianceOverride.create({\n      data: {\n        overrideType: \'COMPLIANCE_GATE\',\n        gateId: request.gateId,\n        violationId: request.violationId,\n        requestedBy: request.requestedBy,\n        requestedByName: request.requestedByName,\n        justification: request.justification,\n        businessNeed: request.businessNeed,\n        riskAssessment: request.riskAssessment,\n        mitigationPlan: request.mitigationPlan,\n        approvalLevel,\n        requiredApprovers: this.getRequiredApprovers(approvalLevel),\n        approvals: [],\n        expiresAt: request.expiresAt,\n        monitoringRequired: true,\n        reviewFrequency: \'MONTHLY\',\n        auditTrail: [{\n          timestamp: new Date(),\n          action: \'OVERRIDE_REQUESTED\',\n          by: request.requestedBy,\n        }],\n      },\n    });\n\n    // Notify approvers\n    await this.notifyOverrideRequested(override);\n\n    return override;\n  }\n\n  /**\n   * Approve override\n   */\n  async approveOverride(overrideId: string, approvedBy: string, approverRole: string, conditions?: string[]): Promise<void> {\n    const override = await prisma.complianceOverride.findUnique({\n      where: { id: overrideId },\n    });\n\n    if (!override) {\n      throw new Error(\'Override not found\');\n    }\n\n    // Add approval\n    const approvals = (override.approvals as any[]) || [];\n    approvals.push({\n      role: approverRole,\n      approvedBy,\n      approvedAt: new Date(),\n      conditions: conditions || [],\n    });\n\n    // Check if all required approvals received\n    const allApproved = this.checkAllApproved(approvals, override.requiredApprovers);\n\n    // Update override\n    await prisma.complianceOverride.update({\n      where: { id: overrideId },\n      data: {\n        approvals,\n        allApproved,\n        status: allApproved ? OverrideStatus.APPROVED : OverrideStatus.UNDER_REVIEW,\n        approvedAt: allApproved ? new Date() : null,\n        approvedBy: allApproved ? approvedBy : null,\n        conditions: conditions || override.conditions,\n        auditTrail: [\n          ...(override.auditTrail as any[]),\n          {\n            timestamp: new Date(),\n            action: \'APPROVAL_RECEIVED\',\n            by: approvedBy,\n            role: approverRole,\n          },\n        ],\n      },\n    });\n\n    // If all approved, update gate\n    if (allApproved && override.gateId) {\n      await prisma.complianceGate.update({\n        where: { gateId: override.gateId },\n        data: {\n          status: GateStatus.OVERRIDE_APPROVED,\n          overrideId,\n          resolved: true,\n          resolvedAt: new Date(),\n          resolution: \'Approved via compliance override\',\n        },\n      });\n\n      // Notify requester\n      await this.notifyOverrideApproved(overrideId);\n    }\n  }\n\n  /**\n   * Reject override\n   */\n  async rejectOverride(overrideId: string, rejectedBy: string, rejectionReason: string): Promise<void> {\n    const override = await prisma.complianceOverride.findUnique({\n      where: { id: overrideId },\n    });\n\n    if (!override) {\n      throw new Error(\'Override not found\');\n    }\n\n    await prisma.complianceOverride.update({\n      where: { id: overrideId },\n      data: {\n        status: OverrideStatus.REJECTED,\n        rejectedAt: new Date(),\n        rejectedBy,\n        rejectionReason,\n        auditTrail: [\n          ...(override.auditTrail as any[]),\n          {\n            timestamp: new Date(),\n            action: \'OVERRIDE_REJECTED\',\n            by: rejectedBy,\n            reason: rejectionReason,\n          },\n        ],\n      },\n    });\n\n    // Notify requester\n    await this.notifyOverrideRejected(overrideId);\n  }\n\n  /**\n   * Get gate status\n   */\n  async getGateStatus(gateId: string): Promise<ComplianceGate | null> {\n    return await prisma.complianceGate.findUnique({\n      where: { gateId },\n    });\n  }\n\n  /**\n   * Get pending reviews\n   */\n  async getPendingReviews(): Promise<ComplianceGate[]> {\n    return await prisma.complianceGate.findMany({\n      where: {\n        status: GateStatus.REVIEW_REQUIRED,\n        resolved: false,\n      },\n      orderBy: {\n        reviewRequestedAt: \'asc\',\n      },\n    });\n  }\n\n  /**\n   * Get pending overrides\n   */\n  async getPendingOverrides(): Promise<ComplianceOverride[]> {\n    return await prisma.complianceOverride.findMany({\n      where: {\n        status: {\n          in: [OverrideStatus.PENDING, OverrideStatus.UNDER_REVIEW],\n        },\n      },\n      orderBy: {\n        requestedAt: \'asc\',\n      },\n    });\n  }\n\n  // ============================================================================\n  // PRIVATE HELPER METHODS\n  // ============================================================================\n\n  private generateGateMessage(gate: ComplianceGate, check: any): string {\n    if (gate.blocked) {\n      return `Action blocked due to ${check.violations.length} HIPAA violation(s). Compliance review required.`;\n    } else if (gate.reviewRequired) {\n      return `Action requires compliance review due to ${check.violations.length} potential violation(s).`;\n    } else if (check.warnings.length > 0) {\n      return `Action passed with ${check.warnings.length} warning(s). Review recommendations.`;\n    } else {\n      return \'Action complies with HIPAA requirements. Proceed.\';\n    }\n  }\n\n  private async determineApprovalLevel(request: OverrideRequest): Promise<number> {\n    // Determine approval level based on risk\n    // Level 1: Team Lead\n    // Level 2: Compliance Officer\n    // Level 3: Compliance Officer + Legal\n    // Level 4: Compliance Officer + Legal + CTO\n\n    // For now, default to level 2 (Compliance Officer)\n    return 2;\n  }\n\n  private getRequiredApprovers(level: number): string[] {\n    const approvers: { [key: number]: string[] } = {\n      1: [\'TEAM_LEAD\'],\n      2: [\'COMPLIANCE_OFFICER\'],\n      3: [\'COMPLIANCE_OFFICER\', \'LEGAL\'],\n      4: [\'COMPLIANCE_OFFICER\', \'LEGAL\', \'CTO\'],\n    };\n\n    return approvers[level] || [\'COMPLIANCE_OFFICER\'];\n  }\n\n  private checkAllApproved(approvals: any[], requiredApprovers: string[]): boolean {\n    const approvedRoles = new Set(approvals.map(a => a.role));\n    return requiredApprovers.every(role => approvedRoles.has(role));\n  }\n\n  private async notifyComplianceIssue(gate: ComplianceGate, check: any): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Compliance issue detected for gate ${gate.gateId}`);\n  }\n\n  private async notifyReviewRequested(gateId: string): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Compliance review requested for gate ${gateId}`);\n  }\n\n  private async notifyGateApproved(gateId: string): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Gate ${gateId} approved`);\n  }\n\n  private async notifyGateRejected(gateId: string): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Gate ${gateId} rejected`);\n  }\n\n  private async notifyOverrideRequested(override: ComplianceOverride): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Override requested: ${override.id}`);\n  }\n\n  private async notifyOverrideApproved(overrideId: string): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Override ${overrideId} approved`);\n  }\n\n  private async notifyOverrideRejected(overrideId: string): Promise<void> {\n    // TODO: Implement notification\n    console.log(`Override ${overrideId} rejected`);\n  }\n}\n\nexport default HIPAAComplianceGateService;\n</create-file>\n</function_calls>'}