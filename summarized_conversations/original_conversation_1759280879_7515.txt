{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/costs/breakdown/route.ts">\n/**\n * Cost Breakdown API\n * Protected - OWNER only\n * Returns detailed cost breakdown by service\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { protectCostEndpoint } from \'@/lib/middleware/auth\';\nimport { prisma } from \'@/lib/prisma\';\n\nexport async function GET(req: NextRequest) {\n  // Protect endpoint - OWNER only\n  const user = await protectCostEndpoint(req);\n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  try {\n    const { searchParams } = new URL(req.url);\n    const timeRange = searchParams.get(\'range\') || \'7d\';\n\n    // Calculate date range\n    const now = new Date();\n    let startDate: Date;\n    let days: number;\n\n    switch (timeRange) {\n      case \'7d\':\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        days = 7;\n        break;\n      case \'30d\':\n        startDate = new Date(now.getTime() - 30 * 24 * 60 * 60 * 1000);\n        days = 30;\n        break;\n      case \'90d\':\n        startDate = new Date(now.getTime() - 90 * 24 * 60 * 60 * 1000);\n        days = 90;\n        break;\n      default:\n        startDate = new Date(now.getTime() - 7 * 24 * 60 * 60 * 1000);\n        days = 7;\n    }\n\n    // Get daily breakdown\n    const dailyBreakdown = [];\n    \n    for (let i = 0; i < days; i++) {\n      const dayStart = new Date(startDate.getTime() + i * 24 * 60 * 60 * 1000);\n      const dayEnd = new Date(dayStart.getTime() + 24 * 60 * 60 * 1000);\n\n      const [chatbot, optimizer, queue, instances] = await Promise.all([\n        prisma.conversation.aggregate({\n          where: {\n            createdAt: { gte: dayStart, lt: dayEnd },\n          },\n          _sum: { totalCost: true },\n        }),\n        prisma.contextOptimization.aggregate({\n          where: {\n            createdAt: { gte: dayStart, lt: dayEnd },\n          },\n          _count: true,\n        }),\n        prisma.analysisTask.aggregate({\n          where: {\n            createdAt: { gte: dayStart, lt: dayEnd },\n            status: \'COMPLETED\',\n          },\n          _count: true,\n        }),\n        prisma.cloudInstance.aggregate({\n          where: {\n            createdAt: { gte: dayStart, lt: dayEnd },\n          },\n          _sum: { totalCost: true },\n        }),\n      ]);\n\n      dailyBreakdown.push({\n        date: dayStart.toISOString().split(\'T\')[0],\n        chatbot: chatbot._sum.totalCost || 0,\n        optimizer: optimizer._count * 0.001, // $0.001 per optimization\n        queue: queue._count * 0.05, // $0.05 per task\n        instances: instances._sum.totalCost || 0,\n      });\n    }\n\n    return NextResponse.json({\n      timeRange,\n      startDate: startDate.toISOString(),\n      endDate: now.toISOString(),\n      breakdown: dailyBreakdown,\n    });\n  } catch (error) {\n    console.error(\'Error fetching cost breakdown:\', error);\n    return NextResponse.json(\n      { error: \'Failed to fetch cost breakdown\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}