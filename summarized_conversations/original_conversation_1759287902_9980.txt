{'role': 'assistant', 'content': 'Now let\'s create a Connector Factory to easily instantiate the right connector:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/lib/connectors/ConnectorFactory.ts">\n/**\n * Connector Factory\n * \n * Factory for creating provider-specific EHR connectors\n */\n\nimport { EHRProvider } from \'../config/ehr-providers\';\nimport { BaseEHRConnector, ConnectorConfig } from \'./BaseEHRConnector\';\nimport { EpicConnector } from \'./EpicConnector\';\nimport { CernerConnector } from \'./CernerConnector\';\nimport { AllscriptsConnector } from \'./AllscriptsConnector\';\nimport { AthenaHealthConnector } from \'./AthenaHealthConnector\';\nimport { EClinicalWorksConnector } from \'./EClinicalWorksConnector\';\nimport { NextGenConnector } from \'./NextGenConnector\';\n\nexport interface ConnectorFactoryConfig {\n  provider: EHRProvider;\n  clientId: string;\n  clientSecret?: string;\n  redirectUri: string;\n  useSandbox?: boolean;\n  tenantId?: string; // For Cerner\n}\n\nexport class ConnectorFactory {\n  /**\n   * Create a connector for the specified provider\n   */\n  static createConnector(config: ConnectorFactoryConfig): BaseEHRConnector {\n    const baseConfig = {\n      clientId: config.clientId,\n      clientSecret: config.clientSecret,\n      redirectUri: config.redirectUri,\n      useSandbox: config.useSandbox,\n    };\n\n    switch (config.provider) {\n      case EHRProvider.EPIC:\n        return new EpicConnector(baseConfig);\n\n      case EHRProvider.CERNER:\n        return new CernerConnector({\n          ...baseConfig,\n          tenantId: config.tenantId,\n        });\n\n      case EHRProvider.ALLSCRIPTS:\n        return new AllscriptsConnector(baseConfig);\n\n      case EHRProvider.ATHENAHEALTH:\n        return new AthenaHealthConnector(baseConfig);\n\n      case EHRProvider.ECLINICALWORKS:\n        return new EClinicalWorksConnector(baseConfig);\n\n      case EHRProvider.NEXTGEN:\n        return new NextGenConnector(baseConfig);\n\n      default:\n        throw new Error(`Unsupported provider: ${config.provider}`);\n    }\n  }\n\n  /**\n   * Get list of supported providers\n   */\n  static getSupportedProviders(): EHRProvider[] {\n    return [\n      EHRProvider.EPIC,\n      EHRProvider.CERNER,\n      EHRProvider.ALLSCRIPTS,\n      EHRProvider.ATHENAHEALTH,\n      EHRProvider.ECLINICALWORKS,\n      EHRProvider.NEXTGEN,\n    ];\n  }\n\n  /**\n   * Check if a provider is supported\n   */\n  static isProviderSupported(provider: EHRProvider): boolean {\n    return this.getSupportedProviders().includes(provider);\n  }\n}\n</create-file>\n</function_calls>'}