{'role': 'assistant', 'content': '# Next Phase: Phase 3 - Service Implementation\n\nBased on the project documentation and current state, here\'s what comes next:\n\n## Current Status\n- ✅ **Phase 1:** Documentation (Complete)\n- ✅ **Phase 2:** Database Setup (90% - needs database server)\n- ✅ **Phase 5:** Configuration & Maintenance (Complete)\n- ⏳ **Phase 3:** Service Implementation (Next)\n\n## Phase 3: Core Services Implementation\n\n### Overview\nImplement the four core services that power HoloVitals\' AI-driven medical document analysis with cost optimization.\n\n### Services to Implement\n\n#### 1. **LightweightChatbotService** (Priority: HIGH)\n**Purpose:** Fast AI responses for 80% of user queries\n\n**Key Features:**\n- Uses GPT-3.5 Turbo for speed and cost efficiency\n- <2 second response time\n- Handles common questions about medical documents\n- Automatic escalation to heavy-duty analysis when needed\n\n**Implementation Tasks:**\n- [ ] Create service class with OpenAI integration\n- [ ] Implement conversation context management\n- [ ] Add query classification logic\n- [ ] Build escalation triggers\n- [ ] Add response streaming\n- [ ] Implement error handling and retries\n\n#### 2. **ContextOptimizerService** (Priority: HIGH)\n**Purpose:** Reduce token usage by 40% through intelligent context management\n\n**Key Features:**\n- Smart document chunking\n- Relevance scoring for context selection\n- Token counting and optimization\n- Context window management (4K, 8K, 16K, 32K)\n\n**Implementation Tasks:**\n- [ ] Create context analysis engine\n- [ ] Implement relevance scoring algorithm\n- [ ] Build token counting utilities\n- [ ] Add context compression logic\n- [ ] Create context caching system\n- [ ] Implement performance metrics tracking\n\n#### 3. **AnalysisQueueService** (Priority: MEDIUM)\n**Purpose:** Priority-based task management for heavy AI analysis\n\n**Key Features:**\n- Priority queue (URGENT, HIGH, NORMAL, LOW)\n- Status tracking (PENDING → ANALYZING → COMPLETED)\n- Missing data identification\n- Result storage and retrieval\n- Performance metrics\n\n**Implementation Tasks:**\n- [ ] Create queue management system\n- [ ] Implement priority scoring algorithm\n- [ ] Build status tracking\n- [ ] Add missing data detection\n- [ ] Create result storage system\n- [ ] Implement queue monitoring dashboard\n\n#### 4. **InstanceProvisionerService** (Priority: MEDIUM)\n**Purpose:** Ephemeral cloud instance management for cost optimization\n\n**Key Features:**\n- On-demand GPU instance provisioning\n- Automatic termination after analysis\n- Cost tracking and optimization\n- Health monitoring\n- 90% cost savings vs always-on instances\n\n**Implementation Tasks:**\n- [ ] Create cloud provider integration (Azure/AWS)\n- [ ] Implement instance lifecycle management\n- [ ] Build cost tracking system\n- [ ] Add health monitoring\n- [ ] Create automatic cleanup logic\n- [ ] Implement instance pooling for efficiency\n\n## Implementation Order\n\n### Week 1-2: Foundation\n1. **LightweightChatbotService** - Get basic AI chat working\n2. **ContextOptimizerService** - Optimize token usage\n\n### Week 3-4: Advanced Features\n3. **AnalysisQueueService** - Add heavy-duty analysis queue\n4. **InstanceProvisionerService** - Implement cloud provisioning\n\n## Prerequisites Before Starting Phase 3\n\n### 1. Database Setup (Complete Phase 2)\nYou need to set up the PostgreSQL database first. Three options:\n\n**Option A: Docker PostgreSQL (Recommended - 5 minutes)**\n```bash\ndocker run --name holovitals-postgres \\\n  -e POSTGRES_PASSWORD=your_password \\\n  -e POSTGRES_DB=holovitals \\\n  -p 5432:5432 \\\n  -d postgres:15\n```\n\n**Option B: Cloud Database (10 minutes)**\n- Supabase (free tier)\n- Railway (free tier)\n- Neon (free tier)\n\n**Option C: Local PostgreSQL (15-20 minutes)**\n```bash\nsudo apt-get install postgresql\n```\n\n### 2. Environment Configuration\nUpdate `.env` with:\n```env\nDATABASE_URL="postgresql://user:password@localhost:5432/holovitals"\nOPENAI_API_KEY="your_openai_key"\n```\n\n### 3. Run Migrations\n```bash\ncd medical-analysis-platform\nnpm run db:migrate\nnpm run db:seed\n```\n\n## Estimated Timeline\n\n- **Phase 2 Completion:** 15-30 minutes (database setup)\n- **Phase 3 Implementation:** 2-3 weeks\n  - Week 1: LightweightChatbotService + ContextOptimizerService\n  - Week 2: AnalysisQueueService\n  - Week 3: InstanceProvisionerService + Integration Testing\n\n## Success Criteria\n\n✅ All four services implemented and tested  \n✅ Services integrated with database  \n✅ API endpoints created for each service  \n✅ Unit tests written and passing  \n✅ Integration tests passing  \n✅ Documentation updated  \n✅ Cost optimization metrics validated (40% token reduction, 90% cloud cost savings)  \n\n## Would you like to:\n\n1. **Complete Phase 2 first** (set up database) - Recommended\n2. **Start Phase 3 immediately** (implement services with mock data)\n3. **Review the service architecture** before implementation\n4. **Something else?**\n\nWhat would you prefer?\n<function_calls>\n<complete>\n</complete>\n</function_calls>\n</function_calls>'}