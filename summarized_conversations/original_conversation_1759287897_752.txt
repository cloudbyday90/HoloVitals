{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/lib/connectors/CernerConnector.ts">\n/**\n * Cerner/Oracle Health Connector\n * \n * Cerner-specific implementation with HealtheLife integration\n */\n\nimport { BaseEHRConnector, ConnectorConfig } from \'./BaseEHRConnector\';\nimport { CERNER_CONFIG } from \'../config/ehr-providers\';\n\nexport class CernerConnector extends BaseEHRConnector {\n  private tenantId?: string;\n\n  constructor(config: Omit<ConnectorConfig, \'providerConfig\'> & { tenantId?: string }) {\n    super({\n      ...config,\n      providerConfig: CERNER_CONFIG,\n    });\n    this.tenantId = config.tenantId;\n  }\n\n  /**\n   * Cerner requires tenant ID in URLs\n   */\n  protected modifyAuthorizationUrl(url: string): string {\n    if (!this.tenantId) {\n      return url;\n    }\n\n    // Replace {tenant_id} placeholder with actual tenant ID\n    return url.replace(\'{tenant_id}\', this.tenantId);\n  }\n\n  /**\n   * Create FHIR client with tenant-specific base URL\n   */\n  createFHIRClient(accessToken: string): any {\n    const endpoints = this.useSandbox && this.providerConfig.sandbox\n      ? this.providerConfig.sandbox\n      : this.providerConfig.production;\n\n    let baseUrl = endpoints.fhirBaseUrl;\n    \n    // Replace tenant ID if provided\n    if (this.tenantId) {\n      baseUrl = baseUrl.replace(\'{tenant_id}\', this.tenantId);\n    }\n\n    return super.createFHIRClient(accessToken);\n  }\n\n  /**\n   * Cerner-specific scopes\n   */\n  protected getScopes(): string[] {\n    return [\n      \'openid\',\n      \'profile\',\n      \'launch/patient\',\n      \'offline_access\',\n      \'patient/Patient.read\',\n      \'patient/DocumentReference.read\',\n      \'patient/Observation.read\',\n      \'patient/Condition.read\',\n      \'patient/MedicationRequest.read\',\n      \'patient/AllergyIntolerance.read\',\n      \'patient/Immunization.read\',\n      \'patient/Procedure.read\',\n    ];\n  }\n}\n</create-file>\n</function_calls>'}