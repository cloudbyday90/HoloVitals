{'role': 'assistant', 'content': 'Great! Now let\'s create the type definitions for the chatbot service:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/lib/types/chatbot.ts">\n/**\n * Type definitions for LightweightChatbotService\n * \n * Defines types for chat conversations, messages, and AI interactions\n * used in the lightweight chatbot system.\n */\n\nexport enum MessageRole {\n  USER = \'USER\',\n  ASSISTANT = \'ASSISTANT\',\n  SYSTEM = \'SYSTEM\'\n}\n\nexport enum QueryComplexity {\n  SIMPLE = \'SIMPLE\',           // Can be handled by GPT-3.5 Turbo\n  MODERATE = \'MODERATE\',       // Might need GPT-4\n  COMPLEX = \'COMPLEX\',         // Requires heavy-duty analysis\n  CRITICAL = \'CRITICAL\'        // Medical emergency or critical analysis\n}\n\nexport enum EscalationReason {\n  COMPLEXITY = \'COMPLEXITY\',           // Query too complex\n  MEDICAL_ANALYSIS = \'MEDICAL_ANALYSIS\', // Requires detailed medical analysis\n  MULTIPLE_DOCUMENTS = \'MULTIPLE_DOCUMENTS\', // Cross-document analysis\n  TREND_ANALYSIS = \'TREND_ANALYSIS\',   // Temporal trend analysis\n  UNCERTAINTY = \'UNCERTAINTY\',         // AI is uncertain about response\n  USER_REQUEST = \'USER_REQUEST\'        // User explicitly requests detailed analysis\n}\n\nexport interface ChatMessage {\n  id: string;\n  conversationId: string;\n  role: MessageRole;\n  content: string;\n  tokens: number;\n  complexity?: QueryComplexity;\n  escalated?: boolean;\n  escalationReason?: EscalationReason;\n  metadata?: Record<string, any>;\n  createdAt: Date;\n}\n\nexport interface ChatConversation {\n  id: string;\n  userId: string;\n  title?: string;\n  messages: ChatMessage[];\n  totalTokens: number;\n  totalCost: number;\n  isActive: boolean;\n  createdAt: Date;\n  updatedAt: Date;\n}\n\nexport interface ChatRequest {\n  conversationId?: string;\n  userId: string;\n  message: string;\n  context?: {\n    documentIds?: string[];\n    patientId?: string;\n    includeHistory?: boolean;\n  };\n}\n\nexport interface ChatResponse {\n  conversationId: string;\n  messageId: string;\n  content: string;\n  role: MessageRole;\n  tokens: {\n    prompt: number;\n    completion: number;\n    total: number;\n  };\n  cost: number;\n  complexity: QueryComplexity;\n  escalated: boolean;\n  escalationReason?: EscalationReason;\n  processingTime: number; // milliseconds\n  model: string;\n  metadata?: {\n    confidence?: number;\n    sources?: string[];\n    suggestions?: string[];\n  };\n}\n\nexport interface EscalationTrigger {\n  shouldEscalate: boolean;\n  reason?: EscalationReason;\n  confidence: number;\n  complexity: QueryComplexity;\n  metadata?: Record<string, any>;\n}\n\nexport interface ContextWindow {\n  maxTokens: number;\n  currentTokens: number;\n  messages: ChatMessage[];\n  systemPrompt: string;\n  availableTokens: number;\n}\n\nexport interface ChatbotConfig {\n  model: string;\n  maxTokens: number;\n  temperature: number;\n  topP: number;\n  frequencyPenalty: number;\n  presencePenalty: number;\n  maxContextMessages: number;\n  escalationThreshold: number;\n  streamResponse: boolean;\n}\n\nexport interface TokenUsage {\n  promptTokens: number;\n  completionTokens: number;\n  totalTokens: number;\n  estimatedCost: number;\n}\n\nexport interface ChatbotMetrics {\n  totalConversations: number;\n  totalMessages: number;\n  totalTokens: number;\n  totalCost: number;\n  averageResponseTime: number;\n  escalationRate: number;\n  successRate: number;\n}\n\n// Default configuration for GPT-3.5 Turbo\nexport const DEFAULT_CHATBOT_CONFIG: ChatbotConfig = {\n  model: \'gpt-3.5-turbo\',\n  maxTokens: 500,\n  temperature: 0.7,\n  topP: 1,\n  frequencyPenalty: 0,\n  presencePenalty: 0,\n  maxContextMessages: 10,\n  escalationThreshold: 0.7,\n  streamResponse: true\n};\n\n// Token costs per 1K tokens (as of 2025)\nexport const TOKEN_COSTS = {\n  \'gpt-3.5-turbo\': {\n    prompt: 0.0005,    // $0.50 per 1M tokens\n    completion: 0.0015  // $1.50 per 1M tokens\n  },\n  \'gpt-4\': {\n    prompt: 0.03,      // $30 per 1M tokens\n    completion: 0.06    // $60 per 1M tokens\n  },\n  \'gpt-4-turbo\': {\n    prompt: 0.01,      // $10 per 1M tokens\n    completion: 0.03    // $30 per 1M tokens\n  }\n};\n\n// System prompts for different contexts\nexport const SYSTEM_PROMPTS = {\n  general: `You are HoloVitals AI, a helpful medical document analysis assistant. \nYou help patients understand their medical records, lab results, and health information.\nAlways be clear, accurate, and empathetic. If you\'re unsure about something medical, \nrecommend consulting with a healthcare provider. Never provide medical diagnoses or treatment advice.`,\n\n  documentAnalysis: `You are analyzing medical documents for a patient. \nProvide clear explanations of medical terms, lab values, and findings.\nHighlight important information and potential concerns.\nAlways maintain patient privacy and confidentiality.`,\n\n  labResults: `You are helping a patient understand their lab results.\nExplain what each test measures, what the values mean, and whether they\'re in normal range.\nUse simple language and avoid medical jargon when possible.\nIf values are abnormal, explain what that might indicate without diagnosing.`,\n\n  trendAnalysis: `You are analyzing health trends over time.\nCompare current values with historical data and identify patterns.\nExplain whether trends are improving, stable, or concerning.\nRecommend follow-up if trends indicate potential issues.`\n};\n\n// Complexity indicators for query classification\nexport const COMPLEXITY_INDICATORS = {\n  simple: [\n    \'what is\',\n    \'define\',\n    \'explain\',\n    \'meaning of\',\n    \'normal range\',\n    \'when was\',\n    \'how many\'\n  ],\n  moderate: [\n    \'compare\',\n    \'difference between\',\n    \'trend\',\n    \'over time\',\n    \'history of\',\n    \'related to\'\n  ],\n  complex: [\n    \'analyze\',\n    \'correlation\',\n    \'predict\',\n    \'risk of\',\n    \'multiple\',\n    \'comprehensive\',\n    \'detailed analysis\'\n  ],\n  critical: [\n    \'emergency\',\n    \'urgent\',\n    \'critical\',\n    \'severe\',\n    \'life-threatening\',\n    \'immediate\'\n  ]\n};\n\n// Escalation triggers\nexport const ESCALATION_TRIGGERS = {\n  multipleDocuments: 3,        // Escalate if query involves 3+ documents\n  complexityThreshold: 0.7,    // Escalate if complexity score > 0.7\n  uncertaintyThreshold: 0.5,   // Escalate if confidence < 0.5\n  medicalTermsCount: 5,        // Escalate if 5+ medical terms in query\n  temporalAnalysis: true       // Escalate for time-series analysis\n};\n</create-file>\n</function_calls>'}