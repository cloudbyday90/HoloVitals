{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/components/document/upload-zone.tsx">\n\'use client\';\n\nimport { useCallback, useState } from \'react\';\nimport { Upload, FileText, AlertCircle } from \'lucide-react\';\nimport { Card, CardContent } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\n\ninterface UploadZoneProps {\n  onUpload: (files: File[]) => void;\n  maxSize?: number; // in MB\n  acceptedTypes?: string[];\n}\n\nexport function UploadZone({ \n  onUpload, \n  maxSize = 10,\n  acceptedTypes = [\'application/pdf\', \'image/png\', \'image/jpeg\']\n}: UploadZoneProps) {\n  const [isDragging, setIsDragging] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const validateFile = (file: File): boolean => {\n    // Check file type\n    if (!acceptedTypes.includes(file.type)) {\n      setError(`File type ${file.type} is not supported. Please upload PDF or image files.`);\n      return false;\n    }\n\n    // Check file size\n    const fileSizeMB = file.size / (1024 * 1024);\n    if (fileSizeMB > maxSize) {\n      setError(`File size exceeds ${maxSize}MB limit. Please upload a smaller file.`);\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleFiles = useCallback((files: FileList | null) => {\n    if (!files || files.length === 0) return;\n\n    setError(null);\n    const validFiles: File[] = [];\n\n    for (let i = 0; i < files.length; i++) {\n      const file = files[i];\n      if (validateFile(file)) {\n        validFiles.push(file);\n      }\n    }\n\n    if (validFiles.length > 0) {\n      onUpload(validFiles);\n    }\n  }, [onUpload, maxSize, acceptedTypes]);\n\n  const handleDrop = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n    handleFiles(e.dataTransfer.files);\n  }, [handleFiles]);\n\n  const handleDragOver = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n  }, []);\n\n  const handleDragLeave = useCallback((e: React.DragEvent) => {\n    e.preventDefault();\n    setIsDragging(false);\n  }, []);\n\n  const handleFileInput = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    handleFiles(e.target.files);\n  }, [handleFiles]);\n\n  return (\n    <Card className={`transition-all ${isDragging ? \'border-primary border-2\' : \'\'}`}>\n      <CardContent className="p-8">\n        <div\n          onDrop={handleDrop}\n          onDragOver={handleDragOver}\n          onDragLeave={handleDragLeave}\n          className={`\n            border-2 border-dashed rounded-lg p-12 text-center\n            transition-colors cursor-pointer\n            ${isDragging ? \'border-primary bg-primary/5\' : \'border-gray-300 hover:border-primary/50\'}\n          `}\n        >\n          <input\n            type="file"\n            id="file-upload"\n            className="hidden"\n            multiple\n            accept={acceptedTypes.join(\',\')}\n            onChange={handleFileInput}\n          />\n          \n          <label htmlFor="file-upload" className="cursor-pointer">\n            <div className="flex flex-col items-center gap-4">\n              <div className="p-4 bg-primary/10 rounded-full">\n                <Upload className="w-8 h-8 text-primary" />\n              </div>\n              \n              <div>\n                <p className="text-lg font-semibold mb-2">\n                  Drop your medical documents here\n                </p>\n                <p className="text-sm text-gray-500 mb-4">\n                  or click to browse files\n                </p>\n                <Button type="button" variant="outline">\n                  <FileText className="w-4 h-4 mr-2" />\n                  Select Files\n                </Button>\n              </div>\n              \n              <div className="text-xs text-gray-400 mt-4">\n                <p>Supported formats: PDF, PNG, JPEG</p>\n                <p>Maximum file size: {maxSize}MB</p>\n              </div>\n            </div>\n          </label>\n        </div>\n\n        {error && (\n          <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-lg flex items-start gap-3">\n            <AlertCircle className="w-5 h-5 text-red-500 flex-shrink-0 mt-0.5" />\n            <p className="text-sm text-red-700">{error}</p>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n</create-file>\n</function_calls>'}