{'role': 'assistant', 'content': 'Now let\'s create the Provider Manager to handle switching between providers:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/lib/providers/ProviderManager.ts">\n/**\n * AI Provider Manager\n * \n * Manages multiple AI providers and handles switching between them.\n * Provides a unified interface for all AI operations.\n */\n\nimport {\n  IAIProvider,\n  AIProvider,\n  AIModel,\n  AIProviderConfig,\n  AICompletionRequest,\n  AICompletionResponse,\n  AIStreamChunk\n} from \'@/lib/types/ai-provider\';\nimport { OpenAIProvider } from \'./OpenAIProvider\';\nimport { ClaudeProvider } from \'./ClaudeProvider\';\n\nexport class ProviderManager {\n  private providers: Map<string, IAIProvider> = new Map();\n  private activeProvider: string | null = null;\n\n  /**\n   * Register a new provider\n   */\n  registerProvider(name: string, config: AIProviderConfig): void {\n    let provider: IAIProvider;\n\n    switch (config.provider) {\n      case AIProvider.OPENAI:\n        provider = new OpenAIProvider(config);\n        break;\n      case AIProvider.CLAUDE:\n        provider = new ClaudeProvider(config);\n        break;\n      default:\n        throw new Error(`Unsupported provider: ${config.provider}`);\n    }\n\n    this.providers.set(name, provider);\n    \n    // Set as active if it\'s the first provider\n    if (!this.activeProvider) {\n      this.activeProvider = name;\n    }\n  }\n\n  /**\n   * Switch to a different provider\n   */\n  switchProvider(name: string): void {\n    if (!this.providers.has(name)) {\n      throw new Error(`Provider not found: ${name}`);\n    }\n    this.activeProvider = name;\n  }\n\n  /**\n   * Get the active provider\n   */\n  getActiveProvider(): IAIProvider {\n    if (!this.activeProvider) {\n      throw new Error(\'No active provider set\');\n    }\n\n    const provider = this.providers.get(this.activeProvider);\n    if (!provider) {\n      throw new Error(`Active provider not found: ${this.activeProvider}`);\n    }\n\n    return provider;\n  }\n\n  /**\n   * Get a specific provider by name\n   */\n  getProvider(name: string): IAIProvider | undefined {\n    return this.providers.get(name);\n  }\n\n  /**\n   * Get all registered providers\n   */\n  getAllProviders(): Map<string, IAIProvider> {\n    return new Map(this.providers);\n  }\n\n  /**\n   * Get active provider name\n   */\n  getActiveProviderName(): string | null {\n    return this.activeProvider;\n  }\n\n  /**\n   * Remove a provider\n   */\n  removeProvider(name: string): void {\n    this.providers.delete(name);\n    \n    // If we removed the active provider, switch to another one\n    if (this.activeProvider === name) {\n      const firstProvider = this.providers.keys().next().value;\n      this.activeProvider = firstProvider || null;\n    }\n  }\n\n  /**\n   * Complete using active provider\n   */\n  async complete(request: AICompletionRequest): Promise<AICompletionResponse> {\n    const provider = this.getActiveProvider();\n    return provider.complete(request);\n  }\n\n  /**\n   * Stream using active provider\n   */\n  async *stream(request: AICompletionRequest): AsyncGenerator<AIStreamChunk> {\n    const provider = this.getActiveProvider();\n    yield* provider.stream(request);\n  }\n\n  /**\n   * Complete using a specific provider\n   */\n  async completeWith(\n    providerName: string,\n    request: AICompletionRequest\n  ): Promise<AICompletionResponse> {\n    const provider = this.getProvider(providerName);\n    if (!provider) {\n      throw new Error(`Provider not found: ${providerName}`);\n    }\n    return provider.complete(request);\n  }\n\n  /**\n   * Stream using a specific provider\n   */\n  async *streamWith(\n    providerName: string,\n    request: AICompletionRequest\n  ): AsyncGenerator<AIStreamChunk> {\n    const provider = this.getProvider(providerName);\n    if (!provider) {\n      throw new Error(`Provider not found: ${providerName}`);\n    }\n    yield* provider.stream(request);\n  }\n\n  /**\n   * Count tokens using active provider\n   */\n  countTokens(text: string): number {\n    const provider = this.getActiveProvider();\n    return provider.countTokens(text);\n  }\n\n  /**\n   * Calculate cost using active provider\n   */\n  calculateCost(promptTokens: number, completionTokens: number): number {\n    const provider = this.getActiveProvider();\n    return provider.calculateCost(promptTokens, completionTokens);\n  }\n\n  /**\n   * Validate API key for active provider\n   */\n  async validateApiKey(): Promise<boolean> {\n    const provider = this.getActiveProvider();\n    return provider.validateApiKey();\n  }\n\n  /**\n   * Get provider info\n   */\n  getProviderInfo(name?: string): {\n    name: string;\n    provider: AIProvider;\n    model: AIModel;\n    capabilities: any;\n    costs: any;\n  } | null {\n    const providerName = name || this.activeProvider;\n    if (!providerName) return null;\n\n    const provider = this.providers.get(providerName);\n    if (!provider) return null;\n\n    return {\n      name: providerName,\n      provider: provider.provider,\n      model: provider.model,\n      capabilities: provider.capabilities,\n      costs: provider.costs\n    };\n  }\n\n  /**\n   * List all registered providers with info\n   */\n  listProviders(): Array<{\n    name: string;\n    provider: AIProvider;\n    model: AIModel;\n    isActive: boolean;\n  }> {\n    const result: Array<{\n      name: string;\n      provider: AIProvider;\n      model: AIModel;\n      isActive: boolean;\n    }> = [];\n\n    for (const [name, provider] of this.providers) {\n      result.push({\n        name,\n        provider: provider.provider,\n        model: provider.model,\n        isActive: name === this.activeProvider\n      });\n    }\n\n    return result;\n  }\n\n  /**\n   * Update provider configuration\n   */\n  updateProviderConfig(\n    name: string,\n    config: Partial<AIProviderConfig>\n  ): void {\n    const provider = this.getProvider(name);\n    if (!provider) {\n      throw new Error(`Provider not found: ${name}`);\n    }\n    provider.updateConfig(config);\n  }\n\n  /**\n   * Get provider configuration\n   */\n  getProviderConfig(name?: string): AIProviderConfig | null {\n    const providerName = name || this.activeProvider;\n    if (!providerName) return null;\n\n    const provider = this.providers.get(providerName);\n    if (!provider) return null;\n\n    return provider.getConfig();\n  }\n}\n\n// Singleton instance\nlet providerManagerInstance: ProviderManager | null = null;\n\n/**\n * Get the singleton ProviderManager instance\n */\nexport function getProviderManager(): ProviderManager {\n  if (!providerManagerInstance) {\n    providerManagerInstance = new ProviderManager();\n  }\n  return providerManagerInstance;\n}\n\n/**\n * Initialize providers from environment variables\n */\nexport function initializeProvidersFromEnv(): ProviderManager {\n  const manager = getProviderManager();\n\n  // Initialize OpenAI if API key is present\n  if (process.env.OPENAI_API_KEY) {\n    manager.registerProvider(\'openai-gpt4\', {\n      provider: AIProvider.OPENAI,\n      apiKey: process.env.OPENAI_API_KEY,\n      model: AIModel.GPT_4_TURBO,\n      maxTokens: 4096,\n      temperature: 0.7\n    });\n\n    manager.registerProvider(\'openai-gpt35\', {\n      provider: AIProvider.OPENAI,\n      apiKey: process.env.OPENAI_API_KEY,\n      model: AIModel.GPT_35_TURBO,\n      maxTokens: 4096,\n      temperature: 0.7\n    });\n  }\n\n  // Initialize Claude if API key is present\n  if (process.env.ANTHROPIC_API_KEY) {\n    manager.registerProvider(\'claude-opus\', {\n      provider: AIProvider.CLAUDE,\n      apiKey: process.env.ANTHROPIC_API_KEY,\n      model: AIModel.CLAUDE_3_OPUS,\n      maxTokens: 4096,\n      temperature: 0.7\n    });\n\n    manager.registerProvider(\'claude-sonnet\', {\n      provider: AIProvider.CLAUDE,\n      apiKey: process.env.ANTHROPIC_API_KEY,\n      model: AIModel.CLAUDE_35_SONNET,\n      maxTokens: 4096,\n      temperature: 0.7\n    });\n\n    manager.registerProvider(\'claude-haiku\', {\n      provider: AIProvider.CLAUDE,\n      apiKey: process.env.ANTHROPIC_API_KEY,\n      model: AIModel.CLAUDE_3_HAIKU,\n      maxTokens: 4096,\n      temperature: 0.7\n    });\n  }\n\n  return manager;\n}\n</create-file>\n</function_calls>'}