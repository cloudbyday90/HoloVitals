{'role': 'assistant', 'content': 'Now I\'ll update the todo.md to add Phase 2 Epic-specific features:\n\n<function_calls>\n<full-file-rewrite file_path="todo.md">\n# HoloVitals EHR Integration System - Fasten-OnPrem Style\n\n**Goal**: Build a medical data retrieval system that connects to Epic and other EHR platforms using FHIR APIs to automatically pull patient medical records, including PDFs and clinical documents.\n\n**Status**: 20% Complete  \n**Estimated Time**: 3-4 weeks\n\n---\n\n## Phase 1: FHIR Foundation & Architecture (Week 1) âœ… COMPLETE\n\n### 1.1 FHIR Client Infrastructure âœ…\n- [x] Create base FHIR client with R4 support\n- [x] Implement SMART on FHIR authentication flow\n- [x] Create OAuth2 token management service\n- [x] Build FHIR resource parser and validator\n- [x] Implement error handling and retry logic\n\n### 1.2 Database Schema for EHR Data âœ…\n- [x] Create EHRConnection model (provider, credentials, status)\n- [x] Create FHIRResource model (raw FHIR data storage)\n- [x] Create SyncHistory model (sync logs and status)\n- [x] Create ProviderConfiguration model\n- [x] Add indexes for performance\n\n### 1.3 Provider Registry âœ…\n- [x] Create provider configuration system\n- [x] Add Epic FHIR endpoint configurations\n- [x] Add Cerner/Oracle Health configurations\n- [x] Add support for 100+ healthcare systems\n- [x] Implement provider discovery service\n\n---\n\n## Phase 2: Epic-Specific Features (Current) ðŸ”„ IN PROGRESS\n\n### 2.1 Epic-Specific Resource Types [ ]\n- [ ] Implement DiagnosticReport support (lab results, imaging reports)\n- [ ] Implement CarePlan support (treatment plans, care coordination)\n- [ ] Implement Encounter support (visits, appointments, hospitalizations)\n- [ ] Implement Goal support (patient health goals)\n- [ ] Implement ServiceRequest support (orders, referrals)\n- [ ] Add Epic-specific extensions handling\n\n### 2.2 Epic Bulk Data Export [ ]\n- [ ] Implement FHIR Bulk Data Export ($export operation)\n- [ ] Support Group-level export (all patients in a group)\n- [ ] Support Patient-level export (single patient)\n- [ ] Handle NDJSON format parsing\n- [ ] Implement polling for export completion\n- [ ] Download and process export files\n\n### 2.3 Epic App Orchard Integration [ ]\n- [ ] Research Epic App Orchard requirements\n- [ ] Document production app registration process\n- [ ] Create Epic-specific configuration guide\n- [ ] Add Epic App Orchard metadata\n\n### 2.4 Epic-Specific Optimizations [ ]\n- [ ] Implement Epic\'s preferred search parameters\n- [ ] Add Epic-specific rate limiting (10 requests/second)\n- [ ] Optimize pagination for Epic\'s response sizes\n- [ ] Handle Epic-specific error codes\n- [ ] Implement Epic\'s recommended retry logic\n\n### 2.5 Enhanced Data Extraction [ ]\n- [ ] Extract clinical notes from DiagnosticReport\n- [ ] Parse lab results with reference ranges\n- [ ] Extract imaging study metadata\n- [ ] Process care plan activities and goals\n- [ ] Extract encounter diagnoses and procedures\n\n### 2.6 Epic Service Extensions [ ]\n- [ ] Create EpicEnhancedService extending EHRSyncService\n- [ ] Add bulk export methods\n- [ ] Add enhanced resource fetching\n- [ ] Add Epic-specific data transformations\n\n### 2.7 API Endpoints [ ]\n- [ ] POST /api/ehr/epic/bulk-export - Initiate bulk export\n- [ ] GET /api/ehr/epic/bulk-export/:id - Check export status\n- [ ] POST /api/ehr/epic/enhanced-sync - Enhanced sync with all resources\n- [ ] GET /api/ehr/epic/capabilities - Get Epic-specific capabilities\n\n### 2.8 Database Schema Updates [ ]\n- [ ] Add bulk_export_jobs table\n- [ ] Add epic_specific_data table for extensions\n- [ ] Update fhir_resources table with Epic-specific fields\n- [ ] Add indexes for Epic-specific queries\n\n---\n\n## Phase 3: Data Synchronization Engine (Week 2-3)\n\n### 3.1 Sync Service\n- [ ] Create background sync scheduler\n- [ ] Implement incremental sync (only new/updated data)\n- [ ] Add full sync capability\n- [ ] Implement sync conflict resolution\n- [ ] Add sync progress tracking\n\n### 3.2 Data Transformation\n- [ ] Transform FHIR resources to HoloVitals format\n- [ ] Map FHIR codes to standard terminologies\n- [ ] Extract structured data from documents\n- [ ] Implement data deduplication\n- [ ] Add data quality validation\n\n### 3.3 Cost Management Integration\n- [ ] Estimate tokens for imported documents\n- [ ] Apply free upload limits\n- [ ] Integrate with token deduction system\n- [ ] Track import costs per provider\n- [ ] Generate cost reports\n\n---\n\n## Phase 4: Multi-Provider Support (Week 3) âœ… COMPLETE\n\n### 4.1 Additional EHR Connectors âœ…\n- [x] Cerner/Oracle Health connector\n- [x] Allscripts connector\n- [x] athenahealth connector\n- [x] eClinicalWorks connector\n- [x] NextGen connector\n\n### 4.2 Connector Framework âœ…\n- [x] Create abstract EHR connector interface\n- [x] Implement connector factory pattern\n- [x] Add provider registry with configurations\n- [x] Create provider discovery service\n- [x] Create connector documentation\n\n---\n\n## Phase 5: API Endpoints (Week 3-4)\n\n### 5.1 Connection Management APIs\n- [ ] POST /api/ehr/connect - Initiate EHR connection\n- [ ] GET /api/ehr/connections - List user\'s connections\n- [ ] DELETE /api/ehr/connections/:id - Remove connection\n- [ ] POST /api/ehr/authorize - Complete OAuth flow\n- [ ] GET /api/ehr/providers - List available providers\n\n### 5.2 Sync Management APIs\n- [ ] POST /api/ehr/sync - Trigger manual sync\n- [ ] GET /api/ehr/sync/status - Get sync status\n- [ ] GET /api/ehr/sync/history - Get sync history\n- [ ] POST /api/ehr/sync/cancel - Cancel ongoing sync\n\n### 5.3 Data Retrieval APIs\n- [ ] GET /api/ehr/documents - List imported documents\n- [ ] GET /api/ehr/resources - List FHIR resources\n- [ ] GET /api/ehr/timeline - Get patient timeline\n- [ ] GET /api/ehr/summary - Get health summary\n\n---\n\n## Phase 6: UI Components (Week 4)\n\n### 6.1 Provider Connection UI\n- [ ] Provider selection page\n- [ ] OAuth authorization flow UI\n- [ ] Connection status dashboard\n- [ ] Connection management interface\n\n### 6.2 Data Sync UI\n- [ ] Sync progress indicator\n- [ ] Sync history timeline\n- [ ] Manual sync trigger button\n- [ ] Sync settings configuration\n\n### 6.3 Imported Data UI\n- [ ] Document viewer for imported PDFs\n- [ ] Health timeline visualization\n- [ ] Lab results display\n- [ ] Medication list view\n- [ ] Allergy and condition lists\n\n---\n\n## Phase 7: Security & Compliance (Week 4)\n\n### 7.1 Security Measures\n- [ ] Encrypt OAuth tokens at rest\n- [ ] Implement token rotation\n- [ ] Add connection timeout policies\n- [ ] Implement rate limiting\n- [ ] Add IP whitelisting for callbacks\n\n### 7.2 HIPAA Compliance\n- [ ] Audit all EHR data access\n- [ ] Implement data retention policies\n- [ ] Add patient consent tracking\n- [ ] Create BAA documentation\n- [ ] Implement data breach notification\n\n### 7.3 Testing & Validation\n- [ ] Unit tests for all services\n- [ ] Integration tests with Epic sandbox\n- [ ] End-to-end workflow tests\n- [ ] Security penetration testing\n- [ ] Load testing for sync operations\n\n---\n\n## Phase 8: Documentation & Deployment\n\n### 8.1 Documentation\n- [ ] EHR integration guide\n- [ ] Provider setup instructions\n- [ ] API documentation\n- [ ] Troubleshooting guide\n- [ ] Security best practices\n\n### 8.2 Deployment\n- [ ] Configure production OAuth apps\n- [ ] Set up webhook endpoints\n- [ ] Configure background job workers\n- [ ] Deploy to production\n- [ ] Monitor and optimize\n\n---\n\n## Success Criteria for Phase 2 (Epic-Specific)\n- [ ] All Epic-specific resource types supported\n- [ ] Bulk export fully functional\n- [ ] Enhanced data extraction working\n- [ ] All tests passing\n- [ ] Complete documentation\n- [ ] Production-ready code\n\n## Estimated Time for Phase 2: 2-3 days\n</full-file-rewrite>\n</function_calls>'}