{'role': 'assistant', 'content': '<function_calls>\n<str-replace file_path="medical-analysis-platform/prisma/schema.prisma">\n<old_str>model DocumentEmbedding {\n  id            String    @id @default(uuid())\n  documentId    String    @map("document_id")\n  chunkIndex    Int       @map("chunk_index")\n  chunkText     String    @map("chunk_text") @db.Text\n  embedding     Float[]   // Store as array of floats\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("document_embeddings")\n}</old_str>\n<new_str>model DocumentEmbedding {\n  id            String    @id @default(uuid())\n  documentId    String    @map("document_id")\n  chunkIndex    Int       @map("chunk_index")\n  chunkText     String    @map("chunk_text") @db.Text\n  embedding     Float[]   // Store as array of floats\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("document_embeddings")\n}\n\n// User Sessions for authentication\nmodel UserSession {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  expiresAt     DateTime  @map("expires_at")\n  ipAddress     String?   @map("ip_address")\n  userAgent     String?   @map("user_agent")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  @@map("user_sessions")\n  @@index([userId])\n  @@index([expiresAt])\n}\n\n// Consent Management\nmodel ConsentGrant {\n  id                      String    @id @default(uuid())\n  patientId               String    @map("patient_id")\n  specialistId            String    @map("specialist_id")\n  permissions             String    @db.Text // JSON array of permissions\n  reason                  String    @db.Text\n  requestedDuration       Int       @map("requested_duration") // in hours\n  urgency                 String    // \'routine\', \'urgent\', \'emergency\'\n  status                  String    // \'pending\', \'approved\', \'active\', \'expired\', \'revoked\', \'denied\'\n  restrictions            String?   @db.Text // JSON array of restrictions\n  grantedAt               DateTime? @map("granted_at")\n  expiresAt               DateTime  @map("expires_at")\n  revokedAt               DateTime? @map("revoked_at")\n  revocationReason        String?   @map("revocation_reason") @db.Text\n  denialReason            String?   @map("denial_reason") @db.Text\n  lastAccessed            DateTime? @map("last_accessed")\n  accessCount             Int       @default(0) @map("access_count")\n  expirationWarningSent   Boolean   @default(false) @map("expiration_warning_sent")\n  createdAt               DateTime  @default(now()) @map("created_at")\n  updatedAt               DateTime  @updatedAt @map("updated_at")\n  \n  patient                 User      @relation("PatientConsents", fields: [patientId], references: [id], onDelete: Cascade)\n  specialist              User      @relation("SpecialistConsents", fields: [specialistId], references: [id], onDelete: Cascade)\n  accessLogs              AccessLog[]\n  \n  @@map("consent_grants")\n  @@index([patientId])\n  @@index([specialistId])\n  @@index([status])\n  @@index([expiresAt])\n}\n\n// Access Logs for consent-based access\nmodel AccessLog {\n  id            String    @id @default(uuid())\n  consentId     String    @map("consent_id")\n  specialistId  String    @map("specialist_id")\n  action        String\n  resource      String\n  ipAddress     String?   @map("ip_address")\n  userAgent     String?   @map("user_agent")\n  details       String?   @db.Text // JSON\n  timestamp     DateTime  @default(now())\n  success       Boolean   @default(true)\n  \n  consent       ConsentGrant @relation(fields: [consentId], references: [id], onDelete: Cascade)\n  \n  @@map("access_logs")\n  @@index([consentId])\n  @@index([specialistId])\n  @@index([timestamp])\n}\n\n// Audit Logs for HIPAA compliance\nmodel AuditLog {\n  id              String    @id @default(uuid())\n  userId          String    @map("user_id")\n  action          String\n  resource        String\n  resourceId      String    @map("resource_id")\n  details         String?   @db.Text // JSON\n  ipAddress       String?   @map("ip_address")\n  userAgent       String?   @map("user_agent")\n  sessionId       String?   @map("session_id")\n  severity        String    // \'low\', \'medium\', \'high\', \'critical\'\n  requiresReview  Boolean   @default(false) @map("requires_review")\n  reviewed        Boolean   @default(false)\n  reviewedBy      String?   @map("reviewed_by")\n  reviewedAt      DateTime? @map("reviewed_at")\n  reviewNotes     String?   @map("review_notes") @db.Text\n  consentId       String?   @map("consent_id")\n  timestamp       DateTime  @default(now())\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  @@map("audit_logs")\n  @@index([userId])\n  @@index([action])\n  @@index([resource])\n  @@index([timestamp])\n  @@index([severity])\n  @@index([requiresReview])\n}\n\n// Notifications for patients\nmodel Notification {\n  id              String    @id @default(uuid())\n  patientId       String    @map("patient_id")\n  type            String    // \'request\', \'expiring\', \'expired\', \'accessed\'\n  message         String    @db.Text\n  requiresAction  Boolean   @default(false) @map("requires_action")\n  read            Boolean   @default(false)\n  readAt          DateTime? @map("read_at")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  @@map("notifications")\n  @@index([patientId])\n  @@index([read])\n  @@index([createdAt])\n}\n\n// Security Alerts\nmodel SecurityAlert {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  action        String\n  details       String    @db.Text // JSON\n  severity      String    @default("high")\n  acknowledged  Boolean   @default(false)\n  acknowledgedBy String?  @map("acknowledged_by")\n  acknowledgedAt DateTime? @map("acknowledged_at")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  @@map("security_alerts")\n  @@index([userId])\n  @@index([acknowledged])\n  @@index([createdAt])\n}</new_str>\n</str-replace>\n</function_calls>'}