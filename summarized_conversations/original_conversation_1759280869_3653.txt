{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="middleware.ts">\n/**\n * Next.js Middleware\n * Global middleware for route protection and access control\n */\n\nimport { NextResponse } from \'next/server\';\nimport type { NextRequest } from \'next/server\';\nimport { getToken } from \'next-auth/jwt\';\n\n// ============================================================================\n// PROTECTED ROUTES CONFIGURATION\n// ============================================================================\n\nconst PROTECTED_ROUTES = {\n  // Financial routes (OWNER only)\n  OWNER_ONLY: [\n    \'/dashboard/costs\',\n    \'/dashboard/financials\',\n    \'/api/costs\',\n    \'/api/financials\',\n  ],\n  \n  // Administrative routes (OWNER/ADMIN)\n  ADMIN_ONLY: [\n    \'/dashboard/admin\',\n    \'/dashboard/users\',\n    \'/api/admin\',\n  ],\n  \n  // Instance management (OWNER/ADMIN)\n  INSTANCE_MANAGEMENT: [\n    \'/dashboard/instances\',\n    \'/api/instances\',\n  ],\n  \n  // Queue management (OWNER/ADMIN)\n  QUEUE_MANAGEMENT: [\n    \'/dashboard/queue\',\n    \'/api/queue\',\n  ],\n  \n  // General authenticated routes\n  AUTHENTICATED: [\n    \'/dashboard\',\n    \'/api/documents\',\n    \'/api/chat\',\n  ],\n};\n\n// ============================================================================\n// MIDDLEWARE FUNCTION\n// ============================================================================\n\nexport async function middleware(request: NextRequest) {\n  const { pathname } = request.nextUrl;\n\n  // Skip middleware for public routes\n  if (isPublicRoute(pathname)) {\n    return NextResponse.next();\n  }\n\n  // Get user session\n  const token = await getToken({\n    req: request,\n    secret: process.env.NEXTAUTH_SECRET,\n  });\n\n  // Check if user is authenticated\n  if (!token) {\n    // Redirect to login for dashboard routes\n    if (pathname.startsWith(\'/dashboard\')) {\n      const url = new URL(\'/auth/signin\', request.url);\n      url.searchParams.set(\'callbackUrl\', pathname);\n      return NextResponse.redirect(url);\n    }\n    \n    // Return 401 for API routes\n    if (pathname.startsWith(\'/api\')) {\n      return NextResponse.json(\n        { error: \'Unauthorized - Authentication required\' },\n        { status: 401 }\n      );\n    }\n  }\n\n  const userRole = token?.role as string;\n\n  // Check OWNER-only routes\n  if (isOwnerOnlyRoute(pathname)) {\n    if (userRole !== \'OWNER\') {\n      return handleUnauthorizedAccess(request, pathname, \'OWNER\', userRole);\n    }\n  }\n\n  // Check ADMIN-only routes\n  if (isAdminOnlyRoute(pathname)) {\n    if (userRole !== \'OWNER\' && userRole !== \'ADMIN\') {\n      return handleUnauthorizedAccess(request, pathname, \'ADMIN\', userRole);\n    }\n  }\n\n  // Check instance management routes\n  if (isInstanceManagementRoute(pathname)) {\n    if (userRole !== \'OWNER\' && userRole !== \'ADMIN\') {\n      return handleUnauthorizedAccess(request, pathname, \'ADMIN\', userRole);\n    }\n  }\n\n  // Check queue management routes\n  if (isQueueManagementRoute(pathname)) {\n    if (userRole !== \'OWNER\' && userRole !== \'ADMIN\') {\n      return handleUnauthorizedAccess(request, pathname, \'ADMIN\', userRole);\n    }\n  }\n\n  // Add user context to request headers\n  const requestHeaders = new Headers(request.headers);\n  requestHeaders.set(\'x-user-id\', token?.sub || \'\');\n  requestHeaders.set(\'x-user-role\', userRole || \'\');\n  requestHeaders.set(\'x-user-email\', token?.email || \'\');\n\n  return NextResponse.next({\n    request: {\n      headers: requestHeaders,\n    },\n  });\n}\n\n// ============================================================================\n// ROUTE CHECKING FUNCTIONS\n// ============================================================================\n\nfunction isPublicRoute(pathname: string): boolean {\n  const publicRoutes = [\n    \'/\',\n    \'/auth/signin\',\n    \'/auth/signup\',\n    \'/auth/forgot-password\',\n    \'/auth/reset-password\',\n    \'/api/auth\',\n    \'/_next\',\n    \'/favicon.ico\',\n    \'/public\',\n  ];\n\n  return publicRoutes.some(route => pathname.startsWith(route));\n}\n\nfunction isOwnerOnlyRoute(pathname: string): boolean {\n  return PROTECTED_ROUTES.OWNER_ONLY.some(route => pathname.startsWith(route));\n}\n\nfunction isAdminOnlyRoute(pathname: string): boolean {\n  return PROTECTED_ROUTES.ADMIN_ONLY.some(route => pathname.startsWith(route));\n}\n\nfunction isInstanceManagementRoute(pathname: string): boolean {\n  return PROTECTED_ROUTES.INSTANCE_MANAGEMENT.some(route => pathname.startsWith(route));\n}\n\nfunction isQueueManagementRoute(pathname: string): boolean {\n  return PROTECTED_ROUTES.QUEUE_MANAGEMENT.some(route => pathname.startsWith(route));\n}\n\n// ============================================================================\n// UNAUTHORIZED ACCESS HANDLER\n// ============================================================================\n\nfunction handleUnauthorizedAccess(\n  request: NextRequest,\n  pathname: string,\n  requiredRole: string,\n  userRole: string\n): NextResponse {\n  // For dashboard routes, redirect to access denied page\n  if (pathname.startsWith(\'/dashboard\')) {\n    const url = new URL(\'/dashboard/access-denied\', request.url);\n    url.searchParams.set(\'required\', requiredRole);\n    url.searchParams.set(\'current\', userRole);\n    url.searchParams.set(\'path\', pathname);\n    return NextResponse.redirect(url);\n  }\n\n  // For API routes, return 403 Forbidden\n  if (pathname.startsWith(\'/api\')) {\n    return NextResponse.json(\n      {\n        error: \'Forbidden - Insufficient permissions\',\n        required: requiredRole,\n        current: userRole,\n        message: `This endpoint requires ${requiredRole} role. Your current role is ${userRole}.`,\n      },\n      { status: 403 }\n    );\n  }\n\n  // Default: redirect to home\n  return NextResponse.redirect(new URL(\'/\', request.url));\n}\n\n// ============================================================================\n// MIDDLEWARE CONFIGURATION\n// ============================================================================\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - public folder\n     */\n    \'/((?!_next/static|_next/image|favicon.ico|public).*)\',\n  ],\n};\n</create-file>\n</function_calls>'}