{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/DEPLOYMENT.md">\n# Deployment Guide\n\nThis guide covers deploying the Medical Document Analysis Platform to production.\n\n## Prerequisites\n\n- Node.js 18+ installed\n- PostgreSQL database (local or cloud)\n- OpenAI API key\n- Domain name (optional)\n\n## Environment Setup\n\n1. Create a `.env` file in the project root:\n\n```env\n# Database\nDATABASE_URL="postgresql://user:password@host:5432/database?schema=public"\n\n# OpenAI API\nOPENAI_API_KEY="sk-your-openai-api-key"\n\n# Application\nNODE_ENV="production"\nNEXT_PUBLIC_APP_URL="https://yourdomain.com"\n\n# Security\nJWT_SECRET="your-secure-random-string"\n\n# File Upload\nMAX_FILE_SIZE_MB=10\nUPLOAD_DIR="./uploads"\n```\n\n## Database Setup\n\n1. Set up PostgreSQL database (if not already done)\n2. Run Prisma migrations:\n\n```bash\nnpx prisma generate\nnpx prisma db push\n```\n\n3. (Optional) Seed the database:\n\n```bash\nnpx prisma db seed\n```\n\n## Deployment Options\n\n### Option 1: Vercel (Recommended for Frontend)\n\n1. Install Vercel CLI:\n```bash\nnpm i -g vercel\n```\n\n2. Login to Vercel:\n```bash\nvercel login\n```\n\n3. Deploy:\n```bash\nvercel --prod\n```\n\n4. Set environment variables in Vercel dashboard:\n   - Go to Project Settings â†’ Environment Variables\n   - Add all variables from `.env`\n\n**Note**: For file uploads, you\'ll need to configure external storage (S3, Cloudinary, etc.) as Vercel has ephemeral filesystem.\n\n### Option 2: Railway\n\n1. Install Railway CLI:\n```bash\nnpm i -g @railway/cli\n```\n\n2. Login:\n```bash\nrailway login\n```\n\n3. Initialize project:\n```bash\nrailway init\n```\n\n4. Add PostgreSQL:\n```bash\nrailway add postgresql\n```\n\n5. Deploy:\n```bash\nrailway up\n```\n\n6. Set environment variables:\n```bash\nrailway variables set OPENAI_API_KEY=your-key\n```\n\n### Option 3: Docker + VPS\n\n1. Create `Dockerfile`:\n\n```dockerfile\nFROM node:18-alpine AS base\n\n# Install dependencies only when needed\nFROM base AS deps\nRUN apk add --no-cache libc6-compat\nWORKDIR /app\n\nCOPY package*.json ./\nRUN npm ci\n\n# Rebuild the source code only when needed\nFROM base AS builder\nWORKDIR /app\nCOPY --from=deps /app/node_modules ./node_modules\nCOPY . .\n\nRUN npx prisma generate\nRUN npm run build\n\n# Production image\nFROM base AS runner\nWORKDIR /app\n\nENV NODE_ENV production\n\nRUN addgroup --system --gid 1001 nodejs\nRUN adduser --system --uid 1001 nextjs\n\nCOPY --from=builder /app/public ./public\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./\nCOPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static\n\nUSER nextjs\n\nEXPOSE 3000\n\nENV PORT 3000\n\nCMD ["node", "server.js"]\n```\n\n2. Create `docker-compose.yml`:\n\n```yaml\nversion: \'3.8\'\n\nservices:\n  app:\n    build: .\n    ports:\n      - "3000:3000"\n    environment:\n      - DATABASE_URL=postgresql://postgres:password@db:5432/medical_analysis\n      - OPENAI_API_KEY=${OPENAI_API_KEY}\n      - NODE_ENV=production\n    depends_on:\n      - db\n    volumes:\n      - ./uploads:/app/uploads\n\n  db:\n    image: postgres:15-alpine\n    environment:\n      - POSTGRES_USER=postgres\n      - POSTGRES_PASSWORD=password\n      - POSTGRES_DB=medical_analysis\n    volumes:\n      - postgres_data:/var/lib/postgresql/data\n    ports:\n      - "5432:5432"\n\nvolumes:\n  postgres_data:\n```\n\n3. Build and run:\n```bash\ndocker-compose up -d\n```\n\n### Option 4: Traditional VPS (Ubuntu)\n\n1. SSH into your server:\n```bash\nssh user@your-server-ip\n```\n\n2. Install Node.js:\n```bash\ncurl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -\nsudo apt-get install -y nodejs\n```\n\n3. Install PostgreSQL:\n```bash\nsudo apt-get install postgresql postgresql-contrib\n```\n\n4. Clone and setup:\n```bash\ngit clone <your-repo>\ncd medical-analysis-platform\nnpm install\nnpx prisma generate\nnpx prisma db push\nnpm run build\n```\n\n5. Install PM2:\n```bash\nsudo npm install -g pm2\n```\n\n6. Start application:\n```bash\npm2 start npm --name "medical-app" -- start\npm2 save\npm2 startup\n```\n\n7. Setup Nginx reverse proxy:\n```bash\nsudo apt-get install nginx\n```\n\nCreate `/etc/nginx/sites-available/medical-app`:\n```nginx\nserver {\n    listen 80;\n    server_name yourdomain.com;\n\n    location / {\n        proxy_pass http://localhost:3000;\n        proxy_http_version 1.1;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \'upgrade\';\n        proxy_set_header Host $host;\n        proxy_cache_bypass $http_upgrade;\n    }\n}\n```\n\nEnable site:\n```bash\nsudo ln -s /etc/nginx/sites-available/medical-app /etc/nginx/sites-enabled/\nsudo nginx -t\nsudo systemctl restart nginx\n```\n\n8. Setup SSL with Let\'s Encrypt:\n```bash\nsudo apt-get install certbot python3-certbot-nginx\nsudo certbot --nginx -d yourdomain.com\n```\n\n## Post-Deployment\n\n### 1. Verify Deployment\n\n- Check application is running: `curl http://localhost:3000`\n- Test database connection\n- Verify file uploads work\n- Test OCR processing\n- Test AI analysis\n\n### 2. Monitoring\n\nSet up monitoring with:\n- Application logs\n- Database performance\n- API response times\n- Error tracking (Sentry, LogRocket)\n\n### 3. Backups\n\nSet up automated backups for:\n- Database (daily)\n- Uploaded files (daily)\n- Configuration files\n\nExample PostgreSQL backup script:\n```bash\n#!/bin/bash\nDATE=$(date +%Y%m%d_%H%M%S)\npg_dump -U postgres medical_analysis > backup_$DATE.sql\n```\n\n### 4. Security Checklist\n\n- [ ] HTTPS enabled\n- [ ] Environment variables secured\n- [ ] Database credentials rotated\n- [ ] File upload validation enabled\n- [ ] Rate limiting configured\n- [ ] CORS properly configured\n- [ ] Security headers set\n- [ ] Regular security updates\n\n## Scaling Considerations\n\n### Horizontal Scaling\n- Use load balancer (Nginx, HAProxy)\n- Deploy multiple app instances\n- Use Redis for session storage\n- Implement CDN for static assets\n\n### Database Scaling\n- Set up read replicas\n- Implement connection pooling\n- Use database caching (Redis)\n- Consider database sharding for large datasets\n\n### File Storage\n- Move to S3/CloudFlare R2/Backblaze B2\n- Implement CDN for file delivery\n- Set up automatic cleanup of old files\n\n## Troubleshooting\n\n### Application won\'t start\n- Check environment variables\n- Verify database connection\n- Check Node.js version\n- Review application logs\n\n### Database connection issues\n- Verify DATABASE_URL format\n- Check PostgreSQL is running\n- Verify network connectivity\n- Check firewall rules\n\n### File upload failures\n- Check upload directory permissions\n- Verify disk space\n- Check MAX_FILE_SIZE_MB setting\n- Review Nginx/server upload limits\n\n### OCR processing slow\n- Consider using cloud OCR services\n- Implement job queue (Bull, BullMQ)\n- Scale worker processes\n- Optimize image preprocessing\n\n## Maintenance\n\n### Regular Tasks\n- Monitor disk space\n- Review application logs\n- Update dependencies\n- Backup verification\n- Performance monitoring\n- Security patches\n\n### Monthly Tasks\n- Database optimization\n- Clean up old files\n- Review error logs\n- Update documentation\n- Security audit\n\n## Support\n\nFor deployment issues:\n1. Check application logs\n2. Review this documentation\n3. Check GitHub issues\n4. Contact development team\n\n## Additional Resources\n\n- [Next.js Deployment Documentation](https://nextjs.org/docs/deployment)\n- [Prisma Deployment Guide](https://www.prisma.io/docs/guides/deployment)\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\n- [Nginx Documentation](https://nginx.org/en/docs/)\n</create-file>\n</function_calls>'}