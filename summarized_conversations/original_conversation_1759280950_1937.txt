{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/admin/errors/export/route.ts">\n/**\n * Error Export API\n * OWNER/ADMIN only - Export error logs as CSV\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { requireAdmin } from \'@/lib/middleware/auth\';\nimport { prisma } from \'@/lib/prisma\';\n\nexport async function GET(req: NextRequest) {\n  // Protect endpoint - ADMIN or higher\n  const user = await requireAdmin(req);\n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  try {\n    const { searchParams } = new URL(req.url);\n    const range = searchParams.get(\'range\') || \'24h\';\n\n    // Convert range to hours\n    let hours = 24;\n    switch (range) {\n      case \'1h\':\n        hours = 1;\n        break;\n      case \'24h\':\n        hours = 24;\n        break;\n      case \'7d\':\n        hours = 24 * 7;\n        break;\n      case \'30d\':\n        hours = 24 * 30;\n        break;\n    }\n\n    const since = new Date(Date.now() - hours * 60 * 60 * 1000);\n\n    // Get error logs\n    const errors = await prisma.errorLog.findMany({\n      where: {\n        timestamp: { gte: since },\n      },\n      orderBy: { timestamp: \'desc\' },\n    });\n\n    // Convert to CSV\n    const headers = [\n      \'ID\',\n      \'Timestamp\',\n      \'Severity\',\n      \'Message\',\n      \'Code\',\n      \'Status Code\',\n      \'Endpoint\',\n      \'Method\',\n      \'User ID\',\n      \'IP Address\',\n    ];\n\n    const rows = errors.map(error => [\n      error.id,\n      error.timestamp.toISOString(),\n      error.severity,\n      `"${error.message.replace(/"/g, \'""\')}"`, // Escape quotes\n      error.code || \'\',\n      error.statusCode || \'\',\n      error.endpoint || \'\',\n      error.method || \'\',\n      error.userId || \'\',\n      error.ipAddress || \'\',\n    ]);\n\n    const csv = [\n      headers.join(\',\'),\n      ...rows.map(row => row.join(\',\')),\n    ].join(\'\\n\');\n\n    return new NextResponse(csv, {\n      headers: {\n        \'Content-Type\': \'text/csv\',\n        \'Content-Disposition\': `attachment; filename="error-logs-${new Date().toISOString()}.csv"`,\n      },\n    });\n  } catch (error) {\n    console.error(\'Failed to export error logs:\', error);\n    return NextResponse.json(\n      { error: \'Failed to export error logs\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}