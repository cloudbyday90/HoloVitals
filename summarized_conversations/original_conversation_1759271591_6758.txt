{'role': 'assistant', 'content': 'Now let me create the API endpoint for the Context Optimizer Service:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/context-optimizer/route.ts">\n/**\n * Context Optimizer API\n * \n * Endpoints for optimizing context to reduce token usage and costs.\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { contextOptimizer, OptimizationStrategy, ContentType } from \'@/lib/services/ContextOptimizerService\';\n\n/**\n * POST /api/context-optimizer\n * Optimize context content\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const {\n      content,\n      strategy,\n      contentType,\n      targetTokens,\n      preserveKeywords,\n      userId\n    } = body;\n\n    // Validate required fields\n    if (!content || typeof content !== \'string\') {\n      return NextResponse.json(\n        { error: \'Content is required and must be a string\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate strategy if provided\n    if (strategy && !Object.values(OptimizationStrategy).includes(strategy)) {\n      return NextResponse.json(\n        { error: \'Invalid optimization strategy\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate content type if provided\n    if (contentType && !Object.values(ContentType).includes(contentType)) {\n      return NextResponse.json(\n        { error: \'Invalid content type\' },\n        { status: 400 }\n      );\n    }\n\n    // Optimize content\n    const result = await contextOptimizer.optimize({\n      content,\n      strategy: strategy || OptimizationStrategy.BALANCED,\n      contentType: contentType || ContentType.GENERAL,\n      targetTokens,\n      preserveKeywords: preserveKeywords || [],\n      userId\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: result\n    });\n\n  } catch (error: any) {\n    console.error(\'Context optimization error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to optimize context\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/context-optimizer?userId=xxx\n * Get optimization statistics for a user\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get(\'userId\');\n\n    if (!userId) {\n      return NextResponse.json(\n        { error: \'userId is required\' },\n        { status: 400 }\n      );\n    }\n\n    const stats = await contextOptimizer.getOptimizationStats(userId);\n\n    return NextResponse.json({\n      success: true,\n      data: stats\n    });\n\n  } catch (error: any) {\n    console.error(\'Failed to get optimization stats:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to get optimization stats\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}