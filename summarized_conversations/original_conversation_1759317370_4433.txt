{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/ehr/cerner/enhanced-sync/route.ts">\n/**\n * Cerner Enhanced Sync API\n * POST /api/ehr/cerner/enhanced-sync - Perform enhanced sync with all Cerner-specific resources\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { getServerSession } from \'next-auth\';\nimport { authOptions } from \'@/lib/auth\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { FHIRClient } from \'@/lib/fhir/FHIRClient\';\nimport { CernerEnhancedService } from \'@/lib/services/CernerEnhancedService\';\n\nconst prisma = new PrismaClient();\n\n/**\n * POST /api/ehr/cerner/enhanced-sync\n * Perform enhanced sync with all Cerner-specific resources\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { connectionId, tenantId } = body;\n\n    if (!connectionId) {\n      return NextResponse.json(\n        { error: \'Missing connectionId\' },\n        { status: 400 }\n      );\n    }\n\n    // Verify connection belongs to user\n    const connection = await prisma.eHRConnection.findFirst({\n      where: {\n        id: connectionId,\n        userId: session.user.id,\n      },\n    });\n\n    if (!connection) {\n      return NextResponse.json(\n        { error: \'Connection not found\' },\n        { status: 404 }\n      );\n    }\n\n    // Verify connection is to Cerner\n    if (connection.provider !== \'CERNER\') {\n      return NextResponse.json(\n        { error: \'Enhanced sync is only supported for Cerner connections\' },\n        { status: 400 }\n      );\n    }\n\n    // Verify connection is active\n    if (connection.status !== \'ACTIVE\') {\n      return NextResponse.json(\n        { error: \'Connection is not active\' },\n        { status: 400 }\n      );\n    }\n\n    // Initialize Cerner service\n    const fhirClient = new FHIRClient(\n      connection.fhirBaseUrl,\n      connection.accessToken || \'\'\n    );\n    const cernerService = new CernerEnhancedService(fhirClient, tenantId);\n\n    // Perform enhanced sync\n    const startTime = Date.now();\n    const results = await cernerService.performEnhancedSync(connectionId);\n    const duration = Math.floor((Date.now() - startTime) / 1000);\n\n    // Update last sync time\n    await prisma.eHRConnection.update({\n      where: { id: connectionId },\n      data: {\n        lastSyncAt: new Date(),\n        nextSyncAt: new Date(Date.now() + connection.syncFrequency * 60 * 60 * 1000),\n      },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \'Enhanced sync completed successfully\',\n      results: {\n        standardResources: results.standardResources,\n        diagnosticReports: results.diagnosticReports,\n        carePlans: results.carePlans,\n        encounters: results.encounters,\n        provenance: results.provenance,\n        coverage: results.coverage,\n        totalResources: \n          results.standardResources + \n          results.diagnosticReports + \n          results.carePlans + \n          results.encounters + \n          results.provenance + \n          results.coverage,\n        duration,\n      },\n    });\n  } catch (error) {\n    console.error(\'Error performing enhanced sync:\', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \'Failed to perform enhanced sync\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}