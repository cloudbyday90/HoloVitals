{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/components/ErrorBoundary.tsx">\n/**\n * Error Boundary Component\n * Catches React errors and displays fallback UI\n */\n\n\'use client\';\n\nimport React, { Component, ErrorInfo, ReactNode } from \'react\';\nimport { AlertTriangle, RefreshCw, Home, Bug } from \'lucide-react\';\nimport { Button } from \'@/components/ui/button\';\n\n// ============================================================================\n// ERROR BOUNDARY PROPS & STATE\n// ============================================================================\n\ninterface ErrorBoundaryProps {\n  children: ReactNode;\n  fallback?: ReactNode;\n  onError?: (error: Error, errorInfo: ErrorInfo) => void;\n  showDetails?: boolean;\n}\n\ninterface ErrorBoundaryState {\n  hasError: boolean;\n  error: Error | null;\n  errorInfo: ErrorInfo | null;\n}\n\n// ============================================================================\n// ERROR BOUNDARY COMPONENT\n// ============================================================================\n\nexport class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props: ErrorBoundaryProps) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    };\n  }\n\n  static getDerivedStateFromError(error: Error): Partial<ErrorBoundaryState> {\n    return {\n      hasError: true,\n      error,\n    };\n  }\n\n  componentDidCatch(error: Error, errorInfo: ErrorInfo): void {\n    // Log error to console\n    console.error(\'Error Boundary caught an error:\', error, errorInfo);\n\n    // Update state with error info\n    this.setState({\n      errorInfo,\n    });\n\n    // Call custom error handler if provided\n    if (this.props.onError) {\n      this.props.onError(error, errorInfo);\n    }\n\n    // Log to error tracking service\n    this.logErrorToService(error, errorInfo);\n  }\n\n  private logErrorToService(error: Error, errorInfo: ErrorInfo): void {\n    // TODO: Send to error tracking service (Sentry, LogRocket, etc.)\n    const errorData = {\n      message: error.message,\n      stack: error.stack,\n      componentStack: errorInfo.componentStack,\n      timestamp: new Date().toISOString(),\n      userAgent: navigator.userAgent,\n      url: window.location.href,\n    };\n\n    // For now, just log to console\n    console.error(\'Error logged:\', errorData);\n\n    // In production, send to backend\n    if (process.env.NODE_ENV === \'production\') {\n      fetch(\'/api/errors/log\', {\n        method: \'POST\',\n        headers: { \'Content-Type\': \'application/json\' },\n        body: JSON.stringify(errorData),\n      }).catch(err => console.error(\'Failed to log error:\', err));\n    }\n  }\n\n  private handleReset = (): void => {\n    this.setState({\n      hasError: false,\n      error: null,\n      errorInfo: null,\n    });\n  };\n\n  private handleReload = (): void => {\n    window.location.reload();\n  };\n\n  private handleGoHome = (): void => {\n    window.location.href = \'/dashboard\';\n  };\n\n  render(): ReactNode {\n    if (this.state.hasError) {\n      // Use custom fallback if provided\n      if (this.props.fallback) {\n        return this.props.fallback;\n      }\n\n      // Default error UI\n      return (\n        <div className="min-h-screen flex items-center justify-center bg-gray-50 px-4">\n          <div className="max-w-2xl w-full">\n            {/* Error Icon */}\n            <div className="flex justify-center mb-6">\n              <div className="w-20 h-20 bg-red-100 rounded-full flex items-center justify-center">\n                <AlertTriangle className="w-10 h-10 text-red-600" />\n              </div>\n            </div>\n\n            {/* Error Title */}\n            <h1 className="text-3xl font-bold text-center text-gray-900 mb-2">\n              Oops! Something went wrong\n            </h1>\n\n            {/* Error Description */}\n            <p className="text-center text-gray-600 mb-8">\n              We\'re sorry for the inconvenience. An unexpected error has occurred.\n            </p>\n\n            {/* Error Details (Development Only) */}\n            {this.props.showDetails && this.state.error && (\n              <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">\n                <div className="flex items-start gap-2 mb-2">\n                  <Bug className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />\n                  <div className="flex-1">\n                    <h3 className="text-sm font-semibold text-red-900 mb-1">\n                      Error Details\n                    </h3>\n                    <p className="text-sm text-red-800 font-mono mb-2">\n                      {this.state.error.message}\n                    </p>\n                    {this.state.error.stack && (\n                      <details className="text-xs text-red-700">\n                        <summary className="cursor-pointer hover:text-red-900">\n                          Stack Trace\n                        </summary>\n                        <pre className="mt-2 p-2 bg-red-100 rounded overflow-x-auto">\n                          {this.state.error.stack}\n                        </pre>\n                      </details>\n                    )}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className="flex flex-col sm:flex-row gap-3 justify-center">\n              <Button\n                onClick={this.handleReset}\n                variant="default"\n                className="flex items-center gap-2"\n              >\n                <RefreshCw className="w-4 h-4" />\n                Try Again\n              </Button>\n\n              <Button\n                onClick={this.handleReload}\n                variant="outline"\n                className="flex items-center gap-2"\n              >\n                <RefreshCw className="w-4 h-4" />\n                Reload Page\n              </Button>\n\n              <Button\n                onClick={this.handleGoHome}\n                variant="outline"\n                className="flex items-center gap-2"\n              >\n                <Home className="w-4 h-4" />\n                Go to Dashboard\n              </Button>\n            </div>\n\n            {/* Help Text */}\n            <div className="mt-8 text-center">\n              <p className="text-sm text-gray-500">\n                If this problem persists, please{\' \'}\n                <a\n                  href="/support"\n                  className="text-blue-600 hover:text-blue-700 underline"\n                >\n                  contact support\n                </a>\n                .\n              </p>\n            </div>\n          </div>\n        </div>\n      );\n    }\n\n    return this.props.children;\n  }\n}\n\n// ============================================================================\n// CONVENIENCE WRAPPER COMPONENTS\n// ============================================================================\n\n/**\n * Page-level error boundary\n */\nexport function PageErrorBoundary({ children }: { children: ReactNode }) {\n  return (\n    <ErrorBoundary\n      showDetails={process.env.NODE_ENV === \'development\'}\n      onError={(error, errorInfo) => {\n        console.error(\'Page Error:\', error, errorInfo);\n      }}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Component-level error boundary with minimal UI\n */\nexport function ComponentErrorBoundary({ children }: { children: ReactNode }) {\n  return (\n    <ErrorBoundary\n      fallback={\n        <div className="p-4 bg-red-50 border border-red-200 rounded-lg">\n          <div className="flex items-start gap-2">\n            <AlertTriangle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />\n            <div>\n              <h3 className="text-sm font-semibold text-red-900 mb-1">\n                Component Error\n              </h3>\n              <p className="text-sm text-red-800">\n                This component failed to load. Please refresh the page.\n              </p>\n            </div>\n          </div>\n        </div>\n      }\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n\n/**\n * Silent error boundary (logs but doesn\'t show UI)\n */\nexport function SilentErrorBoundary({ children }: { children: ReactNode }) {\n  return (\n    <ErrorBoundary\n      fallback={null}\n      onError={(error, errorInfo) => {\n        console.error(\'Silent Error:\', error, errorInfo);\n      }}\n    >\n      {children}\n    </ErrorBoundary>\n  );\n}\n</create-file>\n</function_calls>'}