{'role': 'assistant', 'content': 'Perfect! Now let\'s create the FHIR client infrastructure:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/lib/fhir/FHIRClient.ts">\n/**\n * FHIR Client\n * \n * Base FHIR R4 client for interacting with FHIR servers\n * Supports SMART on FHIR authentication and common FHIR operations\n */\n\nimport axios, { AxiosInstance, AxiosRequestConfig } from \'axios\';\n\nexport interface FHIRClientConfig {\n  baseUrl: string;\n  accessToken?: string;\n  timeout?: number;\n  headers?: Record<string, string>;\n}\n\nexport interface FHIRSearchParams {\n  [key: string]: string | number | boolean | string[];\n}\n\nexport interface FHIRBundle {\n  resourceType: \'Bundle\';\n  type: string;\n  total?: number;\n  entry?: Array<{\n    resource: any;\n    fullUrl?: string;\n  }>;\n  link?: Array<{\n    relation: string;\n    url: string;\n  }>;\n}\n\nexport class FHIRClient {\n  private client: AxiosInstance;\n  private baseUrl: string;\n  private accessToken?: string;\n\n  constructor(config: FHIRClientConfig) {\n    this.baseUrl = config.baseUrl.replace(/\\/$/, \'\'); // Remove trailing slash\n    this.accessToken = config.accessToken;\n\n    this.client = axios.create({\n      baseURL: this.baseUrl,\n      timeout: config.timeout || 30000,\n      headers: {\n        \'Accept\': \'application/fhir+json\',\n        \'Content-Type\': \'application/fhir+json\',\n        ...config.headers,\n      },\n    });\n\n    // Add request interceptor for authentication\n    this.client.interceptors.request.use((config) => {\n      if (this.accessToken) {\n        config.headers.Authorization = `Bearer ${this.accessToken}`;\n      }\n      return config;\n    });\n\n    // Add response interceptor for error handling\n    this.client.interceptors.response.use(\n      (response) => response,\n      (error) => {\n        if (error.response) {\n          // FHIR OperationOutcome error\n          const outcome = error.response.data;\n          if (outcome?.resourceType === \'OperationOutcome\') {\n            const issues = outcome.issue || [];\n            const messages = issues.map((i: any) => i.diagnostics || i.details?.text).filter(Boolean);\n            throw new FHIRError(\n              messages.join(\'; \') || \'FHIR operation failed\',\n              error.response.status,\n              outcome\n            );\n          }\n        }\n        throw error;\n      }\n    );\n  }\n\n  /**\n   * Update access token\n   */\n  setAccessToken(token: string) {\n    this.accessToken = token;\n  }\n\n  /**\n   * Read a resource by ID\n   */\n  async read(resourceType: string, id: string): Promise<any> {\n    const response = await this.client.get(`/${resourceType}/${id}`);\n    return response.data;\n  }\n\n  /**\n   * Search for resources\n   */\n  async search(resourceType: string, params?: FHIRSearchParams): Promise<FHIRBundle> {\n    const queryParams = this.buildQueryParams(params);\n    const response = await this.client.get(`/${resourceType}`, { params: queryParams });\n    return response.data;\n  }\n\n  /**\n   * Search all pages and return all resources\n   */\n  async searchAll(resourceType: string, params?: FHIRSearchParams): Promise<any[]> {\n    const resources: any[] = [];\n    let bundle = await this.search(resourceType, params);\n\n    // Add resources from first page\n    if (bundle.entry) {\n      resources.push(...bundle.entry.map(e => e.resource));\n    }\n\n    // Follow next links to get all pages\n    while (bundle.link) {\n      const nextLink = bundle.link.find(l => l.relation === \'next\');\n      if (!nextLink) break;\n\n      const response = await this.client.get(nextLink.url);\n      bundle = response.data;\n\n      if (bundle.entry) {\n        resources.push(...bundle.entry.map(e => e.resource));\n      }\n    }\n\n    return resources;\n  }\n\n  /**\n   * Create a new resource\n   */\n  async create(resource: any): Promise<any> {\n    const resourceType = resource.resourceType;\n    if (!resourceType) {\n      throw new Error(\'Resource must have a resourceType\');\n    }\n\n    const response = await this.client.post(`/${resourceType}`, resource);\n    return response.data;\n  }\n\n  /**\n   * Update a resource\n   */\n  async update(resource: any): Promise<any> {\n    const resourceType = resource.resourceType;\n    const id = resource.id;\n\n    if (!resourceType || !id) {\n      throw new Error(\'Resource must have resourceType and id\');\n    }\n\n    const response = await this.client.put(`/${resourceType}/${id}`, resource);\n    return response.data;\n  }\n\n  /**\n   * Delete a resource\n   */\n  async delete(resourceType: string, id: string): Promise<void> {\n    await this.client.delete(`/${resourceType}/${id}`);\n  }\n\n  /**\n   * Get Patient resource\n   */\n  async getPatient(patientId: string): Promise<any> {\n    return this.read(\'Patient\', patientId);\n  }\n\n  /**\n   * Get DocumentReference resources for a patient\n   */\n  async getDocumentReferences(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'DocumentReference\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Get Observation resources for a patient\n   */\n  async getObservations(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'Observation\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Get Condition resources for a patient\n   */\n  async getConditions(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'Condition\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Get MedicationRequest resources for a patient\n   */\n  async getMedicationRequests(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'MedicationRequest\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Get AllergyIntolerance resources for a patient\n   */\n  async getAllergyIntolerances(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'AllergyIntolerance\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Get Immunization resources for a patient\n   */\n  async getImmunizations(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'Immunization\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Get Procedure resources for a patient\n   */\n  async getProcedures(patientId: string, params?: FHIRSearchParams): Promise<any[]> {\n    return this.searchAll(\'Procedure\', {\n      patient: patientId,\n      ...params,\n    });\n  }\n\n  /**\n   * Download document content from DocumentReference\n   */\n  async downloadDocument(documentReference: any): Promise<Buffer> {\n    // Get the first attachment with data or url\n    const content = documentReference.content?.[0];\n    if (!content) {\n      throw new Error(\'DocumentReference has no content\');\n    }\n\n    const attachment = content.attachment;\n    if (!attachment) {\n      throw new Error(\'DocumentReference content has no attachment\');\n    }\n\n    // If data is embedded (Base64)\n    if (attachment.data) {\n      return Buffer.from(attachment.data, \'base64\');\n    }\n\n    // If URL is provided\n    if (attachment.url) {\n      const response = await this.client.get(attachment.url, {\n        responseType: \'arraybuffer\',\n      });\n      return Buffer.from(response.data);\n    }\n\n    throw new Error(\'DocumentReference attachment has no data or url\');\n  }\n\n  /**\n   * Get capability statement (metadata)\n   */\n  async getCapabilityStatement(): Promise<any> {\n    const response = await this.client.get(\'/metadata\');\n    return response.data;\n  }\n\n  /**\n   * Build query parameters for search\n   */\n  private buildQueryParams(params?: FHIRSearchParams): Record<string, string> {\n    if (!params) return {};\n\n    const queryParams: Record<string, string> = {};\n\n    for (const [key, value] of Object.entries(params)) {\n      if (Array.isArray(value)) {\n        queryParams[key] = value.join(\',\');\n      } else {\n        queryParams[key] = String(value);\n      }\n    }\n\n    return queryParams;\n  }\n\n  /**\n   * Make a raw request to the FHIR server\n   */\n  async request(config: AxiosRequestConfig): Promise<any> {\n    const response = await this.client.request(config);\n    return response.data;\n  }\n}\n\n/**\n * FHIR Error class\n */\nexport class FHIRError extends Error {\n  constructor(\n    message: string,\n    public statusCode?: number,\n    public operationOutcome?: any\n  ) {\n    super(message);\n    this.name = \'FHIRError\';\n  }\n}\n\n/**\n * Helper function to extract patient ID from reference\n */\nexport function extractPatientId(reference: string): string | null {\n  const match = reference.match(/Patient\\/([^/]+)/);\n  return match ? match[1] : null;\n}\n\n/**\n * Helper function to format FHIR date\n */\nexport function formatFHIRDate(date: Date): string {\n  return date.toISOString().split(\'T\')[0];\n}\n\n/**\n * Helper function to parse FHIR date\n */\nexport function parseFHIRDate(dateString: string): Date {\n  return new Date(dateString);\n}\n</create-file>\n</function_calls>'}