{'role': 'assistant', 'content': 'Let me create a simpler test to verify the service works:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/__tests__/services/InstanceProvisionerService.simple.test.ts">\n/**\n * Simple InstanceProvisionerService Test\n * Basic validation tests\n */\n\nimport InstanceProvisionerService, {\n  CloudProvider,\n  InstanceType,\n  InstanceStatus,\n  ProvisionRequest\n} from \'@/lib/services/InstanceProvisionerService\';\nimport { PrismaClient } from \'@prisma/client\';\n\nconst prisma = new PrismaClient();\n\nconst TEST_USER_ID = \'test-user-simple\';\nconst TEST_TASK_ID = \'test-task-simple\';\n\ndescribe(\'InstanceProvisionerService - Simple Tests\', () => {\n  let service: InstanceProvisionerService;\n\n  beforeAll(async () => {\n    service = InstanceProvisionerService.getInstance();\n    \n    await prisma.user.upsert({\n      where: { id: TEST_USER_ID },\n      update: {},\n      create: {\n        id: TEST_USER_ID,\n        email: \'simple-test@example.com\',\n        passwordHash: \'test-hash\'\n      }\n    });\n\n    await prisma.analysisTask.upsert({\n      where: { id: TEST_TASK_ID },\n      update: {},\n      create: {\n        id: TEST_TASK_ID,\n        userId: TEST_USER_ID,\n        type: \'DOCUMENT_ANALYSIS\',\n        priority: \'HIGH\',\n        status: \'PENDING\',\n        data: JSON.stringify({ test: true })\n      }\n    });\n  });\n\n  afterAll(async () => {\n    await prisma.cloudInstance.deleteMany({ where: { userId: TEST_USER_ID } });\n    await prisma.analysisTask.deleteMany({ where: { id: TEST_TASK_ID } });\n    await prisma.user.deleteMany({ where: { id: TEST_USER_ID } });\n    service.stopMonitoring();\n    await prisma.$disconnect();\n  });\n\n  it(\'should create service instance\', () => {\n    expect(service).toBeDefined();\n    expect(service).toBeInstanceOf(InstanceProvisionerService);\n  });\n\n  it(\'should provision Azure instance\', async () => {\n    const request: ProvisionRequest = {\n      userId: TEST_USER_ID,\n      taskId: TEST_TASK_ID,\n      config: {\n        provider: CloudProvider.AZURE,\n        instanceType: InstanceType.AZURE_NC6,\n        region: \'eastus\',\n        diskSizeGB: 100,\n        autoTerminateMinutes: 60\n      },\n      purpose: \'Simple Test\'\n    };\n\n    const instance = await service.provisionInstance(request);\n\n    expect(instance).toBeDefined();\n    expect(instance.id).toBeDefined();\n    expect(instance.provider).toBe(CloudProvider.AZURE);\n    expect(instance.status).toBe(InstanceStatus.READY);\n  }, 30000);\n\n  it(\'should get instance statistics\', async () => {\n    const stats = await service.getStatistics(TEST_USER_ID);\n    \n    expect(stats).toBeDefined();\n    expect(stats.totalProvisioned).toBeGreaterThanOrEqual(0);\n    expect(stats.currentlyRunning).toBeGreaterThanOrEqual(0);\n  });\n});\n</create-file>\n</function_calls>'}