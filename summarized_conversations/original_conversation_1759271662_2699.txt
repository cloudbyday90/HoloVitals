{'role': 'assistant', 'content': 'The tests are failing because they\'re trying to create tasks with a userId that doesn\'t exist in the database. We need to create a test user first. Let me update the tests to create a user in the beforeAll hook:\n\n\n<function_calls>\n<str-replace file_path="medical-analysis-platform/__tests__/services/AnalysisQueueService.test.ts">\n    <old_str>/**\n * Analysis Queue Service Tests\n */\n\nimport {\n  AnalysisQueueService,\n  TaskPriority,\n  TaskStatus,\n  TaskType,\n  AnalysisTask\n} from \'@/lib/services/AnalysisQueueService\';\n\ndescribe(\'AnalysisQueueService\', () => {\n  let service: AnalysisQueueService;\n\n  beforeEach(() => {\n    service = AnalysisQueueService.getInstance();\n    // Stop processing to control test execution\n    service.stopProcessing();\n  });\n\n  afterEach(() => {\n    service.stopProcessing();\n  });</old_str>\n    <new_str>/**\n * Analysis Queue Service Tests\n */\n\nimport {\n  AnalysisQueueService,\n  TaskPriority,\n  TaskStatus,\n  TaskType,\n  AnalysisTask\n} from \'@/lib/services/AnalysisQueueService\';\nimport { PrismaClient } from \'@prisma/client\';\n\nconst prisma = new PrismaClient();\n\ndescribe(\'AnalysisQueueService\', () => {\n  let service: AnalysisQueueService;\n  let testUserId: string;\n\n  beforeAll(async () => {\n    // Create a test user\n    const user = await prisma.user.create({\n      data: {\n        email: \'test-queue@example.com\',\n        passwordHash: \'test-hash\',\n      }\n    });\n    testUserId = user.id;\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    await prisma.analysisTask.deleteMany({\n      where: { userId: testUserId }\n    });\n    await prisma.user.delete({\n      where: { id: testUserId }\n    });\n    await prisma.$disconnect();\n  });\n\n  beforeEach(() => {\n    service = AnalysisQueueService.getInstance();\n    // Stop processing to control test execution\n    service.stopProcessing();\n  });\n\n  afterEach(() => {\n    service.stopProcessing();\n  });</new_str>\n</str-replace>\n</function_calls>\n</function_calls>'}