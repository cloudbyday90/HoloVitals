{'role': 'assistant', 'content': '# Building Service-Specific UI Pages\n\nGreat! Let\'s build the service-specific UI pages to integrate with all 4 backend services. I\'ll create comprehensive, functional pages for each service.\n\n## Implementation Plan\n\n1. **Documents Page** - Upload, list, manage documents\n2. **Chat Interface** - AI chat with streaming responses\n3. **Queue Page** - Task management and monitoring\n4. **Instances Page** - Provision and manage cloud instances\n5. **Costs Dashboard** - Analytics and cost tracking\n\nLet me start building these pages:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/dashboard/documents/page.tsx">\n\'use client\';\n\nimport { useState } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport { Input } from \'@/components/ui/input\';\nimport {\n  FileText,\n  Upload,\n  Search,\n  Filter,\n  Download,\n  Trash2,\n  Eye,\n  Clock,\n  CheckCircle2,\n  AlertCircle,\n  Loader2,\n  FileType,\n  Calendar\n} from \'lucide-react\';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \'@/components/ui/select\';\n\ninterface Document {\n  id: string;\n  name: string;\n  type: string;\n  size: number;\n  uploadDate: Date;\n  status: \'processing\' | \'completed\' | \'failed\';\n  ocrStatus: \'pending\' | \'processing\' | \'completed\' | \'failed\';\n  optimizationStatus: \'pending\' | \'processing\' | \'completed\';\n  tokensSaved?: number;\n}\n\nexport default function DocumentsPage() {\n  const [documents, setDocuments] = useState<Document[]>([\n    {\n      id: \'1\',\n      name: \'Blood_Test_Results_2024.pdf\',\n      type: \'bloodwork\',\n      size: 2.4,\n      uploadDate: new Date(\'2024-09-28\'),\n      status: \'completed\',\n      ocrStatus: \'completed\',\n      optimizationStatus: \'completed\',\n      tokensSaved: 12500\n    },\n    {\n      id: \'2\',\n      name: \'MRI_Scan_Report.pdf\',\n      type: \'imaging\',\n      size: 5.8,\n      uploadDate: new Date(\'2024-09-27\'),\n      status: \'completed\',\n      ocrStatus: \'completed\',\n      optimizationStatus: \'completed\',\n      tokensSaved: 8900\n    },\n    {\n      id: \'3\',\n      name: \'Prescription_Summary.pdf\',\n      type: \'prescription\',\n      size: 1.2,\n      uploadDate: new Date(\'2024-09-26\'),\n      status: \'processing\',\n      ocrStatus: \'processing\',\n      optimizationStatus: \'pending\',\n    },\n  ]);\n\n  const [searchQuery, setSearchQuery] = useState(\'\');\n  const [filterType, setFilterType] = useState(\'all\');\n  const [filterStatus, setFilterStatus] = useState(\'all\');\n  const [uploading, setUploading] = useState(false);\n\n  const handleFileUpload = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = e.target.files;\n    if (!files || files.length === 0) return;\n\n    setUploading(true);\n    \n    // Simulate upload\n    setTimeout(() => {\n      const newDocs: Document[] = Array.from(files).map((file, index) => ({\n        id: `new-${Date.now()}-${index}`,\n        name: file.name,\n        type: \'general\',\n        size: file.size / (1024 * 1024), // Convert to MB\n        uploadDate: new Date(),\n        status: \'processing\',\n        ocrStatus: \'pending\',\n        optimizationStatus: \'pending\',\n      }));\n\n      setDocuments([...newDocs, ...documents]);\n      setUploading(false);\n    }, 2000);\n  };\n\n  const handleDelete = (id: string) => {\n    if (confirm(\'Are you sure you want to delete this document?\')) {\n      setDocuments(documents.filter(doc => doc.id !== id));\n    }\n  };\n\n  const filteredDocuments = documents.filter(doc => {\n    const matchesSearch = doc.name.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchesType = filterType === \'all\' || doc.type === filterType;\n    const matchesStatus = filterStatus === \'all\' || doc.status === filterStatus;\n    return matchesSearch && matchesType && matchesStatus;\n  });\n\n  const stats = {\n    total: documents.length,\n    processing: documents.filter(d => d.status === \'processing\').length,\n    completed: documents.filter(d => d.status === \'completed\').length,\n    totalTokensSaved: documents.reduce((sum, d) => sum + (d.tokensSaved || 0), 0),\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \'completed\':\n        return <CheckCircle2 className="w-4 h-4 text-green-600" />;\n      case \'processing\':\n        return <Loader2 className="w-4 h-4 text-blue-600 animate-spin" />;\n      case \'failed\':\n        return <AlertCircle className="w-4 h-4 text-red-600" />;\n      default:\n        return <Clock className="w-4 h-4 text-gray-400" />;\n    }\n  };\n\n  const getStatusBadge = (status: string) => {\n    const styles = {\n      completed: \'bg-green-100 text-green-700\',\n      processing: \'bg-blue-100 text-blue-700\',\n      failed: \'bg-red-100 text-red-700\',\n      pending: \'bg-gray-100 text-gray-700\',\n    };\n    return styles[status as keyof typeof styles] || styles.pending;\n  };\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div>\n        <h1 className="text-3xl font-bold mb-2">Documents</h1>\n        <p className="text-gray-600">Upload and manage your medical documents</p>\n      </div>\n\n      {/* Stats */}\n      <div className="grid gap-4 md:grid-cols-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Total Documents\n            </CardTitle>\n            <FileText className="w-4 h-4 text-gray-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Processing\n            </CardTitle>\n            <Loader2 className="w-4 h-4 text-blue-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-blue-600">{stats.processing}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Completed\n            </CardTitle>\n            <CheckCircle2 className="w-4 h-4 text-green-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">{stats.completed}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Tokens Saved\n            </CardTitle>\n            <FileType className="w-4 h-4 text-purple-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-purple-600">\n              {stats.totalTokensSaved.toLocaleString()}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Upload Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Upload Documents</CardTitle>\n          <CardDescription>\n            Upload medical documents in PDF, JPG, or PNG format\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-blue-500 transition-colors">\n            <input\n              type="file"\n              id="file-upload"\n              className="hidden"\n              multiple\n              accept=".pdf,.jpg,.jpeg,.png"\n              onChange={handleFileUpload}\n              disabled={uploading}\n            />\n            <label\n              htmlFor="file-upload"\n              className="cursor-pointer flex flex-col items-center"\n            >\n              {uploading ? (\n                <>\n                  <Loader2 className="w-12 h-12 text-blue-500 mb-4 animate-spin" />\n                  <p className="text-lg font-medium mb-2">Uploading...</p>\n                  <p className="text-sm text-gray-500">Please wait</p>\n                </>\n              ) : (\n                <>\n                  <Upload className="w-12 h-12 text-gray-400 mb-4" />\n                  <p className="text-lg font-medium mb-2">\n                    Click to upload or drag and drop\n                  </p>\n                  <p className="text-sm text-gray-500">\n                    PDF, JPG, PNG up to 10MB\n                  </p>\n                </>\n              )}\n            </label>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Filters and Search */}\n      <Card>\n        <CardContent className="pt-6">\n          <div className="flex flex-col md:flex-row gap-4">\n            {/* Search */}\n            <div className="flex-1">\n              <div className="relative">\n                <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />\n                <Input\n                  placeholder="Search documents..."\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className="pl-10"\n                />\n              </div>\n            </div>\n\n            {/* Type Filter */}\n            <Select value={filterType} onValueChange={setFilterType}>\n              <SelectTrigger className="w-full md:w-48">\n                <SelectValue placeholder="Document Type" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value="all">All Types</SelectItem>\n                <SelectItem value="bloodwork">Bloodwork</SelectItem>\n                <SelectItem value="imaging">Imaging</SelectItem>\n                <SelectItem value="prescription">Prescription</SelectItem>\n                <SelectItem value="general">General</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Status Filter */}\n            <Select value={filterStatus} onValueChange={setFilterStatus}>\n              <SelectTrigger className="w-full md:w-48">\n                <SelectValue placeholder="Status" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value="all">All Status</SelectItem>\n                <SelectItem value="completed">Completed</SelectItem>\n                <SelectItem value="processing">Processing</SelectItem>\n                <SelectItem value="failed">Failed</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Documents List */}\n      <div className="space-y-4">\n        {filteredDocuments.length === 0 ? (\n          <Card>\n            <CardContent className="py-12 text-center">\n              <FileText className="w-16 h-16 text-gray-400 mx-auto mb-4" />\n              <h3 className="text-xl font-semibold mb-2">No documents found</h3>\n              <p className="text-gray-600">\n                {searchQuery || filterType !== \'all\' || filterStatus !== \'all\'\n                  ? \'Try adjusting your filters\'\n                  : \'Upload your first document to get started\'}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredDocuments.map((doc) => (\n            <Card key={doc.id} className="hover:shadow-md transition-shadow">\n              <CardContent className="p-6">\n                <div className="flex items-start justify-between">\n                  {/* Document Info */}\n                  <div className="flex items-start gap-4 flex-1">\n                    <div className="w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center flex-shrink-0">\n                      <FileText className="w-6 h-6 text-blue-600" />\n                    </div>\n                    \n                    <div className="flex-1 min-w-0">\n                      <h3 className="font-semibold text-lg mb-1 truncate">\n                        {doc.name}\n                      </h3>\n                      \n                      <div className="flex flex-wrap gap-4 text-sm text-gray-600 mb-3">\n                        <span className="flex items-center gap-1">\n                          <FileType className="w-4 h-4" />\n                          {doc.type}\n                        </span>\n                        <span className="flex items-center gap-1">\n                          <Calendar className="w-4 h-4" />\n                          {doc.uploadDate.toLocaleDateString()}\n                        </span>\n                        <span>{doc.size.toFixed(2)} MB</span>\n                      </div>\n\n                      {/* Status Badges */}\n                      <div className="flex flex-wrap gap-2">\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium flex items-center gap-1 ${getStatusBadge(doc.status)}`}>\n                          {getStatusIcon(doc.status)}\n                          {doc.status}\n                        </span>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadge(doc.ocrStatus)}`}>\n                          OCR: {doc.ocrStatus}\n                        </span>\n                        <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadge(doc.optimizationStatus)}`}>\n                          Optimized: {doc.optimizationStatus}\n                        </span>\n                        {doc.tokensSaved && (\n                          <span className="px-2 py-1 rounded-full text-xs font-medium bg-purple-100 text-purple-700">\n                            {doc.tokensSaved.toLocaleString()} tokens saved\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Actions */}\n                  <div className="flex gap-2 ml-4">\n                    <Button variant="outline" size="icon" title="View">\n                      <Eye className="w-4 h-4" />\n                    </Button>\n                    <Button variant="outline" size="icon" title="Download">\n                      <Download className="w-4 h-4" />\n                    </Button>\n                    <Button\n                      variant="outline"\n                      size="icon"\n                      title="Delete"\n                      onClick={() => handleDelete(doc.id)}\n                    >\n                      <Trash2 className="w-4 h-4 text-red-600" />\n                    </Button>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}