{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/lib/services/ai.service.ts">\nimport OpenAI from \'openai\';\nimport { AnalysisContext, AIResponse, Document } from \'@/lib/types\';\nimport { contextBuilder } from \'./context.service\';\n\nexport class AIAnalysisService {\n  private openai: OpenAI;\n\n  constructor() {\n    this.openai = new OpenAI({\n      apiKey: process.env.OPENAI_API_KEY || \'\'\n    });\n  }\n\n  /**\n   * Analyze a query with full document context\n   */\n  async analyzeWithContext(\n    query: string,\n    documentId: string,\n    userId: string\n  ): Promise<AIResponse> {\n    // Build comprehensive context\n    const context = await contextBuilder.buildAnalysisContext(documentId, userId);\n\n    // Construct prompt with context\n    const prompt = this.buildPrompt(query, context);\n\n    // Get AI response\n    const response = await this.openai.chat.completions.create({\n      model: \'gpt-4-turbo-preview\',\n      messages: [\n        {\n          role: \'system\',\n          content: this.getSystemPrompt()\n        },\n        {\n          role: \'user\',\n          content: prompt\n        }\n      ],\n      temperature: 0.3, // Lower temperature for medical accuracy\n      max_tokens: 2000\n    });\n\n    const answer = response.choices[0].message.content || \'\';\n\n    return {\n      answer,\n      sources: this.extractSources(context),\n      confidence: this.assessConfidence(response),\n      relatedDocuments: context.relatedDocuments.map(d => d.id)\n    };\n  }\n\n  /**\n   * Analyze trends across multiple documents\n   */\n  async analyzeTrends(\n    userId: string,\n    documentType: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<string> {\n    // Get documents in date range\n    const documents = await this.getDocumentsInRange(\n      userId,\n      documentType,\n      startDate,\n      endDate\n    );\n\n    if (documents.length === 0) {\n      return \'No documents found in the specified date range.\';\n    }\n\n    // Build trend analysis prompt\n    const prompt = this.buildTrendPrompt(documents, documentType);\n\n    const response = await this.openai.chat.completions.create({\n      model: \'gpt-4-turbo-preview\',\n      messages: [\n        {\n          role: \'system\',\n          content: this.getSystemPrompt()\n        },\n        {\n          role: \'user\',\n          content: prompt\n        }\n      ],\n      temperature: 0.3\n    });\n\n    return response.choices[0].message.content || \'\';\n  }\n\n  /**\n   * Generate insights for a patient\n   */\n  async generateInsights(userId: string): Promise<string[]> {\n    const context = await contextBuilder.getMetadata(userId);\n\n    const prompt = `\nBased on the following patient document history, generate key insights and observations:\n\nTotal Documents: ${context.totalDocuments}\nDocument Types: ${context.documentTypes.join(\', \')}\nDate Range: ${context.dateRange.earliest.toLocaleDateString()} to ${context.dateRange.latest.toLocaleDateString()}\n\nPlease provide:\n1. Overview of document coverage\n2. Any notable patterns or gaps\n3. Recommendations for additional documentation\n4. General health tracking observations\n\nFormat as a bulleted list of insights.\n    `;\n\n    const response = await this.openai.chat.completions.create({\n      model: \'gpt-4-turbo-preview\',\n      messages: [\n        {\n          role: \'system\',\n          content: this.getSystemPrompt()\n        },\n        {\n          role: \'user\',\n          content: prompt\n        }\n      ],\n      temperature: 0.5\n    });\n\n    const content = response.choices[0].message.content || \'\';\n    return content.split(\'\\n\').filter(line => line.trim().startsWith(\'-\') || line.trim().startsWith(\'â€¢\'));\n  }\n\n  /**\n   * Build prompt with full context\n   */\n  private buildPrompt(query: string, context: AnalysisContext): string {\n    const currentDataSummary = context.currentData\n      .map(d => `${d.fieldName}: ${d.fieldValue}${d.unit ? \' \' + d.unit : \'\'}${d.isAbnormal ? \' (ABNORMAL)\' : \'\'}`)\n      .join(\'\\n\');\n\n    const relatedDocsSummary = context.relatedDocuments\n      .map(doc => `- ${doc.documentType} from ${doc.documentDate?.toLocaleDateString() || \'unknown date\'}`)\n      .join(\'\\n\');\n\n    return `\nYou are analyzing medical documents for a patient. Please provide a comprehensive analysis based on the following context.\n\nCURRENT DOCUMENT:\nType: ${context.currentDocument.documentType}\nDate: ${context.currentDocument.documentDate?.toLocaleDateString() || \'unknown\'}\nFile: ${context.currentDocument.fileName}\n\nEXTRACTED DATA:\n${currentDataSummary || \'No structured data extracted\'}\n\nRELATED DOCUMENTS:\n${relatedDocsSummary || \'No related documents found\'}\n\nPATIENT HISTORY:\n- Total Documents: ${context.metadata.totalDocuments}\n- Document Types: ${context.metadata.documentTypes.join(\', \')}\n- Date Range: ${context.metadata.dateRange.earliest.toLocaleDateString()} to ${context.metadata.dateRange.latest.toLocaleDateString()}\n\nUSER QUERY:\n${query}\n\nPlease provide a comprehensive analysis that:\n1. Directly answers the user\'s question\n2. References specific data points from the documents\n3. Highlights any trends or patterns\n4. Notes any concerning findings (especially abnormal values)\n5. Provides context from related documents\n6. Suggests follow-up questions or actions if appropriate\n\nRemember: This is for informational purposes only and should not replace professional medical advice.\n    `;\n  }\n\n  /**\n   * Build trend analysis prompt\n   */\n  private buildTrendPrompt(documents: any[], documentType: string): string {\n    const docSummaries = documents\n      .map(doc => {\n        const dataPoints = doc.extractedData\n          .map((d: any) => `${d.fieldName}: ${d.fieldValue}${d.unit ? \' \' + d.unit : \'\'}`)\n          .join(\', \');\n        return `${doc.documentDate?.toLocaleDateString()}: ${dataPoints}`;\n      })\n      .join(\'\\n\');\n\n    return `\nAnalyze the following ${documentType} results over time and identify trends, patterns, and any concerning changes:\n\n${docSummaries}\n\nPlease provide:\n1. Overall trend analysis\n2. Significant changes or patterns\n3. Values moving toward or away from normal ranges\n4. Recommendations for monitoring\n5. Any concerning trends that warrant attention\n    `;\n  }\n\n  /**\n   * Get system prompt for medical analysis\n   */\n  private getSystemPrompt(): string {\n    return `\nYou are an AI assistant specialized in analyzing medical documents. Your role is to:\n\n1. Extract and interpret information from medical documents accurately\n2. Identify trends and patterns across multiple documents\n3. Provide clear, understandable explanations of medical data\n4. Cross-reference related documents to provide comprehensive context\n5. Highlight abnormal values or concerning findings\n6. Maintain patient privacy and data security\n\nGuidelines:\n- Always cite specific documents and data points in your responses\n- Use clear, non-technical language when possible, but maintain medical accuracy\n- Indicate when values are outside normal ranges\n- Suggest when professional medical consultation is needed\n- Never provide definitive diagnoses or treatment recommendations\n- Always include appropriate medical disclaimers\n- Focus on factual analysis based on the provided documents\n- Acknowledge limitations when information is incomplete\n\nMedical Disclaimer:\nAlways remind users that your analysis is for informational purposes only and should not replace professional medical advice, diagnosis, or treatment.\n    `;\n  }\n\n  /**\n   * Extract source documents from context\n   */\n  private extractSources(context: AnalysisContext): string[] {\n    const sources = [\n      `${context.currentDocument.fileName} (${context.currentDocument.documentDate?.toLocaleDateString()})`\n    ];\n\n    context.relatedDocuments.forEach(doc => {\n      sources.push(`${doc.fileName} (${doc.documentDate?.toLocaleDateString()})`);\n    });\n\n    return sources;\n  }\n\n  /**\n   * Assess confidence in AI response\n   */\n  private assessConfidence(response: OpenAI.Chat.Completions.ChatCompletion): number {\n    // Simple confidence assessment based on response characteristics\n    // In production, this could be more sophisticated\n    const content = response.choices[0].message.content || \'\';\n    \n    if (content.includes(\'uncertain\') || content.includes(\'unclear\')) {\n      return 0.6;\n    }\n    if (content.includes(\'likely\') || content.includes(\'possibly\')) {\n      return 0.7;\n    }\n    if (content.includes(\'appears\') || content.includes(\'suggests\')) {\n      return 0.8;\n    }\n    \n    return 0.9;\n  }\n\n  /**\n   * Get documents in date range (helper method)\n   */\n  private async getDocumentsInRange(\n    userId: string,\n    documentType: string,\n    startDate?: Date,\n    endDate?: Date\n  ): Promise<any[]> {\n    // This would use Prisma to fetch documents\n    // Placeholder implementation\n    return [];\n  }\n}\n\nexport const aiService = new AIAnalysisService();\n</create-file>\n</function_calls>'}