{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/components/ErrorMonitoringWidget.tsx">\n/**\n * Error Monitoring Widget\n * Compact widget for dashboard showing error summary\n */\n\n\'use client\';\n\nimport { useState, useEffect } from \'react\';\nimport Link from \'next/link\';\nimport { AlertTriangle, AlertCircle, TrendingUp, TrendingDown, ArrowRight } from \'lucide-react\';\nimport { Card, CardContent, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { AdminOnly } from \'@/components/ui/RoleGuard\';\n\ninterface ErrorStats {\n  total: number;\n  bySeverity: {\n    LOW: number;\n    MEDIUM: number;\n    HIGH: number;\n    CRITICAL: number;\n  };\n  trend: {\n    change: number;\n  };\n}\n\nexport function ErrorMonitoringWidget() {\n  const [stats, setStats] = useState<ErrorStats | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    loadStats();\n    const interval = setInterval(loadStats, 60000); // Refresh every minute\n    return () => clearInterval(interval);\n  }, []);\n\n  const loadStats = async () => {\n    try {\n      const response = await fetch(\'/api/admin/errors/stats?range=24h\');\n      const data = await response.json();\n      setStats(data);\n    } catch (error) {\n      console.error(\'Failed to load error stats:\', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  if (loading) {\n    return (\n      <AdminOnly>\n        <Card>\n          <CardHeader>\n            <CardTitle className="text-lg">Error Monitoring</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className="animate-pulse space-y-3">\n              <div className="h-4 bg-gray-200 rounded w-3/4"></div>\n              <div className="h-4 bg-gray-200 rounded w-1/2"></div>\n            </div>\n          </CardContent>\n        </Card>\n      </AdminOnly>\n    );\n  }\n\n  if (!stats) {\n    return null;\n  }\n\n  const hasCriticalErrors = stats.bySeverity.CRITICAL > 0;\n  const hasHighErrors = stats.bySeverity.HIGH > 0;\n\n  return (\n    <AdminOnly>\n      <Card className={hasCriticalErrors ? \'border-red-300 bg-red-50\' : \'\'}>\n        <CardHeader className="flex flex-row items-center justify-between pb-2">\n          <CardTitle className="text-lg">Error Monitoring</CardTitle>\n          <Link\n            href="/dashboard/admin/errors"\n            className="text-sm text-blue-600 hover:text-blue-700 flex items-center gap-1"\n          >\n            View All\n            <ArrowRight className="w-4 h-4" />\n          </Link>\n        </CardHeader>\n        <CardContent>\n          <div className="space-y-4">\n            {/* Total Errors */}\n            <div className="flex items-center justify-between">\n              <div>\n                <p className="text-2xl font-bold">{stats.total}</p>\n                <p className="text-sm text-gray-600">Total errors (24h)</p>\n              </div>\n              <div className="flex items-center gap-1">\n                {stats.trend.change > 0 ? (\n                  <>\n                    <TrendingUp className="w-4 h-4 text-red-500" />\n                    <span className="text-sm text-red-600">+{stats.trend.change}%</span>\n                  </>\n                ) : (\n                  <>\n                    <TrendingDown className="w-4 h-4 text-green-500" />\n                    <span className="text-sm text-green-600">{stats.trend.change}%</span>\n                  </>\n                )}\n              </div>\n            </div>\n\n            {/* Severity Breakdown */}\n            <div className="space-y-2">\n              {/* Critical */}\n              {stats.bySeverity.CRITICAL > 0 && (\n                <div className="flex items-center justify-between p-2 bg-red-100 rounded">\n                  <div className="flex items-center gap-2">\n                    <AlertCircle className="w-4 h-4 text-red-600" />\n                    <span className="text-sm font-medium text-red-900">Critical</span>\n                  </div>\n                  <span className="text-sm font-bold text-red-900">\n                    {stats.bySeverity.CRITICAL}\n                  </span>\n                </div>\n              )}\n\n              {/* High */}\n              {stats.bySeverity.HIGH > 0 && (\n                <div className="flex items-center justify-between p-2 bg-orange-100 rounded">\n                  <div className="flex items-center gap-2">\n                    <AlertTriangle className="w-4 h-4 text-orange-600" />\n                    <span className="text-sm font-medium text-orange-900">High</span>\n                  </div>\n                  <span className="text-sm font-bold text-orange-900">\n                    {stats.bySeverity.HIGH}\n                  </span>\n                </div>\n              )}\n\n              {/* Medium/Low */}\n              {(stats.bySeverity.MEDIUM > 0 || stats.bySeverity.LOW > 0) && (\n                <div className="flex items-center justify-between p-2 bg-yellow-50 rounded">\n                  <span className="text-sm text-gray-700">Medium/Low</span>\n                  <span className="text-sm font-medium text-gray-900">\n                    {stats.bySeverity.MEDIUM + stats.bySeverity.LOW}\n                  </span>\n                </div>\n              )}\n            </div>\n\n            {/* Status Message */}\n            {hasCriticalErrors ? (\n              <div className="flex items-start gap-2 p-3 bg-red-100 border border-red-200 rounded">\n                <AlertCircle className="w-5 h-5 text-red-600 flex-shrink-0 mt-0.5" />\n                <div>\n                  <p className="text-sm font-medium text-red-900">\n                    Critical errors detected\n                  </p>\n                  <p className="text-xs text-red-700 mt-1">\n                    Immediate attention required\n                  </p>\n                </div>\n              </div>\n            ) : hasHighErrors ? (\n              <div className="flex items-start gap-2 p-3 bg-orange-100 border border-orange-200 rounded">\n                <AlertTriangle className="w-5 h-5 text-orange-600 flex-shrink-0 mt-0.5" />\n                <div>\n                  <p className="text-sm font-medium text-orange-900">\n                    High severity errors present\n                  </p>\n                  <p className="text-xs text-orange-700 mt-1">\n                    Review recommended\n                  </p>\n                </div>\n              </div>\n            ) : (\n              <div className="text-center py-2">\n                <p className="text-sm text-green-600 font-medium">\n                  âœ“ System running smoothly\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </AdminOnly>\n  );\n}\n</create-file>\n</function_calls>'}