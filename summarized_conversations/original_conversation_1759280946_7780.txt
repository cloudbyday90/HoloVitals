{'role': 'assistant', 'content': '# Setting Up Error Monitoring Dashboard for HoloVitals\n\nLet me create a comprehensive error monitoring dashboard with real-time statistics, error tracking, and alerting capabilities.\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/dashboard/admin/errors/page.tsx">\n/**\n * Error Monitoring Dashboard\n * OWNER/ADMIN only - Monitor system errors and health\n */\n\n\'use client\';\n\nimport { useState, useEffect } from \'react\';\nimport { AdminOnly } from \'@/components/ui/RoleGuard\';\nimport {\n  AlertTriangle,\n  AlertCircle,\n  Info,\n  CheckCircle,\n  TrendingUp,\n  TrendingDown,\n  RefreshCw,\n  Download,\n  Filter,\n  Search,\n} from \'lucide-react\';\nimport { Button } from \'@/components/ui/button\';\nimport { Card, CardContent, CardHeader, CardTitle } from \'@/components/ui/card\';\n\n// ============================================================================\n// TYPES\n// ============================================================================\n\ninterface ErrorStats {\n  total: number;\n  bySeverity: {\n    LOW: number;\n    MEDIUM: number;\n    HIGH: number;\n    CRITICAL: number;\n  };\n  byCode: Record<string, number>;\n  byEndpoint: Record<string, number>;\n  trend: {\n    current: number;\n    previous: number;\n    change: number;\n  };\n}\n\ninterface ErrorLog {\n  id: string;\n  severity: string;\n  message: string;\n  code?: string;\n  statusCode?: number;\n  endpoint?: string;\n  userId?: string;\n  timestamp: string;\n}\n\n// ============================================================================\n// MAIN COMPONENT\n// ============================================================================\n\nexport default function ErrorMonitoringPage() {\n  const [stats, setStats] = useState<ErrorStats | null>(null);\n  const [recentErrors, setRecentErrors] = useState<ErrorLog[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [timeRange, setTimeRange] = useState(\'24h\');\n  const [severityFilter, setSeverityFilter] = useState<string>(\'all\');\n  const [searchQuery, setSearchQuery] = useState(\'\');\n\n  useEffect(() => {\n    loadErrorData();\n    const interval = setInterval(loadErrorData, 30000); // Refresh every 30s\n    return () => clearInterval(interval);\n  }, [timeRange, severityFilter]);\n\n  const loadErrorData = async () => {\n    try {\n      setLoading(true);\n\n      // Load error statistics\n      const statsRes = await fetch(`/api/admin/errors/stats?range=${timeRange}`);\n      const statsData = await statsRes.json();\n      setStats(statsData);\n\n      // Load recent errors\n      const errorsRes = await fetch(\n        `/api/admin/errors?limit=50&severity=${severityFilter !== \'all\' ? severityFilter : \'\'}`\n      );\n      const errorsData = await errorsRes.json();\n      setRecentErrors(errorsData.errors);\n    } catch (error) {\n      console.error(\'Failed to load error data:\', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleRefresh = () => {\n    loadErrorData();\n  };\n\n  const handleExport = async () => {\n    try {\n      const response = await fetch(`/api/admin/errors/export?range=${timeRange}`);\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement(\'a\');\n      a.href = url;\n      a.download = `error-logs-${new Date().toISOString()}.csv`;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error(\'Failed to export errors:\', error);\n    }\n  };\n\n  const filteredErrors = recentErrors.filter(error =>\n    error.message.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    error.code?.toLowerCase().includes(searchQuery.toLowerCase()) ||\n    error.endpoint?.toLowerCase().includes(searchQuery.toLowerCase())\n  );\n\n  return (\n    <AdminOnly>\n      <div className="p-6 space-y-6">\n        {/* Header */}\n        <div className="flex items-center justify-between">\n          <div>\n            <h1 className="text-3xl font-bold text-gray-900">Error Monitoring</h1>\n            <p className="text-gray-600 mt-1">\n              Monitor system errors and health metrics\n            </p>\n          </div>\n\n          <div className="flex items-center gap-3">\n            {/* Time Range Selector */}\n            <select\n              value={timeRange}\n              onChange={(e) => setTimeRange(e.target.value)}\n              className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n            >\n              <option value="1h">Last Hour</option>\n              <option value="24h">Last 24 Hours</option>\n              <option value="7d">Last 7 Days</option>\n              <option value="30d">Last 30 Days</option>\n            </select>\n\n            {/* Refresh Button */}\n            <Button onClick={handleRefresh} variant="outline">\n              <RefreshCw className={`w-4 h-4 mr-2 ${loading ? \'animate-spin\' : \'\'}`} />\n              Refresh\n            </Button>\n\n            {/* Export Button */}\n            <Button onClick={handleExport} variant="outline">\n              <Download className="w-4 h-4 mr-2" />\n              Export\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        {stats && (\n          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">\n            {/* Total Errors */}\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between pb-2">\n                <CardTitle className="text-sm font-medium text-gray-600">\n                  Total Errors\n                </CardTitle>\n                <AlertTriangle className="w-4 h-4 text-gray-400" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold">{stats.total.toLocaleString()}</div>\n                <div className="flex items-center mt-2">\n                  {stats.trend.change > 0 ? (\n                    <TrendingUp className="w-4 h-4 text-red-500 mr-1" />\n                  ) : (\n                    <TrendingDown className="w-4 h-4 text-green-500 mr-1" />\n                  )}\n                  <span\n                    className={`text-sm ${\n                      stats.trend.change > 0 ? \'text-red-600\' : \'text-green-600\'\n                    }`}\n                  >\n                    {Math.abs(stats.trend.change)}% vs previous period\n                  </span>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Critical Errors */}\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between pb-2">\n                <CardTitle className="text-sm font-medium text-gray-600">\n                  Critical Errors\n                </CardTitle>\n                <AlertCircle className="w-4 h-4 text-red-500" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold text-red-600">\n                  {stats.bySeverity.CRITICAL.toLocaleString()}\n                </div>\n                <p className="text-xs text-gray-500 mt-2">\n                  Requires immediate attention\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* High Severity */}\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between pb-2">\n                <CardTitle className="text-sm font-medium text-gray-600">\n                  High Severity\n                </CardTitle>\n                <AlertTriangle className="w-4 h-4 text-orange-500" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold text-orange-600">\n                  {stats.bySeverity.HIGH.toLocaleString()}\n                </div>\n                <p className="text-xs text-gray-500 mt-2">\n                  Security and authorization issues\n                </p>\n              </CardContent>\n            </Card>\n\n            {/* Medium/Low Errors */}\n            <Card>\n              <CardHeader className="flex flex-row items-center justify-between pb-2">\n                <CardTitle className="text-sm font-medium text-gray-600">\n                  Medium/Low\n                </CardTitle>\n                <Info className="w-4 h-4 text-yellow-500" />\n              </CardHeader>\n              <CardContent>\n                <div className="text-2xl font-bold text-yellow-600">\n                  {(stats.bySeverity.MEDIUM + stats.bySeverity.LOW).toLocaleString()}\n                </div>\n                <p className="text-xs text-gray-500 mt-2">\n                  Expected errors and validation issues\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Error Distribution Charts */}\n        {stats && (\n          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">\n            {/* Errors by Code */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Top Error Codes</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className="space-y-3">\n                  {Object.entries(stats.byCode)\n                    .sort(([, a], [, b]) => b - a)\n                    .slice(0, 5)\n                    .map(([code, count]) => (\n                      <div key={code} className="flex items-center justify-between">\n                        <span className="text-sm font-medium text-gray-700">{code}</span>\n                        <div className="flex items-center gap-2">\n                          <div className="w-32 bg-gray-200 rounded-full h-2">\n                            <div\n                              className="bg-blue-600 h-2 rounded-full"\n                              style={{\n                                width: `${(count / stats.total) * 100}%`,\n                              }}\n                            />\n                          </div>\n                          <span className="text-sm text-gray-600 w-12 text-right">\n                            {count}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Errors by Endpoint */}\n            <Card>\n              <CardHeader>\n                <CardTitle>Top Error Endpoints</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className="space-y-3">\n                  {Object.entries(stats.byEndpoint)\n                    .sort(([, a], [, b]) => b - a)\n                    .slice(0, 5)\n                    .map(([endpoint, count]) => (\n                      <div key={endpoint} className="flex items-center justify-between">\n                        <span className="text-sm font-medium text-gray-700 truncate max-w-[200px]">\n                          {endpoint}\n                        </span>\n                        <div className="flex items-center gap-2">\n                          <div className="w-32 bg-gray-200 rounded-full h-2">\n                            <div\n                              className="bg-purple-600 h-2 rounded-full"\n                              style={{\n                                width: `${(count / stats.total) * 100}%`,\n                              }}\n                            />\n                          </div>\n                          <span className="text-sm text-gray-600 w-12 text-right">\n                            {count}\n                          </span>\n                        </div>\n                      </div>\n                    ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Recent Errors Table */}\n        <Card>\n          <CardHeader>\n            <div className="flex items-center justify-between">\n              <CardTitle>Recent Errors</CardTitle>\n              <div className="flex items-center gap-3">\n                {/* Search */}\n                <div className="relative">\n                  <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400" />\n                  <input\n                    type="text"\n                    placeholder="Search errors..."\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                    className="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                  />\n                </div>\n\n                {/* Severity Filter */}\n                <select\n                  value={severityFilter}\n                  onChange={(e) => setSeverityFilter(e.target.value)}\n                  className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"\n                >\n                  <option value="all">All Severities</option>\n                  <option value="CRITICAL">Critical</option>\n                  <option value="HIGH">High</option>\n                  <option value="MEDIUM">Medium</option>\n                  <option value="LOW">Low</option>\n                </select>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            <div className="overflow-x-auto">\n              <table className="w-full">\n                <thead>\n                  <tr className="border-b border-gray-200">\n                    <th className="text-left py-3 px-4 text-sm font-semibold text-gray-700">\n                      Severity\n                    </th>\n                    <th className="text-left py-3 px-4 text-sm font-semibold text-gray-700">\n                      Message\n                    </th>\n                    <th className="text-left py-3 px-4 text-sm font-semibold text-gray-700">\n                      Code\n                    </th>\n                    <th className="text-left py-3 px-4 text-sm font-semibold text-gray-700">\n                      Endpoint\n                    </th>\n                    <th className="text-left py-3 px-4 text-sm font-semibold text-gray-700">\n                      Time\n                    </th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {filteredErrors.map((error) => (\n                    <tr key={error.id} className="border-b border-gray-100 hover:bg-gray-50">\n                      <td className="py-3 px-4">\n                        <SeverityBadge severity={error.severity} />\n                      </td>\n                      <td className="py-3 px-4 text-sm text-gray-900 max-w-md truncate">\n                        {error.message}\n                      </td>\n                      <td className="py-3 px-4">\n                        <code className="text-xs bg-gray-100 px-2 py-1 rounded">\n                          {error.code || \'N/A\'}\n                        </code>\n                      </td>\n                      <td className="py-3 px-4 text-sm text-gray-600 max-w-xs truncate">\n                        {error.endpoint || \'N/A\'}\n                      </td>\n                      <td className="py-3 px-4 text-sm text-gray-600">\n                        {new Date(error.timestamp).toLocaleString()}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n\n              {filteredErrors.length === 0 && (\n                <div className="text-center py-12">\n                  <CheckCircle className="w-12 h-12 text-green-500 mx-auto mb-3" />\n                  <p className="text-gray-600">No errors found</p>\n                  <p className="text-sm text-gray-500 mt-1">\n                    System is running smoothly\n                  </p>\n                </div>\n              )}\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AdminOnly>\n  );\n}\n\n// ============================================================================\n// HELPER COMPONENTS\n// ============================================================================\n\nfunction SeverityBadge({ severity }: { severity: string }) {\n  const config = {\n    CRITICAL: { color: \'bg-red-100 text-red-800\', icon: AlertCircle },\n    HIGH: { color: \'bg-orange-100 text-orange-800\', icon: AlertTriangle },\n    MEDIUM: { color: \'bg-yellow-100 text-yellow-800\', icon: Info },\n    LOW: { color: \'bg-blue-100 text-blue-800\', icon: Info },\n  };\n\n  const { color, icon: Icon } = config[severity as keyof typeof config] || config.LOW;\n\n  return (\n    <span className={`inline-flex items-center gap-1 px-2 py-1 rounded-full text-xs font-medium ${color}`}>\n      <Icon className="w-3 h-3" />\n      {severity}\n    </span>\n  );\n}\n</create-file>\n</function_calls>'}