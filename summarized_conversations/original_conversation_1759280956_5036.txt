{'role': 'assistant', 'content': 'Now let me update the ErrorLogger to integrate with the alert service:\n\n<function_calls>\n<str-replace file_path="medical-analysis-platform/lib/errors/ErrorLogger.ts">\n<old_str>  /**\n   * Send critical error alerts\n   */\n  private async sendCriticalAlert(entry: ErrorLogEntry): Promise<void> {\n    // TODO: Implement alert mechanism (email, Slack, PagerDuty, etc.)\n    console.error(\'ðŸš¨ CRITICAL ALERT:\', {\n      message: entry.message,\n      code: entry.code,\n      endpoint: entry.endpoint,\n      timestamp: entry.timestamp,\n    });\n\n    // Create notification in database\n    try {\n      await prisma.notification.create({\n        data: {\n          type: \'CRITICAL_ERROR\',\n          title: \'Critical System Error\',\n          message: `${entry.message} (${entry.code})`,\n          severity: \'CRITICAL\',\n          metadata: JSON.stringify({\n            errorCode: entry.code,\n            endpoint: entry.endpoint,\n            timestamp: entry.timestamp,\n          }),\n          createdAt: new Date(),\n        },\n      });\n    } catch (error) {\n      console.error(\'Failed to create critical error notification:\', error);\n    }\n  }</old_str>\n<new_str>  /**\n   * Send critical error alerts\n   */\n  private async sendCriticalAlert(entry: ErrorLogEntry): Promise<void> {\n    console.error(\'ðŸš¨ CRITICAL ALERT:\', {\n      message: entry.message,\n      code: entry.code,\n      endpoint: entry.endpoint,\n      timestamp: entry.timestamp,\n    });\n\n    // Import alert service dynamically to avoid circular dependency\n    try {\n      const { errorAlertService } = await import(\'../services/ErrorAlertService\');\n      \n      await errorAlertService.sendCriticalAlert(\n        entry.id || \'unknown\',\n        entry.message,\n        {\n          code: entry.code,\n          endpoint: entry.endpoint,\n          userId: entry.userId,\n          timestamp: entry.timestamp,\n        }\n      );\n    } catch (error) {\n      console.error(\'Failed to send critical error alert:\', error);\n    }\n  }</new_str>\n</str-replace>\n</function_calls>'}