{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/docs/ERROR_HANDLING_QUICK_START.md">\n# Error Handling Quick Start Guide\n\n## Installation\n\n### 1. Install Dependencies\n\n```bash\nnpm install @radix-ui/react-toast class-variance-authority\n```\n\n### 2. Run Database Migration\n\n```bash\ncd medical-analysis-platform\nnpx prisma db push\nnpx prisma generate\n```\n\n### 3. Add Toaster to Root Layout\n\n```tsx\n// app/layout.tsx\nimport { Toaster } from \'@/components/Toaster\';\n\nexport default function RootLayout({ children }) {\n  return (\n    <html>\n      <body>\n        {children}\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n```\n\n---\n\n## Quick Usage Examples\n\n### 1. API Route Error Handling\n\n```typescript\n// app/api/documents/route.ts\nimport { withErrorHandler } from \'@/lib/errors/errorHandler\';\nimport { NotFoundError } from \'@/lib/errors/AppError\';\n\nexport const GET = withErrorHandler(async (req) => {\n  const document = await getDocument(id);\n  \n  if (!document) {\n    throw new NotFoundError(\'Document\');\n  }\n  \n  return NextResponse.json(document);\n});\n```\n\n### 2. Client-Side Error Handling\n\n```typescript\nimport { error, success } from \'@/hooks/useToast\';\n\nasync function uploadFile(file: File) {\n  try {\n    const response = await fetch(\'/api/upload\', {\n      method: \'POST\',\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error(\'Upload failed\');\n    }\n\n    success(\'Upload successful\', \'Your file has been uploaded\');\n  } catch (err) {\n    error(\'Upload failed\', err.message);\n  }\n}\n```\n\n### 3. Error Boundary\n\n```tsx\nimport { PageErrorBoundary } from \'@/components/ErrorBoundary\';\n\nexport default function MyPage() {\n  return (\n    <PageErrorBoundary>\n      <YourContent />\n    </PageErrorBoundary>\n  );\n}\n```\n\n### 4. Custom Error Classes\n\n```typescript\nimport { ValidationError, NotFoundError } from \'@/lib/errors/AppError\';\n\n// Validation error\nif (!email) {\n  throw new ValidationError(\'Email is required\', { field: \'email\' });\n}\n\n// Not found error\nif (!user) {\n  throw new NotFoundError(\'User\', { id: userId });\n}\n```\n\n---\n\n## Common Error Types\n\n### Authentication Errors (401)\n```typescript\nimport { AuthenticationError } from \'@/lib/errors/AppError\';\n\nthrow new AuthenticationError(\'Invalid credentials\');\n```\n\n### Authorization Errors (403)\n```typescript\nimport { AuthorizationError } from \'@/lib/errors/AppError\';\n\nthrow new AuthorizationError(\'Access denied\');\n```\n\n### Validation Errors (400)\n```typescript\nimport { ValidationError } from \'@/lib/errors/AppError\';\n\nthrow new ValidationError(\'Invalid input\', {\n  field: \'email\',\n  value: email,\n});\n```\n\n### Not Found Errors (404)\n```typescript\nimport { NotFoundError } from \'@/lib/errors/AppError\';\n\nthrow new NotFoundError(\'Document\', { id: documentId });\n```\n\n### Database Errors (500)\n```typescript\nimport { DatabaseError } from \'@/lib/errors/AppError\';\n\nthrow new DatabaseError(\'Failed to save document\');\n```\n\n---\n\n## Toast Notifications\n\n### Success\n```typescript\nimport { success } from \'@/hooks/useToast\';\n\nsuccess(\'Success!\', \'Operation completed successfully\');\n```\n\n### Error\n```typescript\nimport { error } from \'@/hooks/useToast\';\n\nerror(\'Error!\', \'Something went wrong\');\n```\n\n### Warning\n```typescript\nimport { warning } from \'@/hooks/useToast\';\n\nwarning(\'Warning!\', \'Please review your input\');\n```\n\n### Info\n```typescript\nimport { info } from \'@/hooks/useToast\';\n\ninfo(\'Info\', \'New feature available\');\n```\n\n---\n\n## Error Logging\n\n### Manual Logging\n```typescript\nimport { errorLogger } from \'@/lib/errors/ErrorLogger\';\n\nawait errorLogger.logError(error, {\n  userId: user.id,\n  endpoint: \'/api/documents\',\n  method: \'POST\',\n});\n```\n\n### View Error Stats\n```typescript\nconst stats = await errorLogger.getErrorStats(24); // Last 24 hours\nconsole.log(stats.total); // Total errors\nconsole.log(stats.bySeverity); // Errors by severity\n```\n\n---\n\n## Retry Logic\n\n```typescript\nimport { retryWithBackoff } from \'@/lib/utils/errorUtils\';\n\nconst result = await retryWithBackoff(\n  async () => {\n    return await fetch(\'/api/data\');\n  },\n  3, // max retries\n  1000 // base delay (ms)\n);\n```\n\n---\n\n## Error Response Format\n\nAll API errors return this format:\n\n```json\n{\n  "error": {\n    "message": "Document not found",\n    "code": "NOT_FOUND",\n    "statusCode": 404,\n    "details": { "id": "doc-123" },\n    "timestamp": "2025-01-30T12:34:56.789Z",\n    "requestId": "req_1234567890_abc123"\n  }\n}\n```\n\n---\n\n## Testing\n\n### Test Error Handling\n```typescript\ndescribe(\'Error Handling\', () => {\n  it(\'should return 404 for non-existent resource\', async () => {\n    const response = await fetch(\'/api/documents/invalid-id\');\n    expect(response.status).toBe(404);\n    \n    const data = await response.json();\n    expect(data.error.code).toBe(\'NOT_FOUND\');\n  });\n});\n```\n\n---\n\n## Troubleshooting\n\n### Errors Not Being Logged\n1. Check database connection\n2. Verify ErrorLog table exists\n3. Run `npx prisma db push`\n\n### Toast Not Showing\n1. Verify Toaster is in root layout\n2. Check for CSS conflicts\n3. Ensure toast hook is imported correctly\n\n### Error Boundary Not Working\n1. Ensure component has \'use client\'\n2. Verify error boundary wraps component\n3. Check error is thrown during render\n\n---\n\n## Next Steps\n\n1. Read full documentation: `docs/ERROR_HANDLING.md`\n2. Review error classes: `lib/errors/AppError.ts`\n3. Check examples in API routes\n4. Set up error monitoring dashboard\n\n---\n\n## Summary\n\n✅ **Structured errors** - Use custom error classes  \n✅ **Automatic logging** - All errors logged to database  \n✅ **User feedback** - Toast notifications for errors  \n✅ **Error boundaries** - Catch React component errors  \n✅ **Retry logic** - Automatic retries for transient failures  \n✅ **Production ready** - Proper error messages and status codes  \n\nFor more details, see `docs/ERROR_HANDLING.md`\n</create-file>\n</function_calls>'}