{'role': 'assistant', 'content': 'Now let me create comprehensive documentation for the repository system and update the todo:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/REPOSITORY_ARCHITECTURE.md">\n# HoloVitals Repository Architecture\n\n## Overview\n\nHoloVitals uses a sophisticated repository architecture that separates concerns and ensures HIPAA compliance while maintaining high performance and accuracy. The system consists of three core repositories coordinated by a central coordinator.\n\n## Core Repositories\n\n### 1. AI Analysis Repository\n\n**Purpose:** Actively analyzes data and seeks the missing pieces of the "puzzle" that need to be analyzed.\n\n**Key Responsibilities:**\n- Store analysis tasks and their status\n- Track what data is being analyzed\n- Identify missing pieces needed for complete analysis\n- Manage analysis queue and priorities\n- Store analysis results and insights\n\n**Data Stored:**\n- Patient ID (anonymized)\n- Document IDs being analyzed\n- Query/question being asked\n- Context from Context Cache\n- Optimized prompt from Prompt Optimization\n- Analysis status and results\n- Missing data pieces\n- Priority scores\n\n**Key Features:**\n- **Task Queue Management:** Prioritizes urgent analyses\n- **Missing Piece Detection:** Identifies what data is needed\n- **Status Tracking:** Monitors analysis progress\n- **Result Storage:** Maintains analysis history\n- **Performance Metrics:** Tracks processing times and success rates\n\n**Example Usage:**\n```typescript\n// Create analysis task\nconst task = await aiAnalysisRepository.createTask(\n  patientId,\n  [\'doc1\', \'doc2\'],\n  \'What are the abnormal values in my bloodwork?\'\n);\n\n// Check for missing pieces\nconst missing = await aiAnalysisRepository.identifyMissingPieces(task.id);\n\n// Complete analysis\nawait aiAnalysisRepository.completeTask(task.id, result);\n```\n\n### 2. AI Prompt Optimization Repository\n\n**Purpose:** Optimizes current and future prompts to ensure relevance, cost-efficiency, and performance.\n\n**Key Responsibilities:**\n- Store and manage prompt templates\n- Optimize prompts for token efficiency\n- Track prompt performance metrics\n- Suggest best prompts for specific use cases\n- Continuously improve prompts based on feedback\n\n**Data Stored:**\n- Prompt templates by category\n- Optimization metrics (tokens, cost, performance)\n- Performance history\n- Variable definitions\n- Version history\n\n**Key Features:**\n- **Token Optimization:** Reduces unnecessary verbosity\n- **Performance Tracking:** Monitors success rates and response times\n- **Cost Management:** Minimizes API costs\n- **Template Versioning:** Maintains prompt evolution\n- **Category-Based Selection:** Chooses best prompt for task\n\n**Optimization Metrics:**\n- Average token count\n- Average response time\n- Success rate\n- Cost per execution\n- Relevance score\n- Clarity score\n- Efficiency score\n- Overall optimization score\n\n**Example Usage:**\n```typescript\n// Get best prompt for analysis type\nconst prompt = await aiPromptOptimizationRepository.getBestPrompt(\'trend_analysis\');\n\n// Optimize existing prompt\nconst optimized = await aiPromptOptimizationRepository.optimizePrompt({\n  promptId: prompt.id,\n  context: \'bloodwork analysis\',\n  targetMetrics: { maxTokens: 1000 }\n});\n\n// Record performance\nawait aiPromptOptimizationRepository.recordPerformance(prompt.id, {\n  timestamp: new Date(),\n  tokensUsed: 850,\n  responseTime: 2500,\n  success: true,\n  userFeedback: 5\n});\n```\n\n### 3. AI Context Cache Repository\n\n**Purpose:** Stores and provides necessary context while maintaining HIPAA compliance by removing all PII/PHI.\n\n**Key Responsibilities:**\n- Store sanitized patient context\n- Sort context by importance\n- Provide relevant context for analysis\n- Automatically remove PII/PHI\n- Reanalyze importance after new data\n- Manage cache size and expiration\n\n**Data Stored:**\n- Sanitized medical history\n- Test results (de-identified)\n- Medications and allergies (anonymized)\n- Trends and correlations\n- Clinical notes (sanitized)\n- Importance scores\n\n**Key Features:**\n- **HIPAA Compliance:** Automatic PII/PHI removal\n- **Importance Scoring:** Ranks context by relevance\n- **Automatic Reanalysis:** Updates importance scores\n- **Smart Caching:** Evicts least important entries\n- **Context Retrieval:** Provides sorted, relevant context\n\n**Importance Factors:**\n- **Recency:** How recent is the data (25% weight)\n- **Frequency:** How often is it accessed (20% weight)\n- **Relevance:** How relevant to current analysis (30% weight)\n- **Completeness:** How complete is the data (15% weight)\n- **Accuracy:** Data quality score (10% weight)\n\n**HIPAA Sanitization:**\nRemoves all:\n- Names (first, last, full)\n- Social Security Numbers\n- Email addresses\n- Phone numbers\n- Addresses\n- Dates of birth\n- Medical record numbers\n- Account numbers\n- Biometric identifiers\n- Photos and images\n- IP addresses\n- Any other PII/PHI\n\n**Example Usage:**\n```typescript\n// Add patient data (automatically sanitized)\nawait aiContextCacheRepository.addPatientContext(\n  patientId,\n  \'test_results\',\n  rawBloodworkData,\n  { source: documentId, tags: [\'bloodwork\'] }\n);\n\n// Get context for analysis\nconst context = await aiContextCacheRepository.getContextForAnalysis(\n  patientId,\n  \'bloodwork\',\n  20 // max entries\n);\n\n// Reanalyze importance\nawait aiContextCacheRepository.reanalyzeImportance();\n```\n\n## Repository Coordinator\n\n**Purpose:** Orchestrates all three repositories to provide seamless analysis workflow.\n\n**Key Responsibilities:**\n- Initialize all repositories\n- Coordinate data flow between repositories\n- Submit and execute analysis requests\n- Manage system health\n- Update context with new results\n\n**Workflow:**\n\n```\nUser Request\n     ↓\nRepository Coordinator\n     ↓\n1. Gather Context (Context Cache Repository)\n     ↓\n2. Get Optimized Prompt (Prompt Optimization Repository)\n     ↓\n3. Create Analysis Task (Analysis Repository)\n     ↓\n4. Execute Analysis\n     ↓\n5. Update Context with Results\n     ↓\nReturn Results to User\n```\n\n**Example Usage:**\n```typescript\n// Initialize system\nawait repositoryCoordinator.initialize();\n\n// Submit analysis\nconst response = await repositoryCoordinator.submitAnalysis({\n  patientId: \'patient123\',\n  documentIds: [\'doc1\', \'doc2\'],\n  query: \'What are my abnormal values?\',\n  analysisType: \'bloodwork\'\n});\n\n// Execute analysis\nconst result = await repositoryCoordinator.executeAnalysis(response.taskId);\n\n// Check system health\nconst health = await repositoryCoordinator.getSystemHealth();\n```\n\n## Data Flow Diagram\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    User Request                              │\n└─────────────────────────────────────────────────────────────┘\n                            ↓\n┌─────────────────────────────────────────────────────────────┐\n│              Repository Coordinator                          │\n│  • Orchestrates all repositories                            │\n│  • Manages data flow                                        │\n│  • Ensures HIPAA compliance                                 │\n└─────────────────────────────────────────────────────────────┘\n         ↓                    ↓                    ↓\n┌──────────────────┐ ┌──────────────────┐ ┌──────────────────┐\n│  Context Cache   │ │ Prompt Optimizer │ │ Analysis Repo    │\n│  Repository      │ │ Repository       │ │                  │\n│                  │ │                  │ │                  │\n│ • Sanitized      │ │ • Optimized      │ │ • Active         │\n│   Context        │ │   Prompts        │ │   Analysis       │\n│ • Importance     │ │ • Performance    │ │ • Task Queue     │\n│   Scores         │ │   Metrics        │ │ • Results        │\n│ • HIPAA          │ │ • Cost           │ │ • Missing        │\n│   Compliant      │ │   Efficiency     │ │   Pieces         │\n└──────────────────┘ └──────────────────┘ └──────────────────┘\n         ↓                    ↓                    ↓\n┌─────────────────────────────────────────────────────────────┐\n│                    AI Analysis Engine                        │\n│              (OpenAI GPT-4 Integration)                      │\n└─────────────────────────────────────────────────────────────┘\n                            ↓\n┌─────────────────────────────────────────────────────────────┐\n│                    Analysis Results                          │\n│  • Insights • Recommendations • Flags • Sources             │\n└─────────────────────────────────────────────────────────────┘\n```\n\n## HIPAA Compliance\n\n### Sanitization Process\n\n1. **Input Validation:**\n   - All data entering Context Cache is sanitized\n   - PII/PHI fields are identified and removed\n   - Patterns (SSN, phone, email) are detected and redacted\n\n2. **Storage:**\n   - Only sanitized data is stored in cache\n   - Patient IDs are anonymized/hashed\n   - No direct identifiers remain\n\n3. **Validation:**\n   - Data is validated before use\n   - Compliance checks run automatically\n   - Issues are flagged and logged\n\n4. **Audit:**\n   - All sanitization events are logged\n   - Compliance metrics are tracked\n   - Regular audits ensure ongoing compliance\n\n### Sanitization Example\n\n**Before Sanitization:**\n```json\n{\n  "patientName": "John Doe",\n  "dateOfBirth": "1980-05-15",\n  "ssn": "123-45-6789",\n  "email": "john.doe@email.com",\n  "phone": "555-123-4567",\n  "address": "123 Main St, City, State 12345",\n  "testResults": {\n    "hemoglobin": 14.5,\n    "wbc": 7.2\n  }\n}\n```\n\n**After Sanitization:**\n```json\n{\n  "testResults": {\n    "hemoglobin": 14.5,\n    "wbc": 7.2\n  }\n}\n```\n\n**Sanitization Info:**\n```json\n{\n  "removedFields": [\n    "patientName",\n    "dateOfBirth",\n    "ssn",\n    "email",\n    "phone",\n    "address"\n  ],\n  "sanitizationLevel": "full",\n  "timestamp": "2025-09-30T12:00:00Z"\n}\n```\n\n## Performance Optimization\n\n### Context Cache Optimization\n\n1. **Importance-Based Caching:**\n   - High-importance items stay in cache longer\n   - Low-importance items are evicted first\n   - Automatic reanalysis updates scores\n\n2. **Access Patterns:**\n   - Frequently accessed items get higher scores\n   - Recent items are prioritized\n   - Stale data is automatically removed\n\n3. **Size Management:**\n   - Maximum cache size enforced\n   - Automatic eviction when full\n   - Configurable TTL (Time To Live)\n\n### Prompt Optimization\n\n1. **Token Reduction:**\n   - Remove redundant phrases\n   - Simplify verbose instructions\n   - Maintain clarity while reducing length\n\n2. **Performance Tracking:**\n   - Monitor token usage\n   - Track response times\n   - Measure success rates\n\n3. **Continuous Improvement:**\n   - Learn from feedback\n   - Update templates based on performance\n   - Version control for prompts\n\n## Monitoring & Health\n\n### Health Metrics\n\nEach repository provides health metrics:\n\n```typescript\ninterface RepositoryHealth {\n  status: \'healthy\' | \'degraded\' | \'unhealthy\';\n  lastCheck: Date;\n  metrics: {\n    itemCount: number;\n    storageUsed: number;\n    averageResponseTime: number;\n  };\n  issues?: string[];\n}\n```\n\n### System Health\n\nOverall system health aggregates all repositories:\n\n```typescript\nconst health = await repositoryCoordinator.getSystemHealth();\n// Returns:\n// {\n//   overall: \'healthy\',\n//   repositories: {\n//     analysis: { status: \'healthy\', ... },\n//     promptOptimization: { status: \'healthy\', ... },\n//     contextCache: { status: \'healthy\', ... }\n//   },\n//   timestamp: Date\n// }\n```\n\n## Best Practices\n\n### 1. Always Use Coordinator\n\n```typescript\n// ✅ Good\nawait repositoryCoordinator.submitAnalysis(request);\n\n// ❌ Bad - Don\'t access repositories directly\nawait aiAnalysisRepository.createTask(...);\n```\n\n### 2. Check System Health\n\n```typescript\n// Regular health checks\nconst health = await repositoryCoordinator.getSystemHealth();\nif (health.overall !== \'healthy\') {\n  console.warn(\'System health degraded:\', health);\n}\n```\n\n### 3. Handle Missing Pieces\n\n```typescript\nconst response = await repositoryCoordinator.submitAnalysis(request);\nif (response.missingPieces && response.missingPieces.length > 0) {\n  // Inform user about missing data\n  console.log(\'Missing:\', response.missingPieces);\n}\n```\n\n### 4. Monitor Performance\n\n```typescript\n// Track prompt performance\nawait aiPromptOptimizationRepository.recordPerformance(promptId, {\n  timestamp: new Date(),\n  tokensUsed: result.tokensUsed,\n  responseTime: result.processingTime,\n  success: true,\n  userFeedback: 5\n});\n```\n\n## Configuration\n\n### Environment Variables\n\n```env\n# Context Cache Configuration\nCONTEXT_CACHE_MAX_SIZE=10000\nCONTEXT_CACHE_TTL=86400000  # 24 hours in ms\nCONTEXT_REANALYSIS_INTERVAL=3600000  # 1 hour in ms\n\n# Prompt Optimization Configuration\nPROMPT_OPTIMIZATION_ENABLED=true\nPROMPT_MAX_TOKENS=2000\n\n# Analysis Configuration\nANALYSIS_QUEUE_MAX_SIZE=1000\nANALYSIS_PRIORITY_THRESHOLD=7\n```\n\n## Future Enhancements\n\n### Planned Features\n\n1. **Vector Embeddings:**\n   - Semantic similarity search\n   - Better context matching\n   - Improved relevance scoring\n\n2. **Machine Learning:**\n   - Predictive importance scoring\n   - Automated prompt optimization\n   - Pattern recognition\n\n3. **Advanced Analytics:**\n   - Usage patterns analysis\n   - Cost optimization insights\n   - Performance predictions\n\n4. **Multi-Tenant Support:**\n   - Organization-level caching\n   - Shared prompt templates\n   - Aggregated analytics\n\n## Conclusion\n\nThe HoloVitals repository architecture provides a robust, HIPAA-compliant, and efficient system for medical document analysis. By separating concerns into three specialized repositories and coordinating them centrally, the system maintains high performance while ensuring data privacy and cost efficiency.\n</create-file>\n</function_calls>'}