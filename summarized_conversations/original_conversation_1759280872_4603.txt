{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="components/ui/RoleGuard.tsx">\n/**\n * Role Guard Component\n * Conditionally renders content based on user role and permissions\n */\n\n\'use client\';\n\nimport { useSession } from \'next-auth/react\';\nimport { UserRole, Permission } from \'@/lib/types/rbac\';\nimport { accessControl } from \'@/lib/services/AccessControlService\';\n\n// ============================================================================\n// ROLE GUARD COMPONENT\n// ============================================================================\n\ninterface RoleGuardProps {\n  children: React.ReactNode;\n  requiredRole?: UserRole;\n  requiredPermission?: Permission;\n  requiredPermissions?: Permission[];\n  requireAll?: boolean; // If true, requires ALL permissions; if false, requires ANY\n  fallback?: React.ReactNode;\n  showFallback?: boolean;\n}\n\nexport function RoleGuard({\n  children,\n  requiredRole,\n  requiredPermission,\n  requiredPermissions,\n  requireAll = true,\n  fallback = null,\n  showFallback = false,\n}: RoleGuardProps) {\n  const { data: session, status } = useSession();\n\n  // Loading state\n  if (status === \'loading\') {\n    return showFallback ? <>{fallback}</> : null;\n  }\n\n  // Not authenticated\n  if (!session || !session.user) {\n    return showFallback ? <>{fallback}</> : null;\n  }\n\n  const userRole = session.user.role as UserRole;\n\n  // Check role requirement\n  if (requiredRole) {\n    if (!accessControl.hasRoleLevel(userRole, requiredRole)) {\n      return showFallback ? <>{fallback}</> : null;\n    }\n  }\n\n  // Check single permission\n  if (requiredPermission) {\n    if (!accessControl.hasPermission(userRole, requiredPermission)) {\n      return showFallback ? <>{fallback}</> : null;\n    }\n  }\n\n  // Check multiple permissions\n  if (requiredPermissions && requiredPermissions.length > 0) {\n    const hasPermissions = requireAll\n      ? accessControl.hasAllPermissions(userRole, requiredPermissions)\n      : accessControl.hasAnyPermission(userRole, requiredPermissions);\n\n    if (!hasPermissions) {\n      return showFallback ? <>{fallback}</> : null;\n    }\n  }\n\n  // User has required access\n  return <>{children}</>;\n}\n\n// ============================================================================\n// CONVENIENCE COMPONENTS\n// ============================================================================\n\n/**\n * Show content only to OWNER\n */\nexport function OwnerOnly({\n  children,\n  fallback,\n}: {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  return (\n    <RoleGuard requiredRole={UserRole.OWNER} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\n/**\n * Show content only to ADMIN or higher\n */\nexport function AdminOnly({\n  children,\n  fallback,\n}: {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  return (\n    <RoleGuard requiredRole={UserRole.ADMIN} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\n/**\n * Show content only to DOCTOR or higher\n */\nexport function DoctorOnly({\n  children,\n  fallback,\n}: {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  return (\n    <RoleGuard requiredRole={UserRole.DOCTOR} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\n/**\n * Show content to authenticated users\n */\nexport function AuthenticatedOnly({\n  children,\n  fallback,\n}: {\n  children: React.ReactNode;\n  fallback?: React.ReactNode;\n}) {\n  const { data: session, status } = useSession();\n\n  if (status === \'loading\') {\n    return fallback ? <>{fallback}</> : null;\n  }\n\n  if (!session) {\n    return fallback ? <>{fallback}</> : null;\n  }\n\n  return <>{children}</>;\n}\n\n/**\n * Show content based on permission\n */\nexport function HasPermission({\n  children,\n  permission,\n  fallback,\n}: {\n  children: React.ReactNode;\n  permission: Permission;\n  fallback?: React.ReactNode;\n}) {\n  return (\n    <RoleGuard requiredPermission={permission} fallback={fallback}>\n      {children}\n    </RoleGuard>\n  );\n}\n\n/**\n * Show content if user has ANY of the permissions\n */\nexport function HasAnyPermission({\n  children,\n  permissions,\n  fallback,\n}: {\n  children: React.ReactNode;\n  permissions: Permission[];\n  fallback?: React.ReactNode;\n}) {\n  return (\n    <RoleGuard\n      requiredPermissions={permissions}\n      requireAll={false}\n      fallback={fallback}\n    >\n      {children}\n    </RoleGuard>\n  );\n}\n\n/**\n * Show content if user has ALL of the permissions\n */\nexport function HasAllPermissions({\n  children,\n  permissions,\n  fallback,\n}: {\n  children: React.ReactNode;\n  permissions: Permission[];\n  fallback?: React.ReactNode;\n}) {\n  return (\n    <RoleGuard\n      requiredPermissions={permissions}\n      requireAll={true}\n      fallback={fallback}\n    >\n      {children}\n    </RoleGuard>\n  );\n}\n\n// ============================================================================\n// HOOK FOR PROGRAMMATIC ACCESS\n// ============================================================================\n\nexport function useRoleGuard() {\n  const { data: session } = useSession();\n\n  const userRole = session?.user?.role as UserRole | undefined;\n\n  return {\n    isOwner: userRole === UserRole.OWNER,\n    isAdmin: userRole === UserRole.ADMIN || userRole === UserRole.OWNER,\n    isDoctor: userRole === UserRole.DOCTOR || userRole === UserRole.ADMIN || userRole === UserRole.OWNER,\n    isPatient: userRole === UserRole.PATIENT,\n    role: userRole,\n    hasRole: (requiredRole: UserRole) => {\n      if (!userRole) return false;\n      return accessControl.hasRoleLevel(userRole, requiredRole);\n    },\n    hasPermission: (permission: Permission) => {\n      if (!userRole) return false;\n      return accessControl.hasPermission(userRole, permission);\n    },\n    hasAnyPermission: (permissions: Permission[]) => {\n      if (!userRole) return false;\n      return accessControl.hasAnyPermission(userRole, permissions);\n    },\n    hasAllPermissions: (permissions: Permission[]) => {\n      if (!userRole) return false;\n      return accessControl.hasAllPermissions(userRole, permissions);\n    },\n  };\n}\n</create-file>\n</function_calls>'}