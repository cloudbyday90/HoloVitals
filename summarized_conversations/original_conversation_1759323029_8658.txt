{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="docs/MEDICAL_STANDARDIZATION_API.md">\n# Medical Standardization Repository API Reference\n\n## Overview\n\nThe Medical Standardization Repository API provides endpoints for standardizing medical data using LOINC codes, converting units, validating lab results, and accessing reference ranges.\n\n## Base URL\n\n```\n/api/medical-standards\n```\n\n## Authentication\n\nAll endpoints require authentication. Include the user\'s JWT token in the Authorization header:\n\n```\nAuthorization: Bearer <token>\n```\n\n---\n\n## Endpoints\n\n### 1. Search LOINC Codes\n\nSearch for LOINC codes by various criteria.\n\n**Endpoint:** `GET /api/medical-standards/loinc`\n\n**Query Parameters:**\n- `query` (string, optional): Search term (searches component, commonName, shortName)\n- `category` (string, optional): LOINC category (LABORATORY, CLINICAL, SURVEY, etc.)\n- `componentType` (string, optional): Component type (CHEMISTRY, HEMATOLOGY, etc.)\n- `component` (string, optional): Component name\n- `system` (string, optional): System (e.g., "Ser/Plas", "Bld")\n- `limit` (number, optional): Results per page (default: 50)\n- `offset` (number, optional): Pagination offset (default: 0)\n\n**Example Request:**\n```bash\nGET /api/medical-standards/loinc?query=glucose&limit=10\n```\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "codes": [\n      {\n        "id": "clxxx",\n        "loincNumber": "2345-7",\n        "component": "Glucose",\n        "property": "MCnc",\n        "timeAspect": "Pt",\n        "system": "Ser/Plas",\n        "scale": "Qn",\n        "category": "LABORATORY",\n        "componentType": "CHEMISTRY",\n        "commonName": "Glucose",\n        "shortName": "Glucose SerPl",\n        "longName": "Glucose [Mass/volume] in Serum or Plasma",\n        "relatedNames": ["Blood Sugar", "Blood Glucose"],\n        "status": "ACTIVE",\n        "units": [\n          {\n            "id": "clyyy",\n            "unit": "mg/dL",\n            "ucumCode": "mg/dL",\n            "unitSystem": "CONVENTIONAL",\n            "isPrimary": true\n          },\n          {\n            "id": "clzzz",\n            "unit": "mmol/L",\n            "ucumCode": "mmol/L",\n            "unitSystem": "SI",\n            "conversionFactor": 0.0555,\n            "isPrimary": false\n          }\n        ],\n        "referenceRanges": [\n          {\n            "id": "clwww",\n            "type": "NORMAL",\n            "lowValue": 70,\n            "highValue": 100,\n            "unit": "mg/dL",\n            "gender": "ALL",\n            "source": "Mayo Clinic"\n          }\n        ]\n      }\n    ],\n    "total": 1\n  }\n}\n```\n\n---\n\n### 2. Get LOINC Code Details\n\nGet detailed information for a specific LOINC code.\n\n**Endpoint:** `GET /api/medical-standards/loinc/:loincNumber`\n\n**Path Parameters:**\n- `loincNumber` (string): LOINC code (e.g., "2345-7")\n\n**Example Request:**\n```bash\nGET /api/medical-standards/loinc/2345-7\n```\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "id": "clxxx",\n    "loincNumber": "2345-7",\n    "component": "Glucose",\n    "commonName": "Glucose",\n    "longName": "Glucose [Mass/volume] in Serum or Plasma",\n    "category": "LABORATORY",\n    "componentType": "CHEMISTRY",\n    "units": [...],\n    "referenceRanges": [...]\n  }\n}\n```\n\n---\n\n### 3. Standardize Lab Result\n\nStandardize a single lab result using LOINC codes.\n\n**Endpoint:** `POST /api/medical-standards/standardize`\n\n**Request Body:**\n```json\n{\n  "loincNumber": "2345-7",\n  "value": 100,\n  "unit": "mg/dL",\n  "patientAge": 45,\n  "patientGender": "MALE",\n  "condition": "Fasting"\n}\n```\n\n**Fields:**\n- `loincNumber` (string, required): LOINC code\n- `value` (number, required): Lab result value\n- `unit` (string, required): Unit of measurement\n- `patientAge` (number, optional): Patient age in years\n- `patientGender` (string, optional): MALE, FEMALE, OTHER\n- `condition` (string, optional): Special condition (e.g., "Fasting", "Pregnant")\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "originalValue": 100,\n    "standardizedValue": 100,\n    "loincCode": {\n      "loincNumber": "2345-7",\n      "commonName": "Glucose",\n      "longName": "Glucose [Mass/volume] in Serum or Plasma"\n    },\n    "unit": {\n      "unit": "mg/dL",\n      "ucumCode": "mg/dL",\n      "unitSystem": "CONVENTIONAL",\n      "isPrimary": true\n    },\n    "referenceRange": {\n      "type": "NORMAL",\n      "lowValue": 70,\n      "highValue": 100,\n      "unit": "mg/dL",\n      "gender": "ALL"\n    },\n    "isWithinRange": true,\n    "interpretation": "Within normal range",\n    "flags": []\n  }\n}\n```\n\n**Interpretation Values:**\n- `"Within normal range"`: Value is normal\n- `"Below normal range"`: Value is low\n- `"Above normal range"`: Value is high\n- `"Critically low value"`: Value is critically low\n- `"Critically high value"`: Value is critically high\n\n**Flags:**\n- `"LOW"`: Below normal range\n- `"HIGH"`: Above normal range\n- `"CRITICAL"`: Critically abnormal\n\n---\n\n### 4. Batch Standardize Lab Results\n\nStandardize multiple lab results at once.\n\n**Endpoint:** `POST /api/medical-standards/standardize/batch`\n\n**Request Body:**\n```json\n{\n  "results": [\n    {\n      "loincNumber": "2345-7",\n      "value": 100,\n      "unit": "mg/dL",\n      "patientAge": 45,\n      "patientGender": "MALE"\n    },\n    {\n      "loincNumber": "2951-2",\n      "value": 140,\n      "unit": "mEq/L",\n      "patientAge": 45,\n      "patientGender": "MALE"\n    }\n  ]\n}\n```\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "results": [\n      {\n        "originalValue": 100,\n        "standardizedValue": 100,\n        "loincCode": {...},\n        "unit": {...},\n        "referenceRange": {...},\n        "isWithinRange": true,\n        "interpretation": "Within normal range",\n        "flags": []\n      },\n      {\n        "originalValue": 140,\n        "standardizedValue": 140,\n        "loincCode": {...},\n        "unit": {...},\n        "referenceRange": {...},\n        "isWithinRange": true,\n        "interpretation": "Within normal range",\n        "flags": []\n      }\n    ],\n    "total": 2,\n    "successful": 2,\n    "failed": 0\n  }\n}\n```\n\n---\n\n### 5. Validate Lab Result\n\nValidate a lab result against LOINC standards.\n\n**Endpoint:** `POST /api/medical-standards/validate`\n\n**Request Body:**\n```json\n{\n  "loincNumber": "2345-7",\n  "testName": "Glucose",\n  "value": 100,\n  "unit": "mg/dL",\n  "patientAge": 45,\n  "patientGender": "MALE"\n}\n```\n\n**Fields:**\n- `loincNumber` (string, optional): LOINC code (either this or testName required)\n- `testName` (string, optional): Test name (either this or loincNumber required)\n- `value` (any, required): Lab result value\n- `unit` (string, optional): Unit of measurement\n- `patientAge` (number, optional): Patient age in years\n- `patientGender` (string, optional): MALE, FEMALE, OTHER\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "isValid": true,\n    "loincCode": {\n      "loincNumber": "2345-7",\n      "commonName": "Glucose",\n      "longName": "Glucose [Mass/volume] in Serum or Plasma"\n    },\n    "errors": [],\n    "warnings": [],\n    "suggestions": []\n  }\n}\n```\n\n**Validation Errors:**\n- Missing LOINC code\n- Invalid unit for test\n- Invalid value type (e.g., text for quantitative test)\n\n**Validation Warnings:**\n- Non-standard unit\n- Multiple LOINC codes found for test name\n\n---\n\n### 6. Convert Units\n\nConvert between different units for a lab result.\n\n**Endpoint:** `POST /api/medical-standards/convert`\n\n**Request Body:**\n```json\n{\n  "loincNumber": "2345-7",\n  "value": 100,\n  "fromUnit": "mg/dL",\n  "toUnit": "mmol/L"\n}\n```\n\n**Fields:**\n- `loincNumber` (string, required): LOINC code\n- `value` (number, required): Value to convert\n- `fromUnit` (string, required): Source unit\n- `toUnit` (string, required): Target unit\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "originalValue": 100,\n    "originalUnit": "mg/dL",\n    "convertedValue": 5.55,\n    "convertedUnit": "mmol/L"\n  }\n}\n```\n\n---\n\n### 7. Get Popular LOINC Codes\n\nGet popular LOINC codes by category.\n\n**Endpoint:** `GET /api/medical-standards/popular`\n\n**Query Parameters:**\n- `category` (string, optional): LOINC category (default: LABORATORY)\n- `limit` (number, optional): Number of codes to return (default: 20)\n\n**Example Request:**\n```bash\nGET /api/medical-standards/popular?category=LABORATORY&limit=10\n```\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "category": "LABORATORY",\n    "codes": [\n      {\n        "loincNumber": "2345-7",\n        "commonName": "Glucose",\n        "componentType": "CHEMISTRY"\n      },\n      {\n        "loincNumber": "2951-2",\n        "commonName": "Sodium",\n        "componentType": "CHEMISTRY"\n      }\n    ],\n    "total": 10\n  }\n}\n```\n\n---\n\n### 8. Get Statistics\n\nGet statistics about the LOINC database.\n\n**Endpoint:** `GET /api/medical-standards/stats`\n\n**Example Request:**\n```bash\nGET /api/medical-standards/stats\n```\n\n**Example Response:**\n```json\n{\n  "success": true,\n  "data": {\n    "totalCodes": 54,\n    "activeCodesByCategory": {\n      "LABORATORY": 54,\n      "CLINICAL": 0,\n      "SURVEY": 0\n    },\n    "activeCodesByType": {\n      "CHEMISTRY": 30,\n      "HEMATOLOGY": 8,\n      "MICROBIOLOGY": 0\n    },\n    "totalUnits": 108,\n    "totalReferenceRanges": 72,\n    "totalMappings": 0\n  }\n}\n```\n\n---\n\n## Integration Examples\n\n### Example 1: Standardize Lab Results from EHR\n\n```typescript\n// In EHR sync service\nasync function syncLabResults(ehrResults: any[]) {\n  // Prepare batch request\n  const results = ehrResults.map(result => ({\n    loincNumber: mapEHRCodeToLOINC(result.code),\n    value: result.value,\n    unit: result.unit,\n    patientAge: patient.age,\n    patientGender: patient.gender,\n  }));\n\n  // Batch standardize\n  const response = await fetch(\'/api/medical-standards/standardize/batch\', {\n    method: \'POST\',\n    headers: {\n      \'Content-Type\': \'application/json\',\n      \'Authorization\': `Bearer ${token}`,\n    },\n    body: JSON.stringify({ results }),\n  });\n\n  const { data } = await response.json();\n  \n  // Store standardized results\n  for (const standardized of data.results) {\n    await storeLabResult({\n      originalValue: standardized.originalValue,\n      standardizedValue: standardized.standardizedValue,\n      unit: standardized.unit.unit,\n      interpretation: standardized.interpretation,\n      flags: standardized.flags,\n      isAbnormal: !standardized.isWithinRange,\n    });\n  }\n}\n```\n\n### Example 2: Display Lab Results with Interpretation\n\n```typescript\n// In UI component\nasync function displayLabResult(loincNumber: string, value: number, unit: string) {\n  const response = await fetch(\'/api/medical-standards/standardize\', {\n    method: \'POST\',\n    headers: {\n      \'Content-Type\': \'application/json\',\n      \'Authorization\': `Bearer ${token}`,\n    },\n    body: JSON.stringify({\n      loincNumber,\n      value,\n      unit,\n      patientAge: patient.age,\n      patientGender: patient.gender,\n    }),\n  });\n\n  const { data } = await response.json();\n\n  return (\n    <div className={data.isWithinRange ? \'text-green-600\' : \'text-red-600\'}>\n      <h3>{data.loincCode.commonName}</h3>\n      <p>Value: {data.standardizedValue} {data.unit.unit}</p>\n      <p>Reference Range: {data.referenceRange.lowValue} - {data.referenceRange.highValue} {data.referenceRange.unit}</p>\n      <p>Interpretation: {data.interpretation}</p>\n      {data.flags.length > 0 && (\n        <div className="flex gap-2">\n          {data.flags.map(flag => (\n            <span key={flag} className="badge badge-warning">{flag}</span>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n### Example 3: Search and Select LOINC Code\n\n```typescript\n// In test ordering UI\nasync function searchLOINCCodes(query: string) {\n  const response = await fetch(\n    `/api/medical-standards/loinc?query=${encodeURIComponent(query)}&limit=10`,\n    {\n      headers: {\n        \'Authorization\': `Bearer ${token}`,\n      },\n    }\n  );\n\n  const { data } = await response.json();\n  \n  return data.codes.map(code => ({\n    value: code.loincNumber,\n    label: `${code.commonName} (${code.loincNumber})`,\n    description: code.longName,\n  }));\n}\n```\n\n---\n\n## Error Handling\n\nAll endpoints return errors in the following format:\n\n```json\n{\n  "success": false,\n  "error": "Error message"\n}\n```\n\n**Common HTTP Status Codes:**\n- `200`: Success\n- `400`: Bad Request (invalid parameters)\n- `401`: Unauthorized (missing or invalid token)\n- `404`: Not Found (LOINC code not found)\n- `500`: Internal Server Error\n\n---\n\n## Rate Limiting\n\nAPI endpoints are rate-limited to:\n- 100 requests per minute for search endpoints\n- 1000 requests per minute for standardization endpoints\n- 10 requests per minute for statistics endpoints\n\n---\n\n## Best Practices\n\n1. **Use Batch Endpoints**: When standardizing multiple results, use the batch endpoint for better performance.\n\n2. **Cache LOINC Codes**: LOINC codes rarely change, so cache them in your application.\n\n3. **Validate Before Standardizing**: Use the validate endpoint to check data quality before standardization.\n\n4. **Include Demographics**: Always include patient age and gender for accurate reference ranges.\n\n5. **Handle Errors Gracefully**: Some lab results may not have LOINC codes or reference ranges.\n\n6. **Use Primary Units**: Store standardized values in primary units for consistency.\n\n7. **Track Flags**: Monitor abnormal flags for clinical decision support.\n\n---\n\n## Support\n\nFor questions or issues with the Medical Standardization Repository API, contact:\n- Email: support@holovitals.com\n- Documentation: https://docs.holovitals.com/medical-standards\n\n</create-file>\n</function_calls>'}