{'role': 'assistant', 'content': 'Now let me create comprehensive documentation for the authentication and consent system:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/AUTHENTICATION_CONSENT.md">\n# HoloVitals Authentication & Consent Management System\n\n## Overview\n\nHoloVitals implements a comprehensive authentication and consent management system that ensures:\n- **Patient Privacy:** Only patients can access their own data\n- **Secure Authentication:** Multi-factor authentication (MFA) required\n- **Explicit Consent:** Specialists need patient approval for access\n- **Time-Based Access:** All specialist access expires automatically\n- **No Data Export:** Data cannot be exported from the controlled environment\n- **Complete Audit Trail:** All access is logged and monitored\n\n## System Architecture\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                    Patient Account                           │\n│  • Login with email + password + MFA                        │\n│  • View all personal data (transparent)                     │\n│  • Manage consent requests                                  │\n│  • View access logs                                         │\n└─────────────────────────────────────────────────────────────┘\n                            ↓\n┌─────────────────────────────────────────────────────────────┐\n│              Authentication Service                          │\n│  • Password hashing (bcrypt)                                │\n│  • JWT token management                                     │\n│  • MFA with TOTP (Google Authenticator)                     │\n│  • Session management                                       │\n│  • Account lockout protection                               │\n└─────────────────────────────────────────────────────────────┘\n                            ↓\n┌─────────────────────────────────────────────────────────────┐\n│           Consent Management Service                         │\n│  • Explicit patient consent required                        │\n│  • Time-based access (max 72 hours)                         │\n│  • Granular permissions                                     │\n│  • Automatic expiration                                     │\n│  • Revocation capability                                    │\n└─────────────────────────────────────────────────────────────┘\n                            ↓\n┌─────────────────────────────────────────────────────────────┐\n│                 Audit Logger                                 │\n│  • Logs all access to PHI/PII                               │\n│  • Who, what, when, where, why                              │\n│  • Suspicious activity detection                            │\n│  • HIPAA compliance reporting                               │\n└─────────────────────────────────────────────────────────────┘\n```\n\n## Authentication System\n\n### Features\n\n#### 1. Secure Registration\n```typescript\nconst user = await authService.register({\n  email: \'patient@example.com\',\n  password: \'SecureP@ssw0rd123!\',\n  firstName: \'John\',\n  lastName: \'Doe\',\n  dateOfBirth: new Date(\'1980-01-01\')\n});\n```\n\n**Password Requirements:**\n- Minimum 12 characters\n- Must contain uppercase letters\n- Must contain lowercase letters\n- Must contain numbers\n- Must contain special characters\n\n#### 2. Multi-Factor Authentication (MFA)\n\n**Setup MFA:**\n```typescript\n// Generate MFA secret and QR code\nconst mfaSetup = await authService.setupMFA(userId);\n\n// Returns:\n// - secret: Base32 secret for manual entry\n// - qrCode: QR code data URL for scanning\n// - backupCodes: 10 one-time backup codes\n```\n\n**Enable MFA:**\n```typescript\n// Verify token from authenticator app\nawait authService.enableMFA(userId, \'123456\');\n```\n\n**Login with MFA:**\n```typescript\nconst tokens = await authService.login({\n  email: \'patient@example.com\',\n  password: \'SecureP@ssw0rd123!\',\n  mfaToken: \'123456\' // From authenticator app\n});\n```\n\n#### 3. Session Management\n\n**Session Features:**\n- 15-minute access token expiry\n- 7-day refresh token expiry\n- 30-minute session timeout\n- Automatic session cleanup\n- IP address and user agent tracking\n\n**Token Refresh:**\n```typescript\nconst newTokens = await authService.refreshToken(refreshToken);\n```\n\n**Logout:**\n```typescript\nawait authService.logout(sessionId);\n```\n\n#### 4. Account Security\n\n**Account Lockout:**\n- Maximum 5 failed login attempts\n- 15-minute lockout period\n- Automatic unlock after timeout\n\n**Password Change:**\n```typescript\nawait authService.changePassword(\n  userId,\n  \'currentPassword\',\n  \'newSecurePassword\'\n);\n// Invalidates all sessions except current\n```\n\n## Consent Management System\n\n### Consent Workflow\n\n```\n1. Specialist Requests Access\n   ↓\n2. Patient Receives Notification\n   ↓\n3. Patient Reviews Request\n   ↓\n4. Patient Approves/Denies\n   ↓\n5. If Approved: Time-Limited Access Granted\n   ↓\n6. All Access is Logged\n   ↓\n7. Access Expires Automatically\n   ↓\n8. Patient Can Revoke Anytime\n```\n\n### Requesting Consent\n\n**Specialist Request:**\n```typescript\nconst consentId = await consentManagementService.requestConsent({\n  patientId: \'patient-uuid\',\n  specialistId: \'specialist-uuid\',\n  reason: \'Need to review recent bloodwork results to correct data entry error in hemoglobin value\',\n  requestedPermissions: [\n    {\n      resource: \'test_results\',\n      action: \'read\',\n      scope: \'bloodwork-doc-id\'\n    },\n    {\n      resource: \'test_results\',\n      action: \'correct\',\n      scope: \'bloodwork-doc-id\'\n    }\n  ],\n  requestedDuration: 24, // hours\n  urgency: \'routine\'\n});\n```\n\n**Permission Types:**\n\n| Resource | Actions | Description |\n|----------|---------|-------------|\n| `documents` | read | View documents |\n| `test_results` | read, correct | View/fix test results |\n| `medications` | read | View medications |\n| `allergies` | read | View allergies |\n| `conditions` | read | View conditions |\n| `imaging` | read | View imaging results |\n| `clinical_notes` | read, annotate | View/add notes |\n| `all_phi` | read | Full PHI access |\n\n### Patient Consent Actions\n\n**Approve Consent:**\n```typescript\nconst consent = await consentManagementService.approveConsent(\n  consentId,\n  patientId,\n  [\n    // Optional: Add custom restrictions\n    {\n      type: \'ip_restricted\',\n      value: [\'192.168.1.100\'],\n      description: \'Access only from clinic IP\'\n    }\n  ]\n);\n```\n\n**Deny Consent:**\n```typescript\nawait consentManagementService.denyConsent(\n  consentId,\n  patientId,\n  \'Not comfortable sharing this information\'\n);\n```\n\n**Revoke Active Consent:**\n```typescript\nawait consentManagementService.revokeConsent(\n  consentId,\n  patientId,\n  \'No longer needed\'\n);\n// Immediately terminates all specialist sessions\n```\n\n### Access Restrictions\n\n**Default Restrictions (Always Applied):**\n1. **No Export:** Data cannot be exported from the system\n2. **No Copy:** Data cannot be copied to clipboard\n3. **Session Only:** Access only during active session\n\n**Optional Restrictions:**\n- **IP Restricted:** Specific IP addresses only\n- **Device Restricted:** Specific devices only\n- **View Only:** Read-only, no modifications\n- **No Print:** Cannot print data\n\n### Consent Limits\n\n- **Maximum Duration:** 72 hours\n- **Minimum Duration:** 1 hour\n- **Expiration Warning:** 2 hours before expiry\n- **Automatic Expiration:** Access terminates at expiry time\n\n### Checking Permissions\n\n```typescript\nconst hasPermission = await consentManagementService.checkPermission(\n  specialistId,\n  patientId,\n  \'test_results\',\n  \'read\'\n);\n\nif (hasPermission) {\n  // Allow access\n  await consentManagementService.logAccess(\n    consentId,\n    specialistId,\n    \'view_test_results\',\n    \'bloodwork-doc-id\',\n    ipAddress,\n    userAgent\n  );\n} else {\n  // Deny access\n  await auditLogger.logUnauthorizedAccess(\n    specialistId,\n    \'test_results\',\n    \'No active consent\',\n    ipAddress,\n    userAgent\n  );\n}\n```\n\n## Audit Logging\n\n### What Gets Logged\n\n**Authentication Events:**\n- Login success/failure\n- Logout\n- MFA enabled/disabled\n- Password changes\n- Account lockouts\n\n**Data Access Events:**\n- Data viewed\n- Data created\n- Data updated\n- Data deleted\n- Data exported (blocked but logged)\n- Data printed (blocked but logged)\n\n**Consent Events:**\n- Consent requested\n- Consent approved\n- Consent denied\n- Consent revoked\n\n**Specialist Access Events:**\n- Access granted\n- Access denied\n- Data viewed\n- Data corrected\n\n**Security Events:**\n- System errors\n- Security violations\n- Unauthorized access attempts\n- Suspicious activity\n\n### Logging PHI/PII Access\n\n```typescript\nawait auditLogger.logPHIAccess(\n  userId,\n  patientId,\n  \'bloodwork_results\',\n  \'view\',\n  consentId,\n  ipAddress,\n  userAgent\n);\n```\n\n### Logging Specialist Access\n\n```typescript\nawait auditLogger.logSpecialistAccess(\n  specialistId,\n  patientId,\n  \'corrected_hemoglobin_value\',\n  consentId,\n  {\n    field: \'hemoglobin\',\n    oldValue: \'14.5\',\n    newValue: \'15.2\',\n    reason: \'Data entry error\'\n  },\n  ipAddress,\n  userAgent\n);\n```\n\n### Suspicious Activity Detection\n\nThe system automatically detects:\n- **Rapid Repeated Access:** >20 actions in 5 minutes\n- **Multiple IP Addresses:** >3 IPs in 1 hour\n- **Unusual Access Times:** 2 AM - 5 AM data access\n- **Failed Login Patterns:** Multiple failed attempts\n- **Unauthorized Access Attempts:** Accessing without permission\n\n### Audit Reports\n\n```typescript\nconst report = await auditLogger.generateReport(\n  startDate,\n  endDate\n);\n\n// Returns:\n// - totalEntries\n// - entriesBySeverity (low, medium, high, critical)\n// - entriesByAction\n// - suspiciousActivities\n// - requiresReview\n// - dateRange\n```\n\n### User Activity Summary\n\n```typescript\nconst summary = await auditLogger.getUserActivitySummary(\n  userId,\n  30 // days\n);\n\n// Returns:\n// - totalActions\n// - actionCounts\n// - dailyActivity\n// - securityViolations\n// - unauthorizedAttempts\n```\n\n## Patient Data Transparency\n\n### What Patients Can See\n\nPatients have **complete transparency** into:\n\n1. **All Their Data:**\n   - Medical documents\n   - Test results\n   - Medications\n   - Allergies\n   - Conditions\n   - Clinical notes\n\n2. **All Access Logs:**\n   - Who accessed their data\n   - When it was accessed\n   - What was accessed\n   - Why it was accessed (consent reason)\n\n3. **All Consent Requests:**\n   - Pending requests\n   - Approved consents\n   - Denied requests\n   - Revoked consents\n   - Expired consents\n\n4. **All Audit Logs:**\n   - Every action on their account\n   - Login history\n   - Data modifications\n   - System events\n\n### Patient Dashboard Features\n\n```typescript\n// Get all patient data\nconst data = await getPatientData(patientId);\n\n// Get all consent requests\nconst consents = await consentManagementService.getPatientConsents(patientId);\n\n// Get all access logs\nconst accessLogs = await auditLogger.getPatientAuditLogs(patientId);\n\n// Get all notifications\nconst notifications = await getPatientNotifications(patientId);\n```\n\n## Security Controls\n\n### Data Export Prevention\n\n**Technical Controls:**\n1. **No Export API:** No endpoints allow data export\n2. **Clipboard Blocking:** JavaScript prevents copy operations\n3. **Print Blocking:** CSS prevents printing\n4. **Screenshot Detection:** Warns on screenshot attempts\n5. **Right-Click Disabled:** Context menu disabled on sensitive data\n\n**Audit Controls:**\n1. All export attempts are logged\n2. Alerts sent on export attempts\n3. Automatic session termination on violations\n\n### Session Security\n\n**Controls:**\n- Session timeout after 30 minutes of inactivity\n- Automatic logout on browser close\n- Session invalidation on password change\n- IP address validation\n- User agent validation\n\n### Access Warnings\n\n**Warnings Displayed:**\n```\n⚠️ WARNING: PHI/PII ACCESS\nYou are accessing Protected Health Information (PHI).\nAll access is logged and monitored.\nUnauthorized access or data export is prohibited.\nConsent expires in: 23 hours 45 minutes\n```\n\n## HIPAA Compliance\n\n### Compliance Features\n\n1. **Access Control:**\n   - Unique user identification\n   - Emergency access procedures (consent system)\n   - Automatic logoff (session timeout)\n   - Encryption and decryption\n\n2. **Audit Controls:**\n   - Audit logs for all PHI access\n   - Audit log protection (immutable)\n   - Audit log review procedures\n   - Audit log retention (7 years)\n\n3. **Integrity:**\n   - Data integrity verification\n   - Data modification logging\n   - Data correction procedures (consent-based)\n\n4. **Person or Entity Authentication:**\n   - Multi-factor authentication\n   - Password requirements\n   - Session management\n\n5. **Transmission Security:**\n   - HTTPS/TLS encryption\n   - Secure token transmission\n   - Encrypted data storage\n\n### Compliance Reporting\n\n```typescript\n// Generate HIPAA compliance report\nconst report = await generateHIPAAComplianceReport(\n  startDate,\n  endDate\n);\n\n// Includes:\n// - All PHI access events\n// - All consent grants\n// - All security violations\n// - All audit log reviews\n// - Compliance metrics\n```\n\n## Implementation Example\n\n### Complete Patient Login Flow\n\n```typescript\n// 1. Patient registers\nconst user = await authService.register({\n  email: \'patient@example.com\',\n  password: \'SecureP@ssw0rd123!\',\n  firstName: \'John\',\n  lastName: \'Doe\',\n  dateOfBirth: new Date(\'1980-01-01\')\n});\n\n// 2. Patient sets up MFA\nconst mfaSetup = await authService.setupMFA(user.id);\n// Display QR code to patient\n// Patient scans with authenticator app\n\n// 3. Patient verifies MFA\nawait authService.enableMFA(user.id, \'123456\');\n\n// 4. Patient logs in\nconst tokens = await authService.login({\n  email: \'patient@example.com\',\n  password: \'SecureP@ssw0rd123!\',\n  mfaToken: \'654321\'\n}, ipAddress, userAgent);\n\n// 5. Patient accesses dashboard\n// All data is visible and transparent\n```\n\n### Complete Specialist Access Flow\n\n```typescript\n// 1. Specialist requests access\nconst consentId = await consentManagementService.requestConsent({\n  patientId: \'patient-uuid\',\n  specialistId: \'specialist-uuid\',\n  reason: \'Need to review and correct data entry error\',\n  requestedPermissions: [\n    { resource: \'test_results\', action: \'read\' },\n    { resource: \'test_results\', action: \'correct\' }\n  ],\n  requestedDuration: 24,\n  urgency: \'routine\'\n});\n\n// 2. Patient receives notification\n// Patient reviews request in dashboard\n\n// 3. Patient approves\nawait consentManagementService.approveConsent(\n  consentId,\n  \'patient-uuid\'\n);\n\n// 4. Specialist accesses data\nconst hasPermission = await consentManagementService.checkPermission(\n  \'specialist-uuid\',\n  \'patient-uuid\',\n  \'test_results\',\n  \'read\'\n);\n\nif (hasPermission) {\n  // Log access\n  await consentManagementService.logAccess(\n    consentId,\n    \'specialist-uuid\',\n    \'view_test_results\',\n    \'doc-id\',\n    ipAddress,\n    userAgent\n  );\n  \n  // Show data with warnings\n  displayDataWithWarnings(data);\n}\n\n// 5. Specialist corrects data\nawait consentManagementService.logAccess(\n  consentId,\n  \'specialist-uuid\',\n  \'correct_test_result\',\n  \'doc-id\',\n  ipAddress,\n  userAgent,\n  { field: \'hemoglobin\', oldValue: \'14.5\', newValue: \'15.2\' }\n);\n\n// 6. Access expires automatically after 24 hours\n// Or patient can revoke anytime\nawait consentManagementService.revokeConsent(\n  consentId,\n  \'patient-uuid\',\n  \'Issue resolved\'\n);\n```\n\n## Best Practices\n\n### For Patients\n\n1. **Enable MFA:** Always enable multi-factor authentication\n2. **Strong Passwords:** Use unique, strong passwords\n3. **Review Consents:** Regularly review consent requests\n4. **Check Access Logs:** Monitor who accessed your data\n5. **Revoke Promptly:** Revoke consent when no longer needed\n\n### For Specialists\n\n1. **Minimal Access:** Request only necessary permissions\n2. **Clear Reasons:** Provide detailed access reasons\n3. **Time-Limited:** Request shortest duration needed\n4. **Document Actions:** Log all data corrections\n5. **Respect Privacy:** Never export or share data\n\n### For Administrators\n\n1. **Monitor Alerts:** Review security alerts daily\n2. **Audit Reviews:** Review high-severity logs weekly\n3. **Compliance Reports:** Generate monthly compliance reports\n4. **Update Policies:** Keep security policies current\n5. **Train Users:** Regular security training\n\n## Conclusion\n\nThe HoloVitals authentication and consent management system provides:\n- ✅ Secure patient authentication with MFA\n- ✅ Complete patient data transparency\n- ✅ Explicit consent for specialist access\n- ✅ Time-based access controls\n- ✅ Comprehensive audit logging\n- ✅ HIPAA compliance\n- ✅ No data export capability\n- ✅ Suspicious activity detection\n\nThis system ensures that patient data remains private and secure while allowing necessary specialist access under controlled, audited conditions.\n</create-file>\n</function_calls>'}