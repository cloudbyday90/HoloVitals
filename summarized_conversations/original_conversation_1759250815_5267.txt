{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/lib/utils/hipaa/sanitizer.ts">\n/**\n * HIPAA Compliance Data Sanitizer\n * Removes all PII (Personally Identifiable Information) and PHI (Protected Health Information)\n * from data before storing in cache or processing\n */\n\nexport interface SanitizationResult {\n  sanitizedData: any;\n  removedFields: string[];\n  sanitizationLevel: \'full\' | \'partial\' | \'none\';\n  timestamp: Date;\n}\n\nexport class HIPAASanitizer {\n  // PII/PHI fields that must be removed or anonymized\n  private static readonly SENSITIVE_FIELDS = [\n    // Direct Identifiers (must be removed)\n    \'name\', \'firstName\', \'lastName\', \'fullName\',\n    \'ssn\', \'socialSecurityNumber\',\n    \'email\', \'emailAddress\',\n    \'phone\', \'phoneNumber\', \'telephone\', \'mobile\',\n    \'address\', \'streetAddress\', \'street\', \'city\', \'state\', \'zipCode\', \'postalCode\',\n    \'dateOfBirth\', \'dob\', \'birthDate\',\n    \'medicalRecordNumber\', \'mrn\', \'patientId\',\n    \'accountNumber\', \'certificateNumber\', \'licenseNumber\',\n    \'vehicleIdentifier\', \'deviceIdentifier\', \'serialNumber\',\n    \'url\', \'website\', \'ipAddress\', \'macAddress\',\n    \'biometricIdentifier\', \'facePhoto\', \'fingerprint\',\n    \'\n\', \'photograph\', \'image\',\n    \n    // Quasi-identifiers (may need anonymization)\n    \'age\', \'gender\', \'race\', \'ethnicity\',\n    \'occupation\', \'employer\',\n    \'geographicLocation\', \'location\', \'coordinates\',\n  ];\n\n  // Patterns to detect in text\n  private static readonly SENSITIVE_PATTERNS = [\n    // SSN patterns\n    /\\b\\d{3}-\\d{2}-\\d{4}\\b/g,\n    /\\b\\d{9}\\b/g,\n    \n    // Phone patterns\n    /\\b\\d{3}[-.]?\\d{3}[-.]?\\d{4}\\b/g,\n    /\\b\\(\\d{3}\\)\\s*\\d{3}[-.]?\\d{4}\\b/g,\n    \n    // Email patterns\n    /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n    \n    // Date patterns (potential DOB)\n    /\\b\\d{1,2}\\/\\d{1,2}\\/\\d{4}\\b/g,\n    /\\b\\d{4}-\\d{2}-\\d{2}\\b/g,\n    \n    // Address patterns\n    /\\b\\d+\\s+[A-Za-z\\s]+(?:Street|St|Avenue|Ave|Road|Rd|Boulevard|Blvd|Lane|Ln|Drive|Dr|Court|Ct|Circle|Cir)\\b/gi,\n    \n    // ZIP code patterns\n    /\\b\\d{5}(?:-\\d{4})?\\b/g,\n    \n    // Medical Record Number patterns\n    /\\b(?:MRN|Medical Record|Patient ID)[\\s:]*[A-Z0-9-]+\\b/gi,\n  ];\n\n  /**\n   * Sanitize data by removing all PII/PHI\n   */\n  static sanitize(data: any, options: SanitizationOptions = {}): SanitizationResult {\n    const removedFields: string[] = [];\n    const sanitizedData = this.deepSanitize(data, removedFields, options);\n    \n    return {\n      sanitizedData,\n      removedFields,\n      sanitizationLevel: removedFields.length > 0 ? \'full\' : \'none\',\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Deep sanitization of nested objects\n   */\n  private static deepSanitize(\n    obj: any,\n    removedFields: string[],\n    options: SanitizationOptions,\n    path: string = \'\'\n  ): any {\n    if (obj === null || obj === undefined) {\n      return obj;\n    }\n\n    // Handle arrays\n    if (Array.isArray(obj)) {\n      return obj.map((item, index) => \n        this.deepSanitize(item, removedFields, options, `${path}[${index}]`)\n      );\n    }\n\n    // Handle objects\n    if (typeof obj === \'object\') {\n      const sanitized: any = {};\n      \n      for (const [key, value] of Object.entries(obj)) {\n        const currentPath = path ? `${path}.${key}` : key;\n        \n        // Check if field should be removed\n        if (this.isSensitiveField(key)) {\n          removedFields.push(currentPath);\n          \n          // Optionally replace with placeholder\n          if (options.usePlaceholders) {\n            sanitized[key] = this.getPlaceholder(key);\n          }\n          continue;\n        }\n\n        // Recursively sanitize nested objects\n        if (typeof value === \'object\') {\n          sanitized[key] = this.deepSanitize(value, removedFields, options, currentPath);\n        } \n        // Sanitize string values\n        else if (typeof value === \'string\') {\n          const sanitizedString = this.sanitizeString(value);\n          if (sanitizedString !== value) {\n            removedFields.push(`${currentPath} (pattern match)`);\n          }\n          sanitized[key] = sanitizedString;\n        } \n        // Keep other primitive values\n        else {\n          sanitized[key] = value;\n        }\n      }\n      \n      return sanitized;\n    }\n\n    // Handle strings\n    if (typeof obj === \'string\') {\n      return this.sanitizeString(obj);\n    }\n\n    // Return primitive values as-is\n    return obj;\n  }\n\n  /**\n   * Check if a field name is sensitive\n   */\n  private static isSensitiveField(fieldName: string): boolean {\n    const lowerField = fieldName.toLowerCase();\n    return this.SENSITIVE_FIELDS.some(sensitive => \n      lowerField.includes(sensitive.toLowerCase())\n    );\n  }\n\n  /**\n   * Sanitize string content by removing patterns\n   */\n  private static sanitizeString(text: string): string {\n    let sanitized = text;\n    \n    for (const pattern of this.SENSITIVE_PATTERNS) {\n      sanitized = sanitized.replace(pattern, \'[REDACTED]\');\n    }\n    \n    return sanitized;\n  }\n\n  /**\n   * Get placeholder for sensitive field\n   */\n  private static getPlaceholder(fieldName: string): string {\n    const lowerField = fieldName.toLowerCase();\n    \n    if (lowerField.includes(\'name\')) return \'[NAME_REDACTED]\';\n    if (lowerField.includes(\'email\')) return \'[EMAIL_REDACTED]\';\n    if (lowerField.includes(\'phone\')) return \'[PHONE_REDACTED]\';\n    if (lowerField.includes(\'address\')) return \'[ADDRESS_REDACTED]\';\n    if (lowerField.includes(\'ssn\')) return \'[SSN_REDACTED]\';\n    if (lowerField.includes(\'date\')) return \'[DATE_REDACTED]\';\n    \n    return \'[REDACTED]\';\n  }\n\n  /**\n   * Validate that data is properly sanitized\n   */\n  static validate(data: any): ValidationResult {\n    const issues: string[] = [];\n    this.deepValidate(data, issues);\n    \n    return {\n      isValid: issues.length === 0,\n      issues,\n      timestamp: new Date()\n    };\n  }\n\n  /**\n   * Deep validation of sanitized data\n   */\n  private static deepValidate(obj: any, issues: string[], path: string = \'\'): void {\n    if (obj === null || obj === undefined) return;\n\n    if (Array.isArray(obj)) {\n      obj.forEach((item, index) => \n        this.deepValidate(item, issues, `${path}[${index}]`)\n      );\n      return;\n    }\n\n    if (typeof obj === \'object\') {\n      for (const [key, value] of Object.entries(obj)) {\n        const currentPath = path ? `${path}.${key}` : key;\n        \n        // Check for sensitive field names\n        if (this.isSensitiveField(key)) {\n          issues.push(`Sensitive field found: ${currentPath}`);\n        }\n\n        // Recursively validate\n        this.deepValidate(value, issues, currentPath);\n      }\n      return;\n    }\n\n    // Check string content for patterns\n    if (typeof obj === \'string\') {\n      for (const pattern of this.SENSITIVE_PATTERNS) {\n        if (pattern.test(obj)) {\n          issues.push(`Sensitive pattern found in: ${path}`);\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Create anonymized version of data (keeps structure, removes values)\n   */\n  static anonymize(data: any): any {\n    if (data === null || data === undefined) return data;\n\n    if (Array.isArray(data)) {\n      return data.map(item => this.anonymize(item));\n    }\n\n    if (typeof data === \'object\') {\n      const anonymized: any = {};\n      for (const [key, value] of Object.entries(data)) {\n        if (this.isSensitiveField(key)) {\n          anonymized[key] = this.getPlaceholder(key);\n        } else if (typeof value === \'object\') {\n          anonymized[key] = this.anonymize(value);\n        } else {\n          anonymized[key] = value;\n        }\n      }\n      return anonymized;\n    }\n\n    return data;\n  }\n}\n\nexport interface SanitizationOptions {\n  usePlaceholders?: boolean;\n  preserveStructure?: boolean;\n  customSensitiveFields?: string[];\n}\n\nexport interface ValidationResult {\n  isValid: boolean;\n  issues: string[];\n  timestamp: Date;\n}\n</create-file>\n</function_calls>'}