{'role': 'assistant', 'content': '<function_calls>\n<str-replace file_path="medical-analysis-platform/prisma/schema.prisma">\n<old_str>  @@index([userId])\n  @@index([createdAt])\n  @@index([read])\n  @@map("notifications")\n}</old_str>\n<new_str>  @@index([userId])\n  @@index([createdAt])\n  @@index([read])\n  @@map("notifications")\n}\n\n// ============================================================================\n// SUBSCRIPTION & PRICING SYSTEM\n// ============================================================================\n\nenum SubscriptionTier {\n  BASIC         // $9.99/month, 10MB free upload, 100K tokens/month\n  PROFESSIONAL  // $29.99/month, 25MB free upload, 500K tokens/month\n  ENTERPRISE    // $99.99/month, 100MB free upload, 2M tokens/month\n}\n\nenum SubscriptionStatus {\n  ACTIVE\n  PAST_DUE\n  CANCELLED\n  EXPIRED\n  TRIAL\n}\n\nenum TokenTransactionType {\n  INITIAL_DEPOSIT      // First-time subscription tokens\n  MONTHLY_REFRESH      // Monthly token top-up\n  PURCHASE             // One-time token purchase\n  DEDUCTION            // Token usage\n  REFUND               // Token refund\n  BONUS                // Promotional tokens\n  ADJUSTMENT           // Manual adjustment\n}\n\nenum FileProcessingStatus {\n  PENDING              // Awaiting cost approval\n  APPROVED             // Cost approved, queued for processing\n  PROCESSING           // Currently being processed\n  COMPLETED            // Successfully processed\n  FAILED               // Processing failed\n  CANCELLED            // User cancelled\n  SCHEDULED            // Multi-month processing scheduled\n}\n\nmodel Subscription {\n  id                    String              @id @default(uuid())\n  userId                String              @unique @map("user_id")\n  tier                  SubscriptionTier\n  status                SubscriptionStatus  @default(ACTIVE)\n  monthlyPrice          Float               @map("monthly_price") // In USD\n  billingCycleStart     DateTime            @map("billing_cycle_start")\n  billingCycleEnd       DateTime            @map("billing_cycle_end")\n  nextBillingDate       DateTime?           @map("next_billing_date")\n  cancelledAt           DateTime?           @map("cancelled_at")\n  trialEndsAt           DateTime?           @map("trial_ends_at")\n  metadata              String?             @db.Text // JSON: payment method, billing address, etc.\n  createdAt             DateTime            @default(now()) @map("created_at")\n  updatedAt             DateTime            @updatedAt @map("updated_at")\n\n  user                  User                @relation(fields: [userId], references: [id], onDelete: Cascade)\n  tokenBalance          TokenBalance?\n  subscriptionHistory   SubscriptionHistory[]\n\n  @@index([userId])\n  @@index([status])\n  @@index([nextBillingDate])\n  @@map("subscriptions")\n}\n\nmodel SubscriptionHistory {\n  id                String              @id @default(uuid())\n  subscriptionId    String              @map("subscription_id")\n  fromTier          SubscriptionTier?   @map("from_tier")\n  toTier            SubscriptionTier    @map("to_tier")\n  fromStatus        SubscriptionStatus? @map("from_status")\n  toStatus          SubscriptionStatus  @map("to_status")\n  reason            String?             @db.Text\n  changedAt         DateTime            @default(now()) @map("changed_at")\n\n  subscription      Subscription        @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)\n\n  @@index([subscriptionId])\n  @@index([changedAt])\n  @@map("subscription_history")\n}\n\nmodel TokenBalance {\n  id                    String      @id @default(uuid())\n  userId                String      @unique @map("user_id")\n  subscriptionId        String      @unique @map("subscription_id")\n  currentBalance        Int         @default(0) @map("current_balance") // Available tokens\n  totalEarned           Int         @default(0) @map("total_earned")    // Lifetime earned\n  totalUsed             Int         @default(0) @map("total_used")      // Lifetime used\n  totalPurchased        Int         @default(0) @map("total_purchased") // Lifetime purchased\n  freeUploadUsed        Int         @default(0) @map("free_upload_used") // Bytes used from free upload limit\n  lastRefreshDate       DateTime?   @map("last_refresh_date")\n  createdAt             DateTime    @default(now()) @map("created_at")\n  updatedAt             DateTime    @updatedAt @map("updated_at")\n\n  user                  User        @relation(fields: [userId], references: [id], onDelete: Cascade)\n  subscription          Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)\n  transactions          TokenTransaction[]\n\n  @@index([userId])\n  @@index([subscriptionId])\n  @@map("token_balances")\n}\n\nmodel TokenTransaction {\n  id                String                @id @default(uuid())\n  tokenBalanceId    String                @map("token_balance_id")\n  type              TokenTransactionType\n  amount            Int                   // Positive for credits, negative for debits\n  balanceBefore     Int                   @map("balance_before")\n  balanceAfter      Int                   @map("balance_after")\n  description       String?               @db.Text\n  referenceId       String?               @map("reference_id") // Link to related entity (upload, chat, etc.)\n  referenceType     String?               @map("reference_type") // Type of reference (FileUpload, ChatMessage, etc.)\n  metadata          String?               @db.Text // JSON: additional details\n  createdAt         DateTime              @default(now()) @map("created_at")\n\n  tokenBalance      TokenBalance          @relation(fields: [tokenBalanceId], references: [id], onDelete: Cascade)\n\n  @@index([tokenBalanceId])\n  @@index([type])\n  @@index([referenceId])\n  @@index([createdAt])\n  @@map("token_transactions")\n}\n\nmodel FileUpload {\n  id                    String                @id @default(uuid())\n  userId                String                @map("user_id")\n  fileName              String                @map("file_name")\n  filePath              String                @map("file_path")\n  fileSize              Int                   @map("file_size") // In bytes\n  mimeType              String                @map("mime_type")\n  status                FileProcessingStatus  @default(PENDING)\n  estimatedTokens       Int?                  @map("estimated_tokens")\n  estimatedCost         Float?                @map("estimated_cost") // In USD\n  actualTokens          Int?                  @map("actual_tokens")\n  actualCost            Float?                @map("actual_cost") // In USD\n  processingStartedAt   DateTime?             @map("processing_started_at")\n  processingCompletedAt DateTime?             @map("processing_completed_at")\n  scheduledMonths       Int?                  @map("scheduled_months") // For multi-month processing\n  currentMonth          Int?                  @map("current_month") // Current processing month\n  errorMessage          String?               @db.Text @map("error_message")\n  usedFreeUpload        Boolean               @default(false) @map("used_free_upload") // Whether this used free upload limit\n  metadata              String?               @db.Text // JSON: processing details, chunks, etc.\n  createdAt             DateTime              @default(now()) @map("created_at")\n  updatedAt             DateTime              @updatedAt @map("updated_at")\n\n  user                  User                  @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([status])\n  @@index([createdAt])\n  @@map("file_uploads")\n}\n\nmodel PaymentIntent {\n  id                String    @id @default(uuid())\n  userId            String    @map("user_id")\n  amount            Float     // In USD\n  currency          String    @default("USD")\n  status            String    // pending, succeeded, failed, cancelled\n  paymentMethod     String?   @map("payment_method") // stripe, paypal, etc.\n  paymentMethodId   String?   @map("payment_method_id") // External payment ID\n  tokensPurchased   Int?      @map("tokens_purchased")\n  description       String?   @db.Text\n  metadata          String?   @db.Text // JSON: additional payment details\n  createdAt         DateTime  @default(now()) @map("created_at")\n  updatedAt         DateTime  @updatedAt @map("updated_at")\n\n  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n\n  @@index([userId])\n  @@index([status])\n  @@index([createdAt])\n  @@map("payment_intents")\n}</new_str>\n</str-replace>\n</function_calls>'}