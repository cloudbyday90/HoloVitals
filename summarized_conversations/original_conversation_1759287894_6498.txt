{'role': 'assistant', 'content': 'Now let\'s create an API endpoint for provider discovery:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/ehr/providers/route.ts">\n/**\n * EHR Providers API\n * \n * GET /api/ehr/providers - List available EHR providers\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { ProviderDiscoveryService } from \'@/lib/services/ProviderDiscoveryService\';\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const search = searchParams.get(\'search\');\n    const popular = searchParams.get(\'popular\') === \'true\';\n    const includeDisabled = searchParams.get(\'includeDisabled\') === \'true\';\n    const includeSandbox = searchParams.get(\'includeSandbox\') === \'true\';\n\n    let providers;\n\n    if (search) {\n      // Search providers by name\n      providers = await ProviderDiscoveryService.searchProvidersByName(search);\n    } else if (popular) {\n      // Get popular providers sorted by market share\n      providers = await ProviderDiscoveryService.getPopularProviders();\n    } else {\n      // Get all supported providers\n      providers = await ProviderDiscoveryService.getSupportedProviders();\n    }\n\n    // Also get database configurations\n    const configurations = await ProviderDiscoveryService.getProviderConfigurations(\n      includeDisabled,\n      includeSandbox\n    );\n\n    return NextResponse.json({\n      success: true,\n      providers,\n      configurations,\n      total: providers.length,\n    });\n  } catch (error: any) {\n    console.error(\'Get providers error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to get providers\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}