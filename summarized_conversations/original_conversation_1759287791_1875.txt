{'role': 'assistant', 'content': 'Now let me create the API endpoints. I\'ll start with the subscription endpoints:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/subscriptions/route.ts">\n/**\n * Subscription API Routes\n * \n * POST /api/subscriptions - Create or upgrade subscription\n * GET /api/subscriptions - Get current subscription\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { SubscriptionService } from \'@/lib/services/SubscriptionService\';\nimport { SubscriptionTier } from \'@/lib/config/pricing\';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { userId, tier, paymentMethodId, trialPeriod, action } = body;\n    \n    if (!userId || !tier) {\n      return NextResponse.json(\n        { error: \'Missing required fields: userId, tier\' },\n        { status: 400 }\n      );\n    }\n    \n    // Validate tier\n    if (!Object.values(SubscriptionTier).includes(tier)) {\n      return NextResponse.json(\n        { error: \'Invalid subscription tier\' },\n        { status: 400 }\n      );\n    }\n    \n    if (action === \'upgrade\' || action === \'downgrade\') {\n      // Change existing subscription\n      const { immediate = false } = body;\n      \n      const subscription = await SubscriptionService.changeSubscriptionTier({\n        userId,\n        newTier: tier,\n        immediate,\n      });\n      \n      return NextResponse.json({\n        success: true,\n        subscription,\n        message: immediate\n          ? `Subscription ${action}d to ${tier} immediately`\n          : `Subscription ${action} to ${tier} scheduled for next billing cycle`,\n      });\n    } else {\n      // Create new subscription\n      const result = await SubscriptionService.createSubscription({\n        userId,\n        tier,\n        paymentMethodId,\n        trialPeriod: trialPeriod || false,\n      });\n      \n      return NextResponse.json({\n        success: true,\n        subscription: result.subscription,\n        tokenBalance: result.tokenBalance,\n        message: trialPeriod\n          ? \'Trial subscription created successfully\'\n          : \'Subscription created successfully\',\n      });\n    }\n  } catch (error: any) {\n    console.error(\'Subscription creation error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to create subscription\' },\n      { status: 500 }\n    );\n  }\n}\n\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get(\'userId\');\n    \n    if (!userId) {\n      return NextResponse.json(\n        { error: \'Missing userId parameter\' },\n        { status: 400 }\n      );\n    }\n    \n    const subscription = await SubscriptionService.getSubscription(userId);\n    \n    if (!subscription) {\n      return NextResponse.json(\n        { error: \'Subscription not found\' },\n        { status: 404 }\n      );\n    }\n    \n    return NextResponse.json({\n      success: true,\n      subscription,\n    });\n  } catch (error: any) {\n    console.error(\'Get subscription error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to get subscription\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}