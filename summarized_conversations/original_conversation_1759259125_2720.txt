{'role': 'assistant', 'content': 'Perfect! Now let\'s create a comprehensive Phase 2 summary document:\n\n<function_calls>\n<create-file file_path="docs/PHASE_2_DATABASE_SETUP.md">\n# Phase 2: Database Setup - Complete Guide\n\n## Overview\n\nPhase 2 focuses on setting up the complete database schema for HoloVitals, including all tables for the AI architecture, patient repositories, and existing platform features.\n\n## What Was Completed\n\n### 1. Database Schema Consolidation ✅\n\n**File:** `medical-analysis-platform/prisma/schema.prisma`\n\n**Total Tables:** 40+ tables organized into logical groups:\n\n#### Core User Management (5 tables)\n- `User` - User accounts with MFA support\n- `Patient` - Patient profiles\n- `UserSession` - Authentication sessions\n- `ConsentGrant` - Consent management\n- `AccessLog` - Consent-based access tracking\n\n#### Document Management (6 tables)\n- `Document` - Medical document storage\n- `OcrResult` - OCR extraction results\n- `ExtractedData` - Structured data extraction\n- `DocumentLink` - Document relationships\n- `DocumentEmbedding` - Vector embeddings\n- `AnalysisSession` - Legacy analysis sessions\n\n#### AI Chat System (2 tables)\n- `ChatConversation` - Chat sessions\n- `ChatMessage` - Individual messages with escalation tracking\n\n#### Analysis Queue System (1 table)\n- `AnalysisQueue` - Priority-based task queue with context optimization\n\n#### Cloud Infrastructure (2 tables)\n- `CloudInstance` - Ephemeral instance tracking\n- `InstanceCost` - Instance cost tracking\n\n#### Cost Tracking (2 tables)\n- `ChatbotCost` - Lightweight chatbot costs\n- `AnalysisCost` - Heavy analysis costs\n\n#### Context Optimization (2 tables)\n- `PromptOptimization` - Prompt optimization tracking\n- `PromptSplit` - Split prompt management\n\n#### Performance Monitoring (2 tables)\n- `ModelPerformance` - AI model metrics\n- `SystemHealth` - System component health\n\n#### Patient Repository (9 tables)\n- `PatientRepository` - Sandboxed patient data\n- `PatientDiagnosis` - Medical diagnoses\n- `PatientMedication` - Medications\n- `PatientAllergy` - Allergies\n- `PatientVitalSign` - Vital signs\n- `PatientProcedure` - Procedures\n- `PatientImmunization` - Immunizations\n- `PatientFamilyHistory` - Family history\n- `IdentityChallenge` - Identity verification\n\n#### Audit & Compliance (4 tables)\n- `AuditLog` - HIPAA-compliant audit trail\n- `Notification` - User notifications\n- `SecurityAlert` - Security alerts\n- `AiInteraction` - Legacy AI interactions\n\n### 2. Database Setup Scripts ✅\n\n**Created Files:**\n\n1. **`scripts/setup-database.sh`**\n   - Automated database setup\n   - Migration creation and application\n   - Database seeding\n   - Schema verification\n\n2. **`prisma/seed.ts`**\n   - Test user creation\n   - Test patient creation\n   - Model performance data\n   - System health monitoring data\n\n3. **`.env.example`** (updated)\n   - Database configuration\n   - AI service keys\n   - Cloud provider credentials\n   - Application settings\n\n### 3. Package Configuration ✅\n\n**Updated `package.json`:**\n- Added `db:seed` script\n- Added `db:setup` script (complete setup)\n- Added Prisma seed configuration\n- Installed `ts-node` and `@types/bcrypt`\n\n### 4. Prisma Client Generation ✅\n\n- Generated Prisma Client with all models\n- Type-safe database access\n- Auto-completion support\n\n## Database Schema Highlights\n\n### Key Features\n\n#### 1. Dual AI Architecture Support\n```prisma\n// Lightweight chatbot\nmodel ChatConversation {\n  messages  ChatMessage[]\n}\n\n// Heavy-duty analysis\nmodel AnalysisQueue {\n  priority  Int\n  status    String\n  instance  CloudInstance?\n}\n```\n\n#### 2. Ephemeral Instance Tracking\n```prisma\nmodel CloudInstance {\n  provider     String\n  instanceType String\n  status       String\n  createdAt    DateTime\n  terminatedAt DateTime?\n  totalCost    Float\n}\n```\n\n#### 3. Comprehensive Cost Tracking\n```prisma\nmodel ChatbotCost {\n  inputTokens  Int\n  outputTokens Int\n  cost         Float\n}\n\nmodel AnalysisCost {\n  modelCost           Float\n  infrastructureCost  Float\n  totalCost           Float\n}\n```\n\n#### 4. Context Optimization\n```prisma\nmodel PromptOptimization {\n  originalTokens   Int\n  optimizedTokens  Int\n  tokenReduction   Int\n  reductionPercent Float\n}\n\nmodel PromptSplit {\n  taskId       String\n  splitId      String\n  order        Int\n  dependencies Json\n}\n```\n\n#### 5. Patient Repository (Sandboxed)\n```prisma\nmodel PatientRepository {\n  userId                String @unique\n  compositeIdentityHash String @unique\n  encryptedPersonalInfo String\n  \n  diagnoses      PatientDiagnosis[]\n  medications    PatientMedication[]\n  allergies      PatientAllergy[]\n  vitalSigns     PatientVitalSign[]\n}\n```\n\n#### 6. HIPAA Compliance\n```prisma\nmodel AuditLog {\n  userId     String\n  action     String\n  resource   String\n  severity   String\n  timestamp  DateTime\n}\n\nmodel ConsentGrant {\n  patientId    String\n  specialistId String\n  permissions  String\n  expiresAt    DateTime\n  status       String\n}\n```\n\n## Setup Instructions\n\n### Prerequisites\n\n1. **PostgreSQL 14+** installed and running\n2. **Node.js 18+** installed\n3. **npm** or **yarn** package manager\n\n### Step 1: Environment Configuration\n\nCreate `.env` file from template:\n\n```bash\ncp .env.example .env\n```\n\nUpdate the following variables:\n\n```env\n# Required\nDATABASE_URL="postgresql://user:password@localhost:5432/holovitals"\nOPENAI_API_KEY="sk-..."\n\n# Optional (for full functionality)\nAZURE_OPENAI_KEY="..."\nANTHROPIC_API_KEY="..."\nAZURE_SUBSCRIPTION_ID="..."\n```\n\n### Step 2: Install Dependencies\n\n```bash\ncd medical-analysis-platform\nnpm install\n```\n\n### Step 3: Database Setup\n\n**Option A: Automated Setup (Recommended)**\n\n```bash\nnpm run db:setup\n```\n\nThis will:\n1. Generate Prisma Client\n2. Create and apply migrations\n3. Seed the database with test data\n\n**Option B: Manual Setup**\n\n```bash\n# Generate Prisma Client\nnpm run db:generate\n\n# Create migration\nnpm run db:migrate\n\n# Seed database\nnpm run db:seed\n```\n\n**Option C: Using Shell Script**\n\n```bash\nchmod +x scripts/setup-database.sh\n./scripts/setup-database.sh\n```\n\n### Step 4: Verify Setup\n\n```bash\n# Open Prisma Studio to view data\nnpm run db:studio\n```\n\nThis opens a web interface at `http://localhost:5555` where you can:\n- View all tables\n- Browse seeded data\n- Test queries\n- Verify relationships\n\n### Step 5: Test Database Connection\n\nCreate a test file `test-db.ts`:\n\n```typescript\nimport { PrismaClient } from \'@prisma/client\';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  // Test user query\n  const users = await prisma.user.findMany();\n  console.log(\'Users:\', users.length);\n  \n  // Test model performance query\n  const models = await prisma.modelPerformance.findMany();\n  console.log(\'Models:\', models.length);\n  \n  // Test system health query\n  const health = await prisma.systemHealth.findMany();\n  console.log(\'Health checks:\', health.length);\n}\n\nmain()\n  .catch(console.error)\n  .finally(() => prisma.$disconnect());\n```\n\nRun test:\n\n```bash\nnpx ts-node test-db.ts\n```\n\n## Database Migrations\n\n### Creating New Migrations\n\nWhen you modify the schema:\n\n```bash\nnpm run db:migrate\n```\n\nThis will:\n1. Detect schema changes\n2. Generate migration SQL\n3. Apply migration to database\n4. Update Prisma Client\n\n### Migration Best Practices\n\n1. **Always backup** before running migrations in production\n2. **Test migrations** in development first\n3. **Review generated SQL** before applying\n4. **Use descriptive names** for migrations\n5. **Never edit** applied migrations\n\n### Rollback Migrations\n\nIf needed, rollback to a previous migration:\n\n```bash\nnpx prisma migrate resolve --rolled-back <migration-name>\n```\n\n## Database Seeding\n\n### Default Seed Data\n\nThe seed script creates:\n\n1. **Test User**\n   - Email: `test@holovitals.com`\n   - Password: `TestPassword123!`\n   - MFA: Disabled\n\n2. **Test Patient**\n   - Name: John Doe\n   - DOB: 1990-01-01\n\n3. **Model Performance Data**\n   - GPT-3.5 Turbo\n   - GPT-4 Turbo\n   - Claude 3 Opus\n   - Claude 3 Sonnet\n\n4. **System Health Data**\n   - All components (chatbot, queue, provisioner, etc.)\n   - Initial healthy status\n\n### Custom Seeding\n\nAdd custom seed data in `prisma/seed.ts`:\n\n```typescript\n// Add your custom seed data\nconst customUser = await prisma.user.create({\n  data: {\n    email: \'custom@example.com\',\n    passwordHash: await bcrypt.hash(\'password\', 12),\n  },\n});\n```\n\nRun seed:\n\n```bash\nnpm run db:seed\n```\n\n## Database Maintenance\n\n### Backup Database\n\n```bash\n# PostgreSQL backup\npg_dump holovitals > backup.sql\n\n# Restore from backup\npsql holovitals < backup.sql\n```\n\n### Reset Database\n\n**⚠️ Warning: This deletes all data!**\n\n```bash\n# Reset and reseed\nnpx prisma migrate reset\n```\n\n### Update Prisma Client\n\nAfter schema changes:\n\n```bash\nnpm run db:generate\n```\n\n## Common Issues & Solutions\n\n### Issue 1: Connection Refused\n\n**Error:** `Can\'t reach database server`\n\n**Solution:**\n1. Check PostgreSQL is running: `pg_isready`\n2. Verify DATABASE_URL in `.env`\n3. Check firewall settings\n4. Ensure PostgreSQL accepts connections\n\n### Issue 2: Migration Failed\n\n**Error:** `Migration failed to apply`\n\n**Solution:**\n1. Check database logs\n2. Verify schema syntax\n3. Rollback and retry\n4. Check for conflicting data\n\n### Issue 3: Seed Failed\n\n**Error:** `Unique constraint failed`\n\n**Solution:**\n1. Reset database: `npx prisma migrate reset`\n2. Check for duplicate data\n3. Update seed script\n\n### Issue 4: Prisma Client Out of Sync\n\n**Error:** `Prisma Client is out of sync`\n\n**Solution:**\n```bash\nnpm run db:generate\n```\n\n## Performance Optimization\n\n### Indexes\n\nThe schema includes indexes on:\n- Foreign keys\n- Frequently queried fields\n- Date/timestamp fields\n- Status fields\n\n### Query Optimization\n\n```typescript\n// Use select to limit fields\nconst users = await prisma.user.findMany({\n  select: {\n    id: true,\n    email: true,\n  },\n});\n\n// Use include for relations\nconst userWithPatients = await prisma.user.findUnique({\n  where: { id: userId },\n  include: {\n    patients: true,\n  },\n});\n\n// Use pagination\nconst users = await prisma.user.findMany({\n  take: 10,\n  skip: 0,\n});\n```\n\n### Connection Pooling\n\nConfigure in `.env`:\n\n```env\nDATABASE_URL="postgresql://user:password@localhost:5432/holovitals?connection_limit=10"\n```\n\n## Security Considerations\n\n### 1. Environment Variables\n\n- Never commit `.env` to version control\n- Use different credentials per environment\n- Rotate credentials regularly\n\n### 2. Database Access\n\n- Use least privilege principle\n- Create separate database users for different services\n- Enable SSL for production connections\n\n### 3. Data Encryption\n\n- Encrypt sensitive fields (already implemented in schema)\n- Use encrypted connections (SSL/TLS)\n- Implement field-level encryption where needed\n\n### 4. Audit Logging\n\n- All PHI access is logged\n- Audit logs retained for 7 years\n- Regular audit log reviews\n\n## Next Steps\n\n### Phase 3: Service Implementation\n\nNow that the database is set up, proceed to:\n\n1. **Implement LightweightChatbotService**\n   - Uses `ChatConversation` and `ChatMessage` tables\n   - Tracks costs in `ChatbotCost` table\n\n2. **Implement ContextOptimizerService**\n   - Uses `PromptOptimization` and `PromptSplit` tables\n   - Optimizes token usage\n\n3. **Implement AnalysisQueueService**\n   - Uses `AnalysisQueue` table\n   - Manages priority-based processing\n\n4. **Implement InstanceProvisionerService**\n   - Uses `CloudInstance` and `InstanceCost` tables\n   - Manages ephemeral instances\n\nSee [Phase 3 Documentation](./PHASE_3_SERVICES.md) for details.\n\n## Database Schema Diagram\n\n```\nUsers\n  ├─ Patients\n  ├─ Documents\n  │   ├─ OcrResults\n  │   ├─ ExtractedData\n  │   └─ DocumentEmbeddings\n  ├─ ChatConversations\n  │   └─ ChatMessages\n  ├─ AnalysisQueue\n  │   └─ CloudInstance\n  ├─ UserSessions\n  ├─ ConsentGrants\n  │   └─ AccessLogs\n  └─ AuditLogs\n\nPatientRepository (Sandboxed)\n  ├─ PatientDiagnosis\n  ├─ PatientMedication\n  ├─ PatientAllergy\n  ├─ PatientVitalSign\n  ├─ PatientProcedure\n  ├─ PatientImmunization\n  └─ PatientFamilyHistory\n\nSystem Monitoring\n  ├─ ModelPerformance\n  ├─ SystemHealth\n  ├─ ChatbotCost\n  ├─ AnalysisCost\n  └─ InstanceCost\n```\n\n## Resources\n\n- [Prisma Documentation](https://www.prisma.io/docs)\n- [PostgreSQL Documentation](https://www.postgresql.org/docs/)\n- [HoloVitals Architecture](./AI_ARCHITECTURE.md)\n- [Database Best Practices](https://www.prisma.io/docs/guides/performance-and-optimization)\n\n## Support\n\nFor issues or questions:\n1. Check [Common Issues](#common-issues--solutions)\n2. Review Prisma logs: `npx prisma --help`\n3. Create a GitHub issue\n4. Contact the development team\n\n---\n\n**Phase 2 Status:** ✅ Complete\n\n**Next Phase:** [Phase 3 - Service Implementation](./PHASE_3_SERVICES.md)\n</create-file>\n</function_calls>'}