{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="prisma/schema-dev-qa-repositories.prisma">\n// Development & QA Repository System Schema\n// This file contains the database schema for Bug Repository, Development & Enhancement Repository,\n// and Development & QA Processing Repository\n\n// ============================================================================\n// BUG REPOSITORY\n// ============================================================================\n\nenum BugSource {\n  USER_REPORT      // User-reported via UI or support\n  SYSTEM_DETECTION // Automatically detected by monitoring\n  AUTOMATED_TEST   // Found during automated testing\n  SECURITY_SCAN    // Discovered in security audit\n  PERFORMANCE_MON  // Performance degradation detected\n  CODE_REVIEW      // Found during code review\n  EXTERNAL_REPORT  // Reported by external party\n}\n\nenum BugSeverity {\n  CRITICAL  // System down, data loss, security breach\n  HIGH      // Major functionality broken, workaround difficult\n  MEDIUM    // Functionality impaired, workaround available\n  LOW       // Minor issue, cosmetic, or edge case\n  TRIVIAL   // Typo, formatting, non-functional\n}\n\nenum BugStatus {\n  NEW           // Just reported, not yet triaged\n  TRIAGED       // Reviewed and categorized\n  CONFIRMED     // Reproduced and validated\n  IN_PROGRESS   // Being actively worked on\n  FIXED         // Fix implemented in dev\n  TESTING       // Being tested in QA\n  VERIFIED      // Fix verified in QA\n  DEPLOYED      // Fix deployed to production\n  CLOSED        // Resolved and closed\n  WONT_FIX      // Decided not to fix\n  DUPLICATE     // Duplicate of another bug\n  CANNOT_REPRO  // Cannot reproduce the issue\n}\n\nenum BugCategory {\n  AUTHENTICATION    // Login, MFA, session issues\n  AUTHORIZATION     // Permission, consent, access control\n  DATA_INTEGRITY    // Data corruption, loss, inconsistency\n  PERFORMANCE       // Slow response, timeout, resource usage\n  SECURITY          // Vulnerabilities, exploits, breaches\n  UI_UX             // Interface, usability, display issues\n  API               // API errors, integration issues\n  DATABASE          // Query errors, connection issues\n  AI_ANALYSIS       // AI processing, analysis errors\n  DOCUMENT_PROCESS  // OCR, parsing, extraction issues\n  NOTIFICATION      // Email, alerts, messaging issues\n  REPOSITORY        // Repository system issues\n  DEPLOYMENT        // Build, deployment, configuration\n  MONITORING        // Logging, metrics, alerting\n  OTHER             // Uncategorized or misc issues\n}\n\nmodel Bug {\n  id                String        @id @default(cuid())\n  \n  // Basic Information\n  title             String\n  description       String        @db.Text\n  source            BugSource\n  severity          BugSeverity\n  status            BugStatus     @default(NEW)\n  category          BugCategory\n  \n  // Reporter Information\n  reportedBy        String?       // User ID or system identifier\n  reportedByEmail   String?\n  reportedAt        DateTime      @default(now())\n  \n  // Technical Details\n  stackTrace        String?       @db.Text\n  errorMessage      String?       @db.Text\n  affectedComponent String?       // Component/module affected\n  affectedVersion   String?       // Version where bug exists\n  environment       String?       // Dev, QA, Staging, Production\n  \n  // Reproduction\n  stepsToReproduce  String?       @db.Text\n  expectedBehavior  String?       @db.Text\n  actualBehavior    String?       @db.Text\n  reproducible      Boolean       @default(false)\n  \n  // Impact Analysis\n  usersAffected     Int?          // Number of users impacted\n  impactScore       Float?        // Calculated impact score (0-100)\n  businessImpact    String?       @db.Text\n  \n  // Priority & Assignment\n  priority          Int           @default(0) // Higher = more urgent\n  assignedTo        String?       // Developer ID\n  assignedAt        DateTime?\n  \n  // Resolution\n  fixedBy           String?       // Developer ID\n  fixedAt           DateTime?\n  fixDescription    String?       @db.Text\n  fixVersion        String?       // Version where fix is included\n  \n  // Duplicate Management\n  isDuplicate       Boolean       @default(false)\n  duplicateOf       String?       // ID of original bug\n  duplicates        Bug[]         @relation("BugDuplicates")\n  originalBug       Bug?          @relation("BugDuplicates", fields: [duplicateOf], references: [id])\n  \n  // Related Items\n  relatedBugs       String[]      // IDs of related bugs\n  relatedFeatures   String[]      // IDs of related features\n  \n  // Metadata\n  tags              String[]\n  attachments       String[]      // URLs to screenshots, logs, etc.\n  \n  // Timestamps\n  createdAt         DateTime      @default(now())\n  updatedAt         DateTime      @updatedAt\n  closedAt          DateTime?\n  \n  // Relationships\n  comments          BugComment[]\n  history           BugHistory[]\n  testCases         BugTestCase[]\n  \n  @@index([status, severity, priority])\n  @@index([category, status])\n  @@index([reportedAt])\n  @@index([assignedTo])\n}\n\nmodel BugComment {\n  id          String    @id @default(cuid())\n  bugId       String\n  bug         Bug       @relation(fields: [bugId], references: [id], onDelete: Cascade)\n  \n  authorId    String\n  authorName  String\n  content     String    @db.Text\n  isInternal  Boolean   @default(false) // Internal team comment vs public\n  \n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  \n  @@index([bugId])\n}\n\nmodel BugHistory {\n  id          String    @id @default(cuid())\n  bugId       String\n  bug         Bug       @relation(fields: [bugId], references: [id], onDelete: Cascade)\n  \n  field       String    // Field that changed\n  oldValue    String?   @db.Text\n  newValue    String?   @db.Text\n  changedBy   String    // User ID\n  changedAt   DateTime  @default(now())\n  \n  @@index([bugId, changedAt])\n}\n\nmodel BugTestCase {\n  id              String    @id @default(cuid())\n  bugId           String\n  bug             Bug       @relation(fields: [bugId], references: [id], onDelete: Cascade)\n  \n  title           String\n  description     String    @db.Text\n  steps           String    @db.Text\n  expectedResult  String    @db.Text\n  automated       Boolean   @default(false)\n  testScript      String?   @db.Text\n  \n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n  \n  @@index([bugId])\n}\n\n// ============================================================================\n// DEVELOPMENT & ENHANCEMENT REPOSITORY\n// ============================================================================\n\nenum FeatureStatus {\n  PROPOSED      // Initial proposal\n  EVALUATING    // Under evaluation\n  APPROVED      // Approved for development\n  PLANNED       // Added to roadmap\n  IN_PROGRESS   // Being developed\n  TESTING       // In QA testing\n  COMPLETED     // Deployed to production\n  REJECTED      // Not approved\n  DEFERRED      // Postponed to future\n  CANCELLED     // Cancelled\n}\n\nenum FeaturePriority {\n  CRITICAL      // Must have, blocking other work\n  HIGH          // Important, should be done soon\n  MEDIUM        // Nice to have, moderate impact\n  LOW           // Low impact, can wait\n  BACKLOG       // Future consideration\n}\n\nenum FeatureType {\n  NEW_FEATURE       // Brand new functionality\n  ENHANCEMENT       // Improvement to existing feature\n  REFACTORING       // Code improvement, no user-facing change\n  PERFORMANCE       // Performance optimization\n  SECURITY          // Security improvement\n  TECHNICAL_DEBT    // Addressing technical debt\n  INTEGRATION       // Third-party integration\n  DOCUMENTATION     // Documentation improvement\n}\n\nmodel Feature {\n  id                  String            @id @default(cuid())\n  \n  // Basic Information\n  title               String\n  description         String            @db.Text\n  type                FeatureType\n  status              FeatureStatus     @default(PROPOSED)\n  priority            FeaturePriority   @default(MEDIUM)\n  \n  // Requester Information\n  requestedBy         String?           // User ID\n  requestedByEmail    String?\n  requestedAt         DateTime          @default(now())\n  \n  // Business Value\n  businessValue       String?           @db.Text\n  targetAudience      String?           // Who benefits\n  expectedImpact      String?           @db.Text\n  successMetrics      String?           @db.Text\n  \n  // Technical Details\n  technicalSpec       String?           @db.Text\n  estimatedEffort     Int?              // Story points or hours\n  complexity          Int?              // 1-10 scale\n  \n  // Dependencies\n  dependsOn           String[]          // IDs of features this depends on\n  blockedBy           String[]          // IDs of bugs/issues blocking this\n  blocks              String[]          // IDs of features this blocks\n  \n  // Planning\n  targetRelease       String?           // Version or release name\n  targetDate          DateTime?\n  assignedTo          String?           // Team or developer ID\n  assignedAt          DateTime?\n  \n  // Implementation\n  startedAt           DateTime?\n  completedAt         DateTime?\n  deployedAt          DateTime?\n  implementedBy       String?           // Developer ID\n  \n  // Related Items\n  relatedBugs         String[]          // Bug IDs that inspired this\n  relatedFeatures     String[]          // Related feature IDs\n  \n  // Metadata\n  tags                String[]\n  attachments         String[]          // Design docs, mockups, etc.\n  \n  // Timestamps\n  createdAt           DateTime          @default(now())\n  updatedAt           DateTime          @updatedAt\n  \n  // Relationships\n  comments            FeatureComment[]\n  history             FeatureHistory[]\n  tasks               FeatureTask[]\n  votes               FeatureVote[]\n  \n  @@index([status, priority])\n  @@index([type, status])\n  @@index([targetRelease])\n  @@index([requestedAt])\n}\n\nmodel FeatureComment {\n  id          String    @id @default(cuid())\n  featureId   String\n  feature     Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)\n  \n  authorId    String\n  authorName  String\n  content     String    @db.Text\n  isInternal  Boolean   @default(false)\n  \n  createdAt   DateTime  @default(now())\n  updatedAt   DateTime  @updatedAt\n  \n  @@index([featureId])\n}\n\nmodel FeatureHistory {\n  id          String    @id @default(cuid())\n  featureId   String\n  feature     Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)\n  \n  field       String\n  oldValue    String?   @db.Text\n  newValue    String?   @db.Text\n  changedBy   String\n  changedAt   DateTime  @default(now())\n  \n  @@index([featureId, changedAt])\n}\n\nmodel FeatureTask {\n  id              String    @id @default(cuid())\n  featureId       String\n  feature         Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)\n  \n  title           String\n  description     String?   @db.Text\n  status          String    @default("TODO") // TODO, IN_PROGRESS, DONE\n  assignedTo      String?\n  estimatedHours  Int?\n  actualHours     Int?\n  \n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n  completedAt     DateTime?\n  \n  @@index([featureId])\n}\n\nmodel FeatureVote {\n  id          String    @id @default(cuid())\n  featureId   String\n  feature     Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)\n  \n  userId      String\n  vote        Int       // +1 for upvote, -1 for downvote\n  comment     String?   @db.Text\n  \n  createdAt   DateTime  @default(now())\n  \n  @@unique([featureId, userId])\n  @@index([featureId])\n}\n\nmodel Roadmap {\n  id              String    @id @default(cuid())\n  \n  name            String\n  description     String?   @db.Text\n  version         String    // e.g., "v2.0", "Q1 2025"\n  \n  startDate       DateTime\n  endDate         DateTime\n  \n  features        String[]  // Feature IDs included in this roadmap\n  goals           String[]  // High-level goals\n  \n  status          String    @default("PLANNING") // PLANNING, ACTIVE, COMPLETED\n  \n  createdAt       DateTime  @default(now())\n  updatedAt       DateTime  @updatedAt\n  \n  @@index([version])\n  @@index([status])\n}\n\n// ============================================================================\n// DEVELOPMENT & QA PROCESSING REPOSITORY\n// ============================================================================\n\nenum EnvironmentType {\n  DEVELOPMENT   // Active development\n  QA            // Quality assurance testing\n  STAGING       // Pre-production validation\n  PRODUCTION    // Live production (read-only reference)\n}\n\nenum DeploymentStatus {\n  PENDING       // Waiting to deploy\n  IN_PROGRESS   // Deployment in progress\n  SUCCESS       // Successfully deployed\n  FAILED        // Deployment failed\n  ROLLED_BACK   // Rolled back to previous version\n}\n\nenum TestStatus {\n  PENDING       // Not yet run\n  RUNNING       // Currently executing\n  PASSED        // All tests passed\n  FAILED        // Some tests failed\n  SKIPPED       // Tests skipped\n  ERROR         // Error during execution\n}\n\nmodel DevelopmentProject {\n  id                String              @id @default(cuid())\n  \n  // Basic Information\n  name              String\n  description       String              @db.Text\n  type              String              // BUG_FIX, FEATURE, REFACTOR, etc.\n  \n  // Source\n  sourceType        String              // BUG, FEATURE, TECHNICAL_DEBT\n  sourceId          String?             // ID of bug or feature\n  \n  // Status\n  status            String              @default("PLANNING") // PLANNING, DEVELOPMENT, TESTING, STAGING, DEPLOYED, CLOSED\n  \n  // Assignment\n  assignedTo        String?             // Developer ID\n  assignedTeam      String?\n  \n  // Timing\n  startedAt         DateTime?\n  completedAt       DateTime?\n  \n  // Metadata\n  tags              String[]\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  \n  // Relationships\n  environments      ProjectEnvironment[]\n  deployments       Deployment[]\n  testRuns          TestRun[]\n  codeChanges       CodeChange[]\n  \n  @@index([status])\n  @@index([sourceType, sourceId])\n}\n\nmodel ProjectEnvironment {\n  id                String              @id @default(cuid())\n  projectId         String\n  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  \n  environment       EnvironmentType\n  \n  // Configuration\n  branch            String              // Git branch\n  version           String?             // Version deployed\n  databaseUrl       String?             // Environment-specific DB\n  \n  // Status\n  isActive          Boolean             @default(true)\n  healthStatus      String              @default("UNKNOWN") // HEALTHY, DEGRADED, DOWN, UNKNOWN\n  lastHealthCheck   DateTime?\n  \n  // Resources\n  cpuUsage          Float?\n  memoryUsage       Float?\n  diskUsage         Float?\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  \n  @@unique([projectId, environment])\n  @@index([projectId])\n}\n\nmodel Deployment {\n  id                String              @id @default(cuid())\n  projectId         String\n  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  \n  // Deployment Details\n  environment       EnvironmentType\n  version           String\n  branch            String\n  commitHash        String?\n  \n  // Status\n  status            DeploymentStatus    @default(PENDING)\n  \n  // Execution\n  startedAt         DateTime?\n  completedAt       DateTime?\n  deployedBy        String              // User ID\n  \n  // Results\n  success           Boolean             @default(false)\n  errorMessage      String?             @db.Text\n  logs              String?             @db.Text\n  \n  // Rollback\n  canRollback       Boolean             @default(true)\n  rolledBackAt      DateTime?\n  rolledBackBy      String?\n  previousVersion   String?\n  \n  // Metadata\n  notes             String?             @db.Text\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  \n  @@index([projectId, environment])\n  @@index([status])\n}\n\nmodel TestRun {\n  id                String              @id @default(cuid())\n  projectId         String\n  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  \n  // Test Details\n  environment       EnvironmentType\n  testSuite         String              // Name of test suite\n  testType          String              // UNIT, INTEGRATION, E2E, PERFORMANCE, SECURITY\n  \n  // Status\n  status            TestStatus          @default(PENDING)\n  \n  // Execution\n  startedAt         DateTime?\n  completedAt       DateTime?\n  duration          Int?                // Seconds\n  \n  // Results\n  totalTests        Int                 @default(0)\n  passedTests       Int                 @default(0)\n  failedTests       Int                 @default(0)\n  skippedTests      Int                 @default(0)\n  \n  // Details\n  results           String?             @db.Text // JSON with detailed results\n  coverage          Float?              // Code coverage percentage\n  \n  // Metadata\n  triggeredBy       String?             // User ID or "AUTOMATED"\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  \n  @@index([projectId, environment])\n  @@index([status])\n}\n\nmodel CodeChange {\n  id                String              @id @default(cuid())\n  projectId         String\n  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)\n  \n  // Change Details\n  type              String              // ADD, MODIFY, DELETE, RENAME\n  filePath          String\n  \n  // Git Information\n  commitHash        String?\n  commitMessage     String?             @db.Text\n  branch            String?\n  author            String?\n  \n  // Code Metrics\n  linesAdded        Int?\n  linesRemoved      Int?\n  complexity        Int?                // Cyclomatic complexity\n  \n  // Review\n  reviewed          Boolean             @default(false)\n  reviewedBy        String?\n  reviewedAt        DateTime?\n  reviewComments    String?             @db.Text\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  \n  @@index([projectId])\n  @@index([commitHash])\n}\n\nmodel EnvironmentHealth {\n  id                String              @id @default(cuid())\n  \n  environment       EnvironmentType\n  \n  // Health Metrics\n  status            String              // HEALTHY, DEGRADED, DOWN\n  uptime            Float?              // Percentage\n  responseTime      Float?              // Average response time (ms)\n  errorRate         Float?              // Percentage\n  \n  // Resources\n  cpuUsage          Float?\n  memoryUsage       Float?\n  diskUsage         Float?\n  activeConnections Int?\n  \n  // Checks\n  lastCheck         DateTime            @default(now())\n  checksPerformed   String[]            // List of health checks run\n  \n  // Issues\n  issues            String[]            // List of detected issues\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  \n  @@index([environment, lastCheck])\n}\n</create-file>\n</function_calls>'}