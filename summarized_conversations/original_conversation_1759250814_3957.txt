{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/lib/repositories/interfaces/IRepository.ts">\n/**\n * Base Repository Interface\n * All repositories in HoloVitals must implement this interface\n */\n\nexport interface IRepository<T> {\n  /**\n   * Repository identifier\n   */\n  readonly name: string;\n  \n  /**\n   * Repository version for tracking changes\n   */\n  readonly version: string;\n  \n  /**\n   * Initialize the repository\n   */\n  initialize(): Promise<void>;\n  \n  /**\n   * Store data in the repository\n   */\n  store(key: string, data: T): Promise<void>;\n  \n  /**\n   * Retrieve data from the repository\n   */\n  retrieve(key: string): Promise<T | null>;\n  \n  /**\n   * Update existing data\n   */\n  update(key: string, data: Partial<T>): Promise<void>;\n  \n  /**\n   * Delete data from the repository\n   */\n  delete(key: string): Promise<void>;\n  \n  /**\n   * Check if data exists\n   */\n  exists(key: string): Promise<boolean>;\n  \n  /**\n   * Clear all data (use with caution)\n   */\n  clear(): Promise<void>;\n  \n  /**\n   * Get repository health status\n   */\n  getHealth(): Promise<RepositoryHealth>;\n}\n\nexport interface RepositoryHealth {\n  status: \'healthy\' | \'degraded\' | \'unhealthy\';\n  lastCheck: Date;\n  metrics: {\n    itemCount: number;\n    storageUsed: number;\n    averageResponseTime: number;\n  };\n  issues?: string[];\n}\n\nexport interface RepositoryMetadata {\n  createdAt: Date;\n  updatedAt: Date;\n  version: number;\n  tags?: string[];\n}\n</create-file>\n</function_calls>'}