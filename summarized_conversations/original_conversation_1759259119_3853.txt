{'role': 'assistant', 'content': 'Now let\'s create a database seed file for initial data:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/prisma/seed.ts">\nimport { PrismaClient } from \'@prisma/client\';\nimport * as bcrypt from \'bcrypt\';\n\nconst prisma = new PrismaClient();\n\nasync function main() {\n  console.log(\'🌱 Seeding database...\');\n\n  // Create test user\n  const hashedPassword = await bcrypt.hash(\'TestPassword123!\', 12);\n  \n  const testUser = await prisma.user.upsert({\n    where: { email: \'test@holovitals.com\' },\n    update: {},\n    create: {\n      email: \'test@holovitals.com\',\n      passwordHash: hashedPassword,\n      mfaEnabled: false,\n    },\n  });\n\n  console.log(\'✅ Created test user:\', testUser.email);\n\n  // Create test patient\n  const testPatient = await prisma.patient.upsert({\n    where: { id: \'test-patient-id\' },\n    update: {},\n    create: {\n      id: \'test-patient-id\',\n      userId: testUser.id,\n      firstName: \'John\',\n      lastName: \'Doe\',\n      dateOfBirth: new Date(\'1990-01-01\'),\n    },\n  });\n\n  console.log(\'✅ Created test patient:\', testPatient.firstName, testPatient.lastName);\n\n  // Seed model performance data\n  const models = [\n    {\n      model: \'gpt-3.5-turbo\',\n      provider: \'openai\',\n      avgResponseTime: 1.5,\n      avgTokensPerSecond: 50,\n      successRate: 0.98,\n      errorRate: 0.02,\n      avgCostPerRequest: 0.002,\n      avgCostPerToken: 0.000002,\n      totalRequests: 0,\n      totalTokens: 0,\n      totalCost: 0,\n      periodStart: new Date(),\n      periodEnd: new Date(),\n    },\n    {\n      model: \'gpt-4-turbo\',\n      provider: \'openai\',\n      avgResponseTime: 3.5,\n      avgTokensPerSecond: 30,\n      successRate: 0.99,\n      errorRate: 0.01,\n      avgCostPerRequest: 0.05,\n      avgCostPerToken: 0.00003,\n      totalRequests: 0,\n      totalTokens: 0,\n      totalCost: 0,\n      periodStart: new Date(),\n      periodEnd: new Date(),\n    },\n    {\n      model: \'claude-3-opus\',\n      provider: \'anthropic\',\n      avgResponseTime: 4.0,\n      avgTokensPerSecond: 25,\n      successRate: 0.99,\n      errorRate: 0.01,\n      avgCostPerRequest: 0.075,\n      avgCostPerToken: 0.000045,\n      totalRequests: 0,\n      totalTokens: 0,\n      totalCost: 0,\n      periodStart: new Date(),\n      periodEnd: new Date(),\n    },\n    {\n      model: \'claude-3-sonnet\',\n      provider: \'anthropic\',\n      avgResponseTime: 2.5,\n      avgTokensPerSecond: 35,\n      successRate: 0.98,\n      errorRate: 0.02,\n      avgCostPerRequest: 0.015,\n      avgCostPerToken: 0.000009,\n      totalRequests: 0,\n      totalTokens: 0,\n      totalCost: 0,\n      periodStart: new Date(),\n      periodEnd: new Date(),\n    },\n  ];\n\n  for (const modelData of models) {\n    await prisma.modelPerformance.create({\n      data: modelData,\n    });\n  }\n\n  console.log(\'✅ Seeded model performance data\');\n\n  // Seed system health monitoring\n  const components = [\n    \'chatbot\',\n    \'queue\',\n    \'provisioner\',\n    \'database\',\n    \'cache\',\n    \'storage\',\n  ];\n\n  for (const component of components) {\n    await prisma.systemHealth.create({\n      data: {\n        component,\n        status: \'healthy\',\n        responseTime: Math.random() * 100,\n        errorRate: 0,\n        throughput: Math.random() * 1000,\n        cpuUsage: Math.random() * 50,\n        memoryUsage: Math.random() * 60,\n        diskUsage: Math.random() * 40,\n      },\n    });\n  }\n\n  console.log(\'✅ Seeded system health data\');\n\n  console.log(\'🎉 Seeding complete!\');\n}\n\nmain()\n  .catch((e) => {\n    console.error(\'❌ Error seeding database:\', e);\n    process.exit(1);\n  })\n  .finally(async () => {\n    await prisma.$disconnect();\n  });\n</create-file>\n</function_calls>'}