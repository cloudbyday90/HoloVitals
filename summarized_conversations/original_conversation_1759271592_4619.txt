{'role': 'assistant', 'content': 'Now let me create a batch optimization endpoint:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/context-optimizer/batch/route.ts">\n/**\n * Batch Context Optimizer API\n * \n * Endpoint for optimizing multiple contexts in a single request.\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { contextOptimizer, OptimizationStrategy, ContentType } from \'@/lib/services/ContextOptimizerService\';\n\n/**\n * POST /api/context-optimizer/batch\n * Batch optimize multiple contexts\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { requests } = body;\n\n    // Validate requests array\n    if (!Array.isArray(requests) || requests.length === 0) {\n      return NextResponse.json(\n        { error: \'requests must be a non-empty array\' },\n        { status: 400 }\n      );\n    }\n\n    // Limit batch size\n    if (requests.length > 50) {\n      return NextResponse.json(\n        { error: \'Maximum 50 requests per batch\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate each request\n    for (const req of requests) {\n      if (!req.content || typeof req.content !== \'string\') {\n        return NextResponse.json(\n          { error: \'Each request must have a content string\' },\n          { status: 400 }\n        );\n      }\n\n      if (req.strategy && !Object.values(OptimizationStrategy).includes(req.strategy)) {\n        return NextResponse.json(\n          { error: \'Invalid optimization strategy in one or more requests\' },\n          { status: 400 }\n        );\n      }\n\n      if (req.contentType && !Object.values(ContentType).includes(req.contentType)) {\n        return NextResponse.json(\n          { error: \'Invalid content type in one or more requests\' },\n          { status: 400 }\n        );\n      }\n    }\n\n    // Process batch\n    const results = await contextOptimizer.batchOptimize(requests);\n\n    // Calculate aggregate statistics\n    const totalOriginalTokens = results.reduce((sum, r) => sum + r.originalTokens, 0);\n    const totalOptimizedTokens = results.reduce((sum, r) => sum + r.optimizedTokens, 0);\n    const totalReduction = ((totalOriginalTokens - totalOptimizedTokens) / totalOriginalTokens) * 100;\n    const averageQuality = results.reduce((sum, r) => sum + r.metrics.qualityScore, 0) / results.length;\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        results,\n        summary: {\n          totalRequests: results.length,\n          totalOriginalTokens,\n          totalOptimizedTokens,\n          totalTokensSaved: totalOriginalTokens - totalOptimizedTokens,\n          averageReduction: Math.round(totalReduction * 100) / 100,\n          averageQualityScore: Math.round(averageQuality * 100) / 100,\n          estimatedCostSavings: Math.round(((totalOriginalTokens - totalOptimizedTokens) / 1000000) * 15 * 100) / 100\n        }\n      }\n    });\n\n  } catch (error: any) {\n    console.error(\'Batch optimization error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to process batch optimization\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}