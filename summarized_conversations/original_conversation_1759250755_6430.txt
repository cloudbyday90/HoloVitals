{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="PROJECT_OVERVIEW.md">\n# Medical Analysis Platform - Project Overview\n\n## Vision\nA sophisticated medical document analysis platform that uses OCR and AI to process medical documents (after-care summaries, bloodwork panels, imaging results) and provides intelligent analysis by cross-referencing existing documents and maintaining context.\n\n## Key Differentiators from Doctronic\n1. **Advanced OCR Processing**: Extract structured data from various medical document formats\n2. **Cross-Reference Intelligence**: Link related documents and results for comprehensive analysis\n3. **Context-Aware AI**: Maintain patient history and document context across sessions\n4. **Multi-Document Analysis**: Compare results over time (e.g., bloodwork trends)\n\n## Core Capabilities\n\n### 1. Document Processing\n- PDF upload and storage\n- OCR extraction using advanced medical document recognition\n- Structured data extraction (dates, values, test names, etc.)\n- Support for multiple document types:\n  - After-care summaries\n  - Bloodwork panel results\n  - Imaging reports (X-ray, MRI, CT scan reports)\n  - Prescription records\n  - Discharge summaries\n\n### 2. AI-Powered Analysis\n- Natural language queries about medical documents\n- Trend analysis across multiple test results\n- Anomaly detection in lab values\n- Contextual recommendations based on document history\n- Cross-referencing between related documents\n\n### 3. Context Management\n- Patient document timeline\n- Related document linking\n- Historical data preservation\n- Session context maintenance\n- Smart document categorization\n\n## Technology Stack Recommendations\n\n### Frontend\n- **Framework**: Next.js 14+ (React with App Router)\n- **UI Library**: Tailwind CSS + shadcn/ui components\n- **State Management**: Zustand or React Context\n- **Document Viewer**: PDF.js or react-pdf\n- **Charts**: Recharts or Chart.js for data visualization\n\n### Backend\n- **Runtime**: Node.js with Express or Next.js API routes\n- **Database**: PostgreSQL with Prisma ORM\n- **File Storage**: AWS S3 or local storage with MinIO\n- **OCR Engine**: \n  - Tesseract.js for client-side processing\n  - Google Cloud Vision API or AWS Textract for server-side\n  - pdf.js for PDF text extraction\n- **AI Integration**:\n  - OpenAI API for analysis\n  - LangChain for context management\n  - Vector database (Pinecone/Weaviate) for semantic search\n\n### Infrastructure\n- **Containerization**: Docker\n- **Deployment**: Vercel (frontend) + Railway/Render (backend)\n- **CI/CD**: GitHub Actions\n\n## System Architecture\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│                        Frontend (Next.js)                    │\n│  ┌──────────────┐  ┌──────────────┐  ┌──────────────┐      │\n│  │   Upload UI  │  │  Viewer UI   │  │ Analysis UI  │      │\n│  └──────────────┘  └──────────────┘  └──────────────┘      │\n└─────────────────────────────────────────────────────────────┘\n                              │\n                              ▼\n┌─────────────────────────────────────────────────────────────┐\n│                      API Layer (REST/GraphQL)                │\n└─────────────────────────────────────────────────────────────┘\n                              │\n        ┌─────────────────────┼─────────────────────┐\n        ▼                     ▼                     ▼\n┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│   Document   │    │     OCR      │    │  AI Agent    │\n│   Service    │    │   Service    │    │   Service    │\n└──────────────┘    └──────────────┘    └──────────────┘\n        │                     │                     │\n        ▼                     ▼                     ▼\n┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│  PostgreSQL  │    │ File Storage │    │Vector Store  │\n│   Database   │    │   (S3/Local) │    │  (Pinecone)  │\n└──────────────┘    └──────────────┘    └──────────────┘\n```\n\n## Key Features Breakdown\n\n### Phase 1: Core Infrastructure\n1. Document upload and storage\n2. Basic OCR text extraction\n3. Simple document viewer\n4. User authentication\n\n### Phase 2: Intelligence Layer\n1. Structured data extraction from OCR\n2. Document categorization\n3. Basic AI query interface\n4. Document linking\n\n### Phase 3: Advanced Features\n1. Trend analysis and visualization\n2. Cross-document intelligence\n3. Advanced context management\n4. Predictive insights\n\n## Security & Compliance Considerations\n- HIPAA compliance requirements\n- Data encryption at rest and in transit\n- Secure document storage\n- Access control and audit logging\n- PHI (Protected Health Information) handling\n\n## Next Steps\n1. Set up project repository and structure\n2. Create database schema\n3. Build document upload MVP\n4. Integrate OCR processing\n5. Develop AI analysis layer\n</create-file>\n</function_calls>'}