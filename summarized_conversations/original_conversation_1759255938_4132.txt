{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="prisma/schema-hipaa-compliance.prisma">\n// HIPAA Compliance Repository Schema\n// This file contains the database schema for HIPAA compliance tracking,\n// auditing, and violation management\n\n// ============================================================================\n// HIPAA RULES & REGULATIONS\n// ============================================================================\n\nenum HIPAARuleCategory {\n  PRIVACY_RULE           // 45 CFR Part 160 and Part 164, Subparts A and E\n  SECURITY_RULE          // 45 CFR Part 160 and Part 164, Subparts A and C\n  BREACH_NOTIFICATION    // 45 CFR Part 164, Subpart D\n  ENFORCEMENT_RULE       // 45 CFR Part 160, Subparts C, D, and E\n  OMNIBUS_RULE          // 2013 modifications\n}\n\nenum HIPAARuleSeverity {\n  CRITICAL              // Immediate violation, severe penalties\n  HIGH                  // Significant violation, high penalties\n  MEDIUM                // Moderate violation, medium penalties\n  LOW                   // Minor violation, low penalties\n}\n\nmodel HIPAARule {\n  id                String              @id @default(cuid())\n  \n  // Rule Identification\n  ruleId            String              @unique // e.g., HIPAA-PR-001\n  category          HIPAARuleCategory\n  subcategory       String              // e.g., MINIMUM_NECESSARY\n  \n  // Rule Details\n  title             String\n  description       String              @db.Text\n  requirements      String[]            // List of specific requirements\n  \n  // Applicability\n  applicableTo      String[]            // data_access, data_sharing, etc.\n  severity          HIPAARuleSeverity\n  \n  // Legal References\n  cfrReferences     String[]            // CFR citations\n  ocrGuidance       String[]            // OCR guidance document IDs\n  \n  // Penalties\n  tier1MinPenalty   Int                 // Minimum penalty tier 1\n  tier1MaxPenalty   Int                 // Maximum penalty tier 1\n  tier2MinPenalty   Int\n  tier2MaxPenalty   Int\n  tier3MinPenalty   Int\n  tier3MaxPenalty   Int\n  tier4MinPenalty   Int\n  tier4MaxPenalty   Int\n  \n  // Examples and Guidance\n  examples          Json?               // Array of examples\n  bestPractices     String[]\n  commonViolations  String[]\n  \n  // Metadata\n  effectiveDate     DateTime\n  lastUpdated       DateTime            @updatedAt\n  active            Boolean             @default(true)\n  \n  // Relationships\n  violations        ComplianceViolation[]\n  checks            ComplianceCheck[]\n  \n  @@index([category, severity])\n  @@index([active])\n}\n\nmodel HIPAAKnowledgeBase {\n  id                String              @id @default(cuid())\n  \n  // Article Information\n  title             String\n  category          HIPAARuleCategory\n  subcategory       String\n  \n  // Content\n  summary           String              @db.Text\n  detailedContent   String              @db.Text\n  \n  // Guidance\n  implementation    String              @db.Text\n  examples          Json                // Array of examples\n  caseStudies       Json?               // Real-world cases\n  \n  // References\n  relatedRules      String[]            // HIPAA rule IDs\n  ocrGuidance       String[]\n  legalCitations    String[]\n  externalLinks     String[]\n  \n  // Usage\n  timesReferenced   Int                 @default(0)\n  helpful           Int                 @default(0)\n  notHelpful        Int                 @default(0)\n  \n  // Metadata\n  createdBy         String\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  lastAccessed      DateTime?\n  \n  @@index([category, subcategory])\n  @@index([timesReferenced])\n}\n\n// ============================================================================\n// COMPLIANCE VERIFICATION\n// ============================================================================\n\nenum ComplianceCheckType {\n  CODE_ANALYSIS         // Static code analysis\n  DATA_FLOW            // Data flow analysis\n  ACCESS_CONTROL       // Access control verification\n  ENCRYPTION           // Encryption verification\n  AUDIT_LOG            // Audit logging verification\n  CONSENT              // Consent verification\n  AUTHENTICATION       // Authentication verification\n  PHI_HANDLING         // PHI handling verification\n  BREACH_DETECTION     // Breach detection\n  RETENTION_POLICY     // Data retention verification\n}\n\nenum ComplianceCheckStatus {\n  PENDING              // Check not yet run\n  RUNNING              // Check in progress\n  PASSED               // Check passed\n  FAILED               // Check failed\n  WARNING              // Check passed with warnings\n  BLOCKED              // Action blocked due to violation\n  REVIEW_REQUIRED      // Manual review required\n}\n\nmodel ComplianceCheck {\n  id                String              @id @default(cuid())\n  \n  // Check Information\n  checkType         ComplianceCheckType\n  status            ComplianceCheckStatus @default(PENDING)\n  \n  // Target\n  targetType        String              // code, feature, deployment, access, etc.\n  targetId          String              // ID of target being checked\n  targetDetails     Json?               // Additional target information\n  \n  // Rules Checked\n  rulesChecked      String[]            // HIPAA rule IDs\n  \n  // Results\n  passed            Boolean             @default(false)\n  score             Float?              // Compliance score 0-100\n  findings          Json?               // Array of findings\n  violations        String[]            // Violation IDs\n  warnings          String[]            // Warning messages\n  \n  // Execution\n  startedAt         DateTime            @default(now())\n  completedAt       DateTime?\n  duration          Int?                // Seconds\n  \n  // Context\n  triggeredBy       String              // User or SYSTEM\n  repository        String              // Which repository triggered\n  action            String              // What action was being performed\n  \n  // Metadata\n  automated         Boolean             @default(true)\n  \n  // Relationships\n  checkViolations   ComplianceViolation[]\n  \n  @@index([checkType, status])\n  @@index([targetType, targetId])\n  @@index([startedAt])\n}\n\nenum ViolationSeverity {\n  CRITICAL              // Immediate action required\n  HIGH                  // Urgent action required\n  MEDIUM                // Action required soon\n  LOW                   // Action required eventually\n}\n\nenum ViolationStatus {\n  DETECTED              // Just detected\n  ACKNOWLEDGED          // Team acknowledged\n  UNDER_REVIEW          // Being reviewed\n  REMEDIATION_PLANNED   // Fix planned\n  REMEDIATION_IN_PROGRESS // Being fixed\n  RESOLVED              // Fixed and verified\n  ACCEPTED_RISK         // Risk accepted with override\n  FALSE_POSITIVE        // Not actually a violation\n}\n\nmodel ComplianceViolation {\n  id                String              @id @default(cuid())\n  \n  // Violation Information\n  violationType     String              // Type of violation\n  severity          ViolationSeverity\n  status            ViolationStatus     @default(DETECTED)\n  \n  // Rule Violated\n  ruleId            String\n  rule              HIPAARule           @relation(fields: [ruleId], references: [id])\n  ruleCategory      HIPAARuleCategory\n  \n  // Details\n  title             String\n  description       String              @db.Text\n  impact            String              @db.Text\n  affectedData      String?             // Type of data affected\n  affectedUsers     Int?                // Number of users affected\n  \n  // Location\n  location          String              // Where violation occurred\n  component         String              // Component/service\n  codeReference     String?             // File:line if code violation\n  \n  // Detection\n  detectedAt        DateTime            @default(now())\n  detectedBy        String              // User or SYSTEM\n  detectionMethod   String              // How it was detected\n  checkId           String?\n  check             ComplianceCheck?    @relation(fields: [checkId], references: [id])\n  \n  // Risk Assessment\n  riskScore         Float               // 0-100\n  breachRisk        Boolean             @default(false)\n  dataExposureRisk  Boolean             @default(false)\n  penaltyRisk       String?             // Estimated penalty range\n  \n  // Remediation\n  remediationPlan   String?             @db.Text\n  requiredChanges   Json?               // Array of required changes\n  estimatedEffort   Int?                // Hours\n  assignedTo        String?\n  dueDate           DateTime?\n  \n  // Resolution\n  resolvedAt        DateTime?\n  resolvedBy        String?\n  resolutionMethod  String?\n  resolutionNotes   String?             @db.Text\n  \n  // Override (if accepted risk)\n  overrideId        String?\n  \n  // Metadata\n  tags              String[]\n  \n  // Relationships\n  auditFindings     AuditFinding[]\n  \n  @@index([severity, status])\n  @@index([ruleId])\n  @@index([detectedAt])\n  @@index([status])\n}\n\n// ============================================================================\n// AUTOMATED AUDITING\n// ============================================================================\n\nenum AuditType {\n  RANDOM_SAMPLING       // Random log sampling\n  PHI_ACCESS           // PHI access audit\n  CONSENT_COMPLIANCE   // Consent verification\n  AUTHENTICATION       // Authentication audit\n  AUTHORIZATION        // Authorization audit\n  DATA_RETENTION       // Retention policy audit\n  ENCRYPTION           // Encryption audit\n  BREACH_DETECTION     // Breach detection audit\n  SCHEDULED            // Scheduled comprehensive audit\n}\n\nenum AuditStatus {\n  SCHEDULED            // Audit scheduled\n  IN_PROGRESS          // Audit running\n  COMPLETED            // Audit completed\n  FAILED               // Audit failed\n}\n\nmodel ComplianceAudit {\n  id                String              @id @default(cuid())\n  \n  // Audit Information\n  auditType         AuditType\n  status            AuditStatus         @default(SCHEDULED)\n  \n  // Scope\n  startDate         DateTime\n  endDate           DateTime\n  scope             Json                // What\'s being audited\n  \n  // Sampling (for random audits)\n  samplingRate      Float?              // Percentage\n  sampleSize        Int?                // Number of records\n  \n  // Execution\n  scheduledAt       DateTime            @default(now())\n  startedAt         DateTime?\n  completedAt       DateTime?\n  duration          Int?                // Seconds\n  \n  // Results\n  totalRecords      Int                 @default(0)\n  recordsAudited    Int                 @default(0)\n  findingsCount     Int                 @default(0)\n  violationsCount   Int                 @default(0)\n  complianceScore   Float?              // 0-100\n  \n  // Summary\n  summary           String?             @db.Text\n  recommendations   String[]\n  \n  // Metadata\n  triggeredBy       String              // User or SYSTEM\n  automated         Boolean             @default(true)\n  \n  // Relationships\n  findings          AuditFinding[]\n  \n  @@index([auditType, status])\n  @@index([scheduledAt])\n}\n\nenum FindingSeverity {\n  CRITICAL              // Critical finding\n  HIGH                  // High severity\n  MEDIUM                // Medium severity\n  LOW                   // Low severity\n  INFORMATIONAL         // FYI only\n}\n\nmodel AuditFinding {\n  id                String              @id @default(cuid())\n  auditId           String\n  audit             ComplianceAudit     @relation(fields: [auditId], references: [id], onDelete: Cascade)\n  \n  // Finding Information\n  findingType       String\n  severity          FindingSeverity\n  \n  // Details\n  title             String\n  description       String              @db.Text\n  evidence          Json?               // Supporting evidence\n  \n  // Rule Reference\n  relatedRules      String[]            // HIPAA rule IDs\n  \n  // Impact\n  impact            String              @db.Text\n  affectedRecords   Int?\n  affectedUsers     Int?\n  \n  // Recommendation\n  recommendation    String              @db.Text\n  requiredAction    String?             @db.Text\n  priority          Int                 @default(1)\n  \n  // Status\n  acknowledged      Boolean             @default(false)\n  acknowledgedBy    String?\n  acknowledgedAt    DateTime?\n  \n  // Resolution\n  resolved          Boolean             @default(false)\n  resolvedBy        String?\n  resolvedAt        DateTime?\n  resolutionNotes   String?             @db.Text\n  \n  // Violation (if created)\n  violationId       String?\n  violation         ComplianceViolation? @relation(fields: [violationId], references: [id])\n  \n  // Timestamps\n  createdAt         DateTime            @default(now())\n  \n  @@index([auditId])\n  @@index([severity])\n  @@index([resolved])\n}\n\nmodel PHIAccessLog {\n  id                String              @id @default(cuid())\n  \n  // Access Information\n  userId            String\n  userName          String\n  userRole          String\n  \n  // Resource Accessed\n  patientId         String\n  resourceType      String              // medical_record, diagnosis, medication, etc.\n  resourceId        String\n  action            String              // READ, WRITE, UPDATE, DELETE\n  \n  // Context\n  purpose           String              // Treatment, payment, operations, etc.\n  justification     String?             @db.Text\n  \n  // Authorization\n  consentId         String?             // Consent grant ID if applicable\n  authorized        Boolean\n  authorizationMethod String            // How authorization was verified\n  \n  // Access Details\n  accessedAt        DateTime            @default(now())\n  ipAddress         String\n  location          String?\n  deviceInfo        String?\n  sessionId         String?\n  \n  // Data Accessed\n  fieldsAccessed    String[]            // Specific fields accessed\n  minimumNecessary  Boolean             // Was minimum necessary applied?\n  \n  // Audit Status\n  audited           Boolean             @default(false)\n  auditedAt         DateTime?\n  auditResult       String?             // COMPLIANT, NON_COMPLIANT, SUSPICIOUS\n  \n  // Anomaly Detection\n  anomalyScore      Float?              // 0-100, higher = more suspicious\n  anomalyFlags      String[]            // unusual_time, unusual_volume, etc.\n  \n  @@index([userId, accessedAt])\n  @@index([patientId, accessedAt])\n  @@index([audited])\n  @@index([anomalyScore])\n}\n\nmodel AccessPattern {\n  id                String              @id @default(cuid())\n  \n  // User Information\n  userId            String\n  userName          String\n  \n  // Pattern Details\n  patternType       String              // NORMAL, SUSPICIOUS, ANOMALOUS\n  timeWindow        String              // Time period analyzed\n  \n  // Metrics\n  accessCount       Int\n  uniquePatients    Int\n  averageAccessTime Float               // Average time of day\n  accessFrequency   Float               // Accesses per day\n  \n  // Anomalies\n  anomalies         Json                // Array of detected anomalies\n  riskScore         Float               // 0-100\n  \n  // Flags\n  unusualTime       Boolean             @default(false)\n  unusualVolume     Boolean             @default(false)\n  unusualResources  Boolean             @default(false)\n  geographicAnomaly Boolean             @default(false)\n  \n  // Review\n  requiresReview    Boolean             @default(false)\n  reviewed          Boolean             @default(false)\n  reviewedBy        String?\n  reviewedAt        DateTime?\n  reviewNotes       String?             @db.Text\n  \n  // Timestamps\n  analyzedAt        DateTime            @default(now())\n  periodStart       DateTime\n  periodEnd         DateTime\n  \n  @@index([userId, analyzedAt])\n  @@index([requiresReview, reviewed])\n  @@index([riskScore])\n}\n\n// ============================================================================\n// COMPLIANCE GATE SYSTEM\n// ============================================================================\n\nenum GateStatus {\n  PENDING              // Gate check pending\n  CHECKING             // Compliance check in progress\n  PASSED               // Passed compliance check\n  BLOCKED              // Blocked due to violation\n  REVIEW_REQUIRED      // Manual review required\n  APPROVED             // Manually approved\n  REJECTED             // Manually rejected\n  OVERRIDE_APPROVED    // Approved with override\n}\n\nmodel ComplianceGate {\n  id                String              @id @default(cuid())\n  \n  // Gate Information\n  gateId            String              @unique\n  status            GateStatus          @default(PENDING)\n  \n  // Triggering Action\n  repository        String              // Which repository triggered\n  action            String              // What action is being performed\n  actionDetails     Json                // Details of the action\n  \n  // Compliance Check\n  rulesChecked      String[]            // HIPAA rules to check\n  checkResults      Json?               // Results of checks\n  violations        String[]            // Violation IDs if any\n  riskScore         Float?              // Overall risk score\n  \n  // Blocking\n  blocked           Boolean             @default(false)\n  blockedAt         DateTime?\n  blockReason       String?             @db.Text\n  \n  // Review\n  reviewRequired    Boolean             @default(false)\n  reviewRequestedAt DateTime?\n  reviewedBy        String?\n  reviewedAt        DateTime?\n  reviewDecision    String?             // APPROVE, REJECT, REQUIRE_CHANGES\n  reviewNotes       String?             @db.Text\n  \n  // Resolution\n  resolved          Boolean             @default(false)\n  resolvedAt        DateTime?\n  resolution        String?             @db.Text\n  \n  // Override\n  overrideId        String?\n  \n  // Metadata\n  createdAt         DateTime            @default(now())\n  updatedAt         DateTime            @updatedAt\n  \n  @@index([repository, action])\n  @@index([status])\n  @@index([blocked])\n  @@index([reviewRequired])\n}\n\nenum OverrideStatus {\n  PENDING              // Override requested\n  UNDER_REVIEW         // Being reviewed\n  APPROVED             // Override approved\n  REJECTED             // Override rejected\n  EXPIRED              // Override expired\n  REVOKED              // Override revoked\n}\n\nmodel ComplianceOverride {\n  id                String              @id @default(cuid())\n  \n  // Override Information\n  overrideType      String              // Type of override\n  status            OverrideStatus      @default(PENDING)\n  \n  // Violation\n  violationId       String?             // Violation being overridden\n  gateId            String?             // Gate being overridden\n  \n  // Request\n  requestedBy       String\n  requestedByName   String\n  requestedAt       DateTime            @default(now())\n  \n  // Justification\n  justification     String              @db.Text\n  businessNeed      String              @db.Text\n  riskAssessment    String              @db.Text\n  mitigationPlan    String              @db.Text\n  \n  // Approval Requirements\n  approvalLevel     Int                 // 1=Lead, 2=Compliance, 3=Legal, 4=CTO\n  requiredApprovers String[]            // Roles required\n  \n  // Approvals\n  approvals         Json                // Array of approvals\n  allApproved       Boolean             @default(false)\n  \n  // Conditions\n  conditions        String[]            // Conditions for override\n  expiresAt         DateTime?           // When override expires\n  \n  // Monitoring\n  monitoringRequired Boolean            @default(true)\n  reviewFrequency   String?             // How often to review\n  \n  // Status\n  approvedAt        DateTime?\n  approvedBy        String?\n  rejectedAt        DateTime?\n  rejectedBy        String?\n  rejectionReason   String?             @db.Text\n  \n  // Revocation\n  revokedAt         DateTime?\n  revokedBy         String?\n  revocationReason  String?             @db.Text\n  \n  // Audit\n  auditTrail        Json                // Complete audit trail\n  \n  @@index([status])\n  @@index([requestedAt])\n  @@index([expiresAt])\n}\n\n// ============================================================================\n// COMPLIANCE REPORTING\n// ============================================================================\n\nenum ReportType {\n  DAILY_SUMMARY        // Daily compliance summary\n  WEEKLY_AUDIT         // Weekly audit report\n  MONTHLY_DASHBOARD    // Monthly compliance dashboard\n  QUARTERLY_REVIEW     // Quarterly compliance review\n  ANNUAL_ASSESSMENT    // Annual compliance assessment\n  BREACH_NOTIFICATION  // Breach notification report\n  OCR_FILING           // OCR filing report\n  AUDIT_RESPONSE       // Response to external audit\n  CUSTOM               // Custom report\n}\n\nmodel ComplianceReport {\n  id                String              @id @default(cuid())\n  \n  // Report Information\n  reportType        ReportType\n  title             String\n  description       String?             @db.Text\n  \n  // Period\n  periodStart       DateTime\n  periodEnd         DateTime\n  \n  // Content\n  summary           String              @db.Text\n  findings          Json                // Array of findings\n  statistics        Json                // Compliance statistics\n  trends            Json?               // Trend analysis\n  recommendations   String[]\n  \n  // Metrics\n  complianceScore   Float               // Overall compliance score\n  violationsCount   Int\n  auditsPerformed   Int\n  issuesResolved    Int\n  \n  // Generation\n  generatedAt       DateTime            @default(now())\n  generatedBy       String\n  automated         Boolean             @default(true)\n  \n  // Distribution\n  recipients        String[]            // Who received the report\n  sentAt            DateTime?\n  \n  // Files\n  reportUrl         String?             // URL to full report\n  attachments       String[]            // Additional files\n  \n  @@index([reportType])\n  @@index([periodStart, periodEnd])\n  @@index([generatedAt])\n}\n</create-file>\n</function_calls>'}