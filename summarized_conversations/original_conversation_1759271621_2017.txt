{'role': 'assistant', 'content': 'Great! I\'ve started implementing Service 3 (AnalysisQueueService). Let me continue by creating the API endpoints:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/analysis-queue/route.ts">\n/**\n * Analysis Queue API\n * \n * Endpoints for managing analysis tasks in the queue.\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { analysisQueue, TaskPriority, TaskType, TaskStatus } from \'@/lib/services/AnalysisQueueService\';\n\n/**\n * POST /api/analysis-queue\n * Submit a new analysis task\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    const {\n      userId,\n      type,\n      priority,\n      data,\n      metadata\n    } = body;\n\n    // Validate required fields\n    if (!userId || typeof userId !== \'string\') {\n      return NextResponse.json(\n        { error: \'userId is required and must be a string\' },\n        { status: 400 }\n      );\n    }\n\n    if (!type || !Object.values(TaskType).includes(type)) {\n      return NextResponse.json(\n        { error: \'Invalid task type\' },\n        { status: 400 }\n      );\n    }\n\n    if (!data) {\n      return NextResponse.json(\n        { error: \'data is required\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate priority if provided\n    if (priority && !Object.values(TaskPriority).includes(priority)) {\n      return NextResponse.json(\n        { error: \'Invalid priority\' },\n        { status: 400 }\n      );\n    }\n\n    // Submit task\n    const task = await analysisQueue.submitTask({\n      userId,\n      type,\n      priority: priority || TaskPriority.NORMAL,\n      data,\n      metadata\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: task\n    });\n\n  } catch (error: any) {\n    console.error(\'Failed to submit task:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to submit task\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/analysis-queue?userId=xxx&status=xxx&type=xxx\n * Get tasks for a user\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get(\'userId\');\n    const status = searchParams.get(\'status\');\n    const type = searchParams.get(\'type\');\n    const limit = searchParams.get(\'limit\');\n    const offset = searchParams.get(\'offset\');\n\n    if (!userId) {\n      return NextResponse.json(\n        { error: \'userId is required\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate status if provided\n    if (status && !Object.values(TaskStatus).includes(status as TaskStatus)) {\n      return NextResponse.json(\n        { error: \'Invalid status\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate type if provided\n    if (type && !Object.values(TaskType).includes(type as TaskType)) {\n      return NextResponse.json(\n        { error: \'Invalid type\' },\n        { status: 400 }\n      );\n    }\n\n    const tasks = await analysisQueue.getUserTasks(userId, {\n      status: status as TaskStatus | undefined,\n      type: type as TaskType | undefined,\n      limit: limit ? parseInt(limit) : undefined,\n      offset: offset ? parseInt(offset) : undefined\n    });\n\n    return NextResponse.json({\n      success: true,\n      data: tasks\n    });\n\n  } catch (error: any) {\n    console.error(\'Failed to get tasks:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to get tasks\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}