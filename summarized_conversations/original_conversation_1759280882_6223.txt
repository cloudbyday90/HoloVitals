{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/docs/RBAC_QUICK_START.md">\n# RBAC Quick Start Guide\n\n## For Developers\n\n### Protecting an API Endpoint\n\n```typescript\n// app/api/your-endpoint/route.ts\nimport { requireOwner, requireAdmin, requirePermission } from \'@/lib/middleware/auth\';\nimport { Permission } from \'@/lib/types/rbac\';\n\n// OWNER only\nexport async function GET(req: NextRequest) {\n  const user = await requireOwner(req);\n  if (user instanceof NextResponse) return user;\n  \n  // Your logic here\n}\n\n// ADMIN or higher\nexport async function POST(req: NextRequest) {\n  const user = await requireAdmin(req);\n  if (user instanceof NextResponse) return user;\n  \n  // Your logic here\n}\n\n// Specific permission\nexport async function PUT(req: NextRequest) {\n  const user = await requirePermission(req, Permission.MANAGE_USERS);\n  if (user instanceof NextResponse) return user;\n  \n  // Your logic here\n}\n```\n\n### Protecting UI Components\n\n```tsx\nimport { OwnerOnly, AdminOnly, HasPermission } from \'@/components/ui/RoleGuard\';\nimport { Permission } from \'@/lib/types/rbac\';\n\nexport default function MyPage() {\n  return (\n    <div>\n      {/* Everyone can see this */}\n      <PublicContent />\n      \n      {/* Only OWNER can see this */}\n      <OwnerOnly>\n        <FinancialDashboard />\n      </OwnerOnly>\n      \n      {/* ADMIN and OWNER can see this */}\n      <AdminOnly>\n        <UserManagement />\n      </AdminOnly>\n      \n      {/* Users with specific permission */}\n      <HasPermission permission={Permission.VIEW_COSTS}>\n        <CostChart />\n      </HasPermission>\n    </div>\n  );\n}\n```\n\n### Using the Hook\n\n```tsx\nimport { useRoleGuard } from \'@/components/ui/RoleGuard\';\nimport { Permission } from \'@/lib/types/rbac\';\n\nexport default function MyComponent() {\n  const { isOwner, isAdmin, hasPermission } = useRoleGuard();\n  \n  return (\n    <div>\n      {isOwner && <OwnerControls />}\n      {isAdmin && <AdminControls />}\n      {hasPermission(Permission.VIEW_COSTS) && <CostData />}\n    </div>\n  );\n}\n```\n\n## For System Administrators\n\n### Setting User Roles\n\n```sql\n-- Set user as OWNER (only one owner should exist)\nUPDATE "User" SET "role" = \'OWNER\' WHERE "email" = \'owner@holovitals.com\';\n\n-- Set user as ADMIN\nUPDATE "User" SET "role" = \'ADMIN\' WHERE "email" = \'admin@holovitals.com\';\n\n-- Set user as DOCTOR\nUPDATE "User" SET "role" = \'DOCTOR\' WHERE "email" = \'doctor@holovitals.com\';\n\n-- Set user as PATIENT (default)\nUPDATE "User" SET "role" = \'PATIENT\' WHERE "email" = \'patient@holovitals.com\';\n```\n\n### Viewing Access Logs\n\n```sql\n-- View all access attempts by a user\nSELECT * FROM "AccessLog" \nWHERE "userId" = \'user-id-here\' \nORDER BY "timestamp" DESC \nLIMIT 100;\n\n-- View failed access attempts\nSELECT * FROM "AccessLog" \nWHERE "allowed" = false \nORDER BY "timestamp" DESC \nLIMIT 100;\n\n-- View financial data access\nSELECT * FROM "AccessLog" \nWHERE "resourceType" = \'FINANCIAL\' \nORDER BY "timestamp" DESC;\n```\n\n## Protected Routes Reference\n\n### OWNER Only\n- `/dashboard/costs` - Cost dashboard\n- `/dashboard/financials` - Financial reports\n- `/api/costs/*` - Cost API endpoints\n- `/api/financials/*` - Financial API endpoints\n\n### ADMIN or OWNER\n- `/dashboard/admin` - Admin dashboard\n- `/dashboard/users` - User management\n- `/dashboard/instances` - Instance management\n- `/dashboard/queue` - Queue management\n- `/api/admin/*` - Admin API endpoints\n- `/api/instances/*` - Instance API endpoints\n- `/api/queue/*` - Queue API endpoints\n\n### All Authenticated Users\n- `/dashboard` - Overview\n- `/dashboard/documents` - Document management\n- `/dashboard/chat` - AI chat interface\n- `/api/documents/*` - Document API endpoints\n- `/api/chat/*` - Chat API endpoints\n\n## Common Scenarios\n\n### Scenario 1: User tries to access costs page\n- **User Role:** PATIENT\n- **Result:** Redirected to `/dashboard/access-denied`\n- **Logged:** Yes, with reason "Required role: OWNER, User role: PATIENT"\n\n### Scenario 2: Admin tries to access financial API\n- **User Role:** ADMIN\n- **Result:** 403 Forbidden response\n- **Logged:** Yes, with reason "Only owner can access financial data"\n\n### Scenario 3: Owner accesses cost data\n- **User Role:** OWNER\n- **Result:** Success, data returned\n- **Logged:** Yes, with reason "Owner accessing financial data"\n\n## Troubleshooting\n\n### User can\'t access a page they should have access to\n\n1. Check user role in database:\n```sql\nSELECT "id", "email", "role" FROM "User" WHERE "email" = \'user@example.com\';\n```\n\n2. Check access logs:\n```sql\nSELECT * FROM "AccessLog" \nWHERE "userId" = \'user-id\' \nORDER BY "timestamp" DESC \nLIMIT 10;\n```\n\n3. Verify role permissions in code:\n```typescript\nimport { ROLE_PERMISSIONS } from \'@/lib/types/rbac\';\nconsole.log(ROLE_PERMISSIONS[UserRole.ADMIN]);\n```\n\n### Access logs not being created\n\n1. Check if AccessLog table exists:\n```sql\nSELECT * FROM information_schema.tables WHERE table_name = \'AccessLog\';\n```\n\n2. Run migration if needed:\n```bash\ncd medical-analysis-platform\npsql -U holovitals_user -d holovitals -f prisma/migrations/add_user_roles.sql\n```\n\n### Role changes not taking effect\n\n1. Clear user session:\n```typescript\n// In your code\nawait signOut();\n```\n\n2. Verify role in database:\n```sql\nSELECT "role" FROM "User" WHERE "id" = \'user-id\';\n```\n\n3. Check middleware is running:\n```typescript\n// middleware.ts should be in root of project\n// Verify it\'s being executed by adding console.log\n```\n\n## Security Checklist\n\n- [ ] Only ONE user should have OWNER role\n- [ ] OWNER credentials are secure and not shared\n- [ ] All financial endpoints use `protectCostEndpoint` or `requireOwner`\n- [ ] All admin endpoints use `requireAdmin` or higher\n- [ ] UI components use appropriate guards (OwnerOnly, AdminOnly)\n- [ ] Access logs are being created for sensitive operations\n- [ ] Regular audit of access logs for suspicious activity\n- [ ] User roles are reviewed periodically\n- [ ] Unused admin/owner accounts are disabled\n\n## Next Steps\n\n1. **Set up your OWNER account:**\n   ```sql\n   UPDATE "User" SET "role" = \'OWNER\' WHERE "email" = \'your-email@example.com\';\n   ```\n\n2. **Test access control:**\n   - Try accessing `/dashboard/costs` as PATIENT (should be denied)\n   - Try accessing `/dashboard/costs` as OWNER (should work)\n\n3. **Review access logs:**\n   ```sql\n   SELECT * FROM "AccessLog" ORDER BY "timestamp" DESC LIMIT 20;\n   ```\n\n4. **Set up additional admins if needed:**\n   ```sql\n   UPDATE "User" SET "role" = \'ADMIN\' WHERE "email" = \'admin@example.com\';\n   ```\n\nFor more details, see [RBAC_IMPLEMENTATION.md](./RBAC_IMPLEMENTATION.md)\n</create-file>\n</function_calls>'}