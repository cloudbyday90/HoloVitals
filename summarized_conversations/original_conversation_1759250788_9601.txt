{'role': 'assistant', 'content': 'Now let me create the API routes and configuration files:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/documents/upload/route.ts">\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { writeFile, mkdir } from \'fs/promises\';\nimport { join } from \'path\';\nimport { ocrService } from \'@/lib/services/ocr.service\';\n\nexport async function POST(request: NextRequest) {\n  try {\n    const formData = await request.formData();\n    const file = formData.get(\'file\') as File;\n    \n    if (!file) {\n      return NextResponse.json(\n        { error: \'No file provided\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file type\n    const allowedTypes = [\'application/pdf\', \'image/png\', \'image/jpeg\'];\n    if (!allowedTypes.includes(file.type)) {\n      return NextResponse.json(\n        { error: \'Invalid file type. Only PDF and images are allowed.\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate file size (10MB limit)\n    const maxSize = 10 * 1024 * 1024; // 10MB\n    if (file.size > maxSize) {\n      return NextResponse.json(\n        { error: \'File size exceeds 10MB limit\' },\n        { status: 400 }\n      );\n    }\n\n    // Create uploads directory if it doesn\'t exist\n    const uploadsDir = join(process.cwd(), \'uploads\');\n    try {\n      await mkdir(uploadsDir, { recursive: true });\n    } catch (error) {\n      // Directory might already exist\n    }\n\n    // Generate unique filename\n    const timestamp = Date.now();\n    const filename = `${timestamp}-${file.name}`;\n    const filepath = join(uploadsDir, filename);\n\n    // Convert file to buffer and save\n    const bytes = await file.arrayBuffer();\n    const buffer = Buffer.from(bytes);\n    await writeFile(filepath, buffer);\n\n    // Process document with OCR\n    const processingResult = await ocrService.processDocument(buffer, file.type);\n\n    // TODO: Save document metadata to database\n    // This would use Prisma to create a document record\n\n    return NextResponse.json({\n      success: true,\n      document: {\n        id: timestamp.toString(), // In production, use UUID from database\n        fileName: file.name,\n        filePath: filepath,\n        fileSize: file.size,\n        mimeType: file.type,\n        documentType: processingResult.documentType,\n        status: processingResult.success ? \'completed\' : \'failed\',\n        uploadDate: new Date().toISOString()\n      },\n      processing: processingResult\n    });\n  } catch (error) {\n    console.error(\'Upload error:\', error);\n    return NextResponse.json(\n      { error: \'Failed to upload file\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}