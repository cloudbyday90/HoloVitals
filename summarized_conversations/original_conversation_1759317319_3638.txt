{'role': 'assistant', 'content': 'Now let me create the API endpoints for Cerner. I\'ll create all 4 endpoints efficiently:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/ehr/cerner/bulk-export/route.ts">\n/**\n * Cerner Bulk Export API\n * POST /api/ehr/cerner/bulk-export - Initiate bulk export\n * GET /api/ehr/cerner/bulk-export - List bulk export jobs\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { getServerSession } from \'next-auth\';\nimport { authOptions } from \'@/lib/auth\';\nimport { PrismaClient, BulkExportType } from \'@prisma/client\';\nimport { FHIRClient } from \'@/lib/fhir/FHIRClient\';\nimport { CernerEnhancedService } from \'@/lib/services/CernerEnhancedService\';\n\nconst prisma = new PrismaClient();\n\n/**\n * POST /api/ehr/cerner/bulk-export\n * Initiate a bulk data export\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 401 }\n      );\n    }\n\n    const body = await request.json();\n    const { connectionId, exportType, resourceTypes, since, tenantId } = body;\n\n    // Validate input\n    if (!connectionId || !exportType) {\n      return NextResponse.json(\n        { error: \'Missing required fields: connectionId, exportType\' },\n        { status: 400 }\n      );\n    }\n\n    if (![\'PATIENT\', \'GROUP\', \'SYSTEM\'].includes(exportType)) {\n      return NextResponse.json(\n        { error: \'Invalid exportType. Must be PATIENT, GROUP, or SYSTEM\' },\n        { status: 400 }\n      );\n    }\n\n    // Verify connection belongs to user\n    const connection = await prisma.eHRConnection.findFirst({\n      where: {\n        id: connectionId,\n        userId: session.user.id,\n      },\n    });\n\n    if (!connection) {\n      return NextResponse.json(\n        { error: \'Connection not found\' },\n        { status: 404 }\n      );\n    }\n\n    // Verify connection is to Cerner\n    if (connection.provider !== \'CERNER\') {\n      return NextResponse.json(\n        { error: \'Bulk export is only supported for Cerner connections\' },\n        { status: 400 }\n      );\n    }\n\n    // Initialize Cerner service\n    const fhirClient = new FHIRClient(\n      connection.fhirBaseUrl,\n      connection.accessToken || \'\'\n    );\n    const cernerService = new CernerEnhancedService(fhirClient, tenantId);\n\n    // Initiate bulk export\n    const jobId = await cernerService.initiateBulkExport({\n      connectionId,\n      exportType: exportType as BulkExportType,\n      resourceTypes,\n      since: since ? new Date(since) : undefined,\n      tenantId,\n    });\n\n    // Get the created job\n    const job = await prisma.bulkExportJob.findUnique({\n      where: { id: jobId },\n    });\n\n    return NextResponse.json({\n      success: true,\n      job: {\n        id: job?.id,\n        status: job?.status,\n        exportType: job?.exportType,\n        statusUrl: job?.statusUrl,\n        startedAt: job?.startedAt,\n      },\n    });\n  } catch (error) {\n    console.error(\'Error initiating bulk export:\', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \'Failed to initiate bulk export\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/ehr/cerner/bulk-export\n * List bulk export jobs for a connection\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 401 }\n      );\n    }\n\n    const { searchParams } = new URL(request.url);\n    const connectionId = searchParams.get(\'connectionId\');\n\n    if (!connectionId) {\n      return NextResponse.json(\n        { error: \'Missing connectionId parameter\' },\n        { status: 400 }\n      );\n    }\n\n    // Verify connection belongs to user\n    const connection = await prisma.eHRConnection.findFirst({\n      where: {\n        id: connectionId,\n        userId: session.user.id,\n      },\n    });\n\n    if (!connection) {\n      return NextResponse.json(\n        { error: \'Connection not found\' },\n        { status: 404 }\n      );\n    }\n\n    // Get all bulk export jobs for this connection\n    const jobs = await prisma.bulkExportJob.findMany({\n      where: { connectionId },\n      orderBy: { startedAt: \'desc\' },\n      take: 50,\n    });\n\n    return NextResponse.json({\n      success: true,\n      jobs: jobs.map(job => ({\n        id: job.id,\n        exportType: job.exportType,\n        status: job.status,\n        startedAt: job.startedAt,\n        completedAt: job.completedAt,\n        resourceCount: job.resourceCount,\n        totalSize: job.totalSize.toString(),\n        errorMessage: job.errorMessage,\n      })),\n    });\n  } catch (error) {\n    console.error(\'Error listing bulk export jobs:\', error);\n    return NextResponse.json(\n      { error: \'Failed to list bulk export jobs\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}