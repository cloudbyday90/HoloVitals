{'role': 'assistant', 'content': 'Now let\'s create the Queue management page:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/dashboard/queue/page.tsx">\n\'use client\';\n\nimport { useState } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  ListTodo,\n  Loader2,\n  CheckCircle2,\n  XCircle,\n  Clock,\n  AlertCircle,\n  Play,\n  Pause,\n  RotateCcw,\n  Trash2,\n  TrendingUp,\n  Activity\n} from \'lucide-react\';\nimport { Progress } from \'@/components/ui/progress\';\n\ninterface Task {\n  id: string;\n  type: \'DOCUMENT_ANALYSIS\' | \'CHAT_RESPONSE\' | \'BATCH_PROCESSING\' | \'REPORT_GENERATION\';\n  priority: \'URGENT\' | \'HIGH\' | \'NORMAL\' | \'LOW\';\n  status: \'PENDING\' | \'PROCESSING\' | \'COMPLETED\' | \'FAILED\' | \'CANCELLED\';\n  progress: number;\n  title: string;\n  description: string;\n  createdAt: Date;\n  startedAt?: Date;\n  completedAt?: Date;\n  estimatedDuration?: number;\n  actualDuration?: number;\n  retryCount: number;\n  maxRetries: number;\n  errorMessage?: string;\n}\n\nexport default function QueuePage() {\n  const [tasks, setTasks] = useState<Task[]>([\n    {\n      id: \'1\',\n      type: \'DOCUMENT_ANALYSIS\',\n      priority: \'HIGH\',\n      status: \'PROCESSING\',\n      progress: 65,\n      title: \'Analyzing Blood Test Results\',\n      description: \'Processing Blood_Test_Results_2024.pdf\',\n      createdAt: new Date(\'2024-09-30T10:00:00\'),\n      startedAt: new Date(\'2024-09-30T10:01:00\'),\n      estimatedDuration: 120,\n      retryCount: 0,\n      maxRetries: 3,\n    },\n    {\n      id: \'2\',\n      type: \'CHAT_RESPONSE\',\n      priority: \'URGENT\',\n      status: \'PROCESSING\',\n      progress: 85,\n      title: \'Generating AI Response\',\n      description: \'Answering question about cholesterol levels\',\n      createdAt: new Date(\'2024-09-30T10:05:00\'),\n      startedAt: new Date(\'2024-09-30T10:05:30\'),\n      estimatedDuration: 30,\n      retryCount: 0,\n      maxRetries: 3,\n    },\n    {\n      id: \'3\',\n      type: \'BATCH_PROCESSING\',\n      priority: \'NORMAL\',\n      status: \'PENDING\',\n      progress: 0,\n      title: \'Batch Document Processing\',\n      description: \'Processing 5 medical documents\',\n      createdAt: new Date(\'2024-09-30T10:10:00\'),\n      estimatedDuration: 300,\n      retryCount: 0,\n      maxRetries: 2,\n    },\n    {\n      id: \'4\',\n      type: \'REPORT_GENERATION\',\n      priority: \'LOW\',\n      status: \'COMPLETED\',\n      progress: 100,\n      title: \'Monthly Health Report\',\n      description: \'Generated comprehensive health summary\',\n      createdAt: new Date(\'2024-09-30T09:00:00\'),\n      startedAt: new Date(\'2024-09-30T09:01:00\'),\n      completedAt: new Date(\'2024-09-30T09:15:00\'),\n      estimatedDuration: 600,\n      actualDuration: 840,\n      retryCount: 0,\n      maxRetries: 3,\n    },\n    {\n      id: \'5\',\n      type: \'DOCUMENT_ANALYSIS\',\n      priority: \'HIGH\',\n      status: \'FAILED\',\n      progress: 45,\n      title: \'MRI Scan Analysis\',\n      description: \'Failed to process MRI_Scan.pdf\',\n      createdAt: new Date(\'2024-09-30T08:30:00\'),\n      startedAt: new Date(\'2024-09-30T08:31:00\'),\n      completedAt: new Date(\'2024-09-30T08:35:00\'),\n      estimatedDuration: 180,\n      actualDuration: 240,\n      retryCount: 3,\n      maxRetries: 3,\n      errorMessage: \'OCR processing failed: Unable to extract text from image\',\n    },\n  ]);\n\n  const [filter, setFilter] = useState<\'all\' | \'active\' | \'completed\' | \'failed\'>(\'all\');\n\n  const handleCancelTask = (id: string) => {\n    if (confirm(\'Cancel this task?\')) {\n      setTasks(tasks.map(task => \n        task.id === id ? { ...task, status: \'CANCELLED\' as const } : task\n      ));\n    }\n  };\n\n  const handleRetryTask = (id: string) => {\n    setTasks(tasks.map(task => \n      task.id === id ? { \n        ...task, \n        status: \'PENDING\' as const, \n        progress: 0,\n        retryCount: task.retryCount + 1,\n        errorMessage: undefined\n      } : task\n    ));\n  };\n\n  const handleDeleteTask = (id: string) => {\n    if (confirm(\'Delete this task?\')) {\n      setTasks(tasks.filter(task => task.id !== id));\n    }\n  };\n\n  const filteredTasks = tasks.filter(task => {\n    if (filter === \'all\') return true;\n    if (filter === \'active\') return [\'PENDING\', \'PROCESSING\'].includes(task.status);\n    if (filter === \'completed\') return task.status === \'COMPLETED\';\n    if (filter === \'failed\') return task.status === \'FAILED\';\n    return true;\n  });\n\n  const stats = {\n    total: tasks.length,\n    pending: tasks.filter(t => t.status === \'PENDING\').length,\n    processing: tasks.filter(t => t.status === \'PROCESSING\').length,\n    completed: tasks.filter(t => t.status === \'COMPLETED\').length,\n    failed: tasks.filter(t => t.status === \'FAILED\').length,\n  };\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \'COMPLETED\':\n        return <CheckCircle2 className="w-5 h-5 text-green-600" />;\n      case \'PROCESSING\':\n        return <Loader2 className="w-5 h-5 text-blue-600 animate-spin" />;\n      case \'FAILED\':\n        return <XCircle className="w-5 h-5 text-red-600" />;\n      case \'CANCELLED\':\n        return <XCircle className="w-5 h-5 text-gray-600" />;\n      default:\n        return <Clock className="w-5 h-5 text-gray-400" />;\n    }\n  };\n\n  const getStatusColor = (status: string) => {\n    switch (status) {\n      case \'COMPLETED\':\n        return \'bg-green-100 text-green-700\';\n      case \'PROCESSING\':\n        return \'bg-blue-100 text-blue-700\';\n      case \'FAILED\':\n        return \'bg-red-100 text-red-700\';\n      case \'CANCELLED\':\n        return \'bg-gray-100 text-gray-700\';\n      default:\n        return \'bg-yellow-100 text-yellow-700\';\n    }\n  };\n\n  const getPriorityColor = (priority: string) => {\n    switch (priority) {\n      case \'URGENT\':\n        return \'bg-red-100 text-red-700 border-red-300\';\n      case \'HIGH\':\n        return \'bg-orange-100 text-orange-700 border-orange-300\';\n      case \'NORMAL\':\n        return \'bg-blue-100 text-blue-700 border-blue-300\';\n      default:\n        return \'bg-gray-100 text-gray-700 border-gray-300\';\n    }\n  };\n\n  const getTypeIcon = (type: string) => {\n    switch (type) {\n      case \'DOCUMENT_ANALYSIS\':\n        return \'ðŸ“„\';\n      case \'CHAT_RESPONSE\':\n        return \'ðŸ’¬\';\n      case \'BATCH_PROCESSING\':\n        return \'ðŸ“¦\';\n      case \'REPORT_GENERATION\':\n        return \'ðŸ“Š\';\n      default:\n        return \'ðŸ“‹\';\n    }\n  };\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div>\n        <h1 className="text-3xl font-bold mb-2">Analysis Queue</h1>\n        <p className="text-gray-600">Monitor and manage your analysis tasks</p>\n      </div>\n\n      {/* Stats */}\n      <div className="grid gap-4 md:grid-cols-5">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Total Tasks\n            </CardTitle>\n            <ListTodo className="w-4 h-4 text-gray-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">{stats.total}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Pending\n            </CardTitle>\n            <Clock className="w-4 h-4 text-yellow-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-yellow-600">{stats.pending}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Processing\n            </CardTitle>\n            <Activity className="w-4 h-4 text-blue-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-blue-600">{stats.processing}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Completed\n            </CardTitle>\n            <CheckCircle2 className="w-4 h-4 text-green-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">{stats.completed}</div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Failed\n            </CardTitle>\n            <AlertCircle className="w-4 h-4 text-red-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-red-600">{stats.failed}</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Filters */}\n      <Card>\n        <CardContent className="pt-6">\n          <div className="flex gap-2">\n            <Button\n              variant={filter === \'all\' ? \'default\' : \'outline\'}\n              onClick={() => setFilter(\'all\')}\n            >\n              All Tasks\n            </Button>\n            <Button\n              variant={filter === \'active\' ? \'default\' : \'outline\'}\n              onClick={() => setFilter(\'active\')}\n            >\n              Active\n            </Button>\n            <Button\n              variant={filter === \'completed\' ? \'default\' : \'outline\'}\n              onClick={() => setFilter(\'completed\')}\n            >\n              Completed\n            </Button>\n            <Button\n              variant={filter === \'failed\' ? \'default\' : \'outline\'}\n              onClick={() => setFilter(\'failed\')}\n            >\n              Failed\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Tasks List */}\n      <div className="space-y-4">\n        {filteredTasks.length === 0 ? (\n          <Card>\n            <CardContent className="py-12 text-center">\n              <ListTodo className="w-16 h-16 text-gray-400 mx-auto mb-4" />\n              <h3 className="text-xl font-semibold mb-2">No tasks found</h3>\n              <p className="text-gray-600">\n                {filter !== \'all\' ? \'Try changing the filter\' : \'No tasks in the queue\'}\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          filteredTasks.map((task) => (\n            <Card key={task.id} className="hover:shadow-md transition-shadow">\n              <CardContent className="p-6">\n                <div className="space-y-4">\n                  {/* Header */}\n                  <div className="flex items-start justify-between">\n                    <div className="flex items-start gap-3 flex-1">\n                      <div className="text-3xl">{getTypeIcon(task.type)}</div>\n                      <div className="flex-1 min-w-0">\n                        <div className="flex items-center gap-2 mb-1">\n                          <h3 className="font-semibold text-lg">{task.title}</h3>\n                          <span className={`px-2 py-0.5 rounded-full text-xs font-medium border ${getPriorityColor(task.priority)}`}>\n                            {task.priority}\n                          </span>\n                        </div>\n                        <p className="text-sm text-gray-600 mb-2">{task.description}</p>\n                        <div className="flex flex-wrap gap-3 text-xs text-gray-500">\n                          <span>Created: {task.createdAt.toLocaleString()}</span>\n                          {task.startedAt && (\n                            <span>Started: {task.startedAt.toLocaleString()}</span>\n                          )}\n                          {task.completedAt && (\n                            <span>Completed: {task.completedAt.toLocaleString()}</span>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Status Badge */}\n                    <div className="flex items-center gap-2">\n                      <span className={`px-3 py-1 rounded-full text-sm font-medium flex items-center gap-2 ${getStatusColor(task.status)}`}>\n                        {getStatusIcon(task.status)}\n                        {task.status}\n                      </span>\n                    </div>\n                  </div>\n\n                  {/* Progress Bar */}\n                  {[\'PENDING\', \'PROCESSING\'].includes(task.status) && (\n                    <div className="space-y-2">\n                      <div className="flex justify-between text-sm">\n                        <span className="text-gray-600">Progress</span>\n                        <span className="font-medium">{task.progress}%</span>\n                      </div>\n                      <Progress value={task.progress} className="h-2" />\n                      {task.estimatedDuration && (\n                        <p className="text-xs text-gray-500">\n                          Estimated time: {Math.ceil(task.estimatedDuration / 60)} minutes\n                        </p>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Error Message */}\n                  {task.status === \'FAILED\' && task.errorMessage && (\n                    <div className="bg-red-50 border border-red-200 rounded-lg p-3">\n                      <div className="flex items-start gap-2">\n                        <AlertCircle className="w-4 h-4 text-red-600 mt-0.5 flex-shrink-0" />\n                        <div className="flex-1">\n                          <p className="text-sm font-medium text-red-900 mb-1">Error</p>\n                          <p className="text-sm text-red-700">{task.errorMessage}</p>\n                          <p className="text-xs text-red-600 mt-1">\n                            Retry attempts: {task.retryCount}/{task.maxRetries}\n                          </p>\n                        </div>\n                      </div>\n                    </div>\n                  )}\n\n                  {/* Duration Info */}\n                  {task.actualDuration && (\n                    <div className="flex items-center gap-4 text-sm text-gray-600">\n                      <span className="flex items-center gap-1">\n                        <Clock className="w-4 h-4" />\n                        Duration: {Math.ceil(task.actualDuration / 60)} minutes\n                      </span>\n                      {task.estimatedDuration && task.actualDuration > task.estimatedDuration && (\n                        <span className="text-yellow-600">\n                          ({Math.ceil((task.actualDuration - task.estimatedDuration) / 60)} min over estimate)\n                        </span>\n                      )}\n                    </div>\n                  )}\n\n                  {/* Actions */}\n                  <div className="flex gap-2 pt-2 border-t">\n                    {task.status === \'FAILED\' && task.retryCount < task.maxRetries && (\n                      <Button\n                        variant="outline"\n                        size="sm"\n                        onClick={() => handleRetryTask(task.id)}\n                      >\n                        <RotateCcw className="w-4 h-4 mr-2" />\n                        Retry\n                      </Button>\n                    )}\n                    {[\'PENDING\', \'PROCESSING\'].includes(task.status) && (\n                      <Button\n                        variant="outline"\n                        size="sm"\n                        onClick={() => handleCancelTask(task.id)}\n                      >\n                        <Pause className="w-4 h-4 mr-2" />\n                        Cancel\n                      </Button>\n                    )}\n                    {[\'COMPLETED\', \'FAILED\', \'CANCELLED\'].includes(task.status) && (\n                      <Button\n                        variant="outline"\n                        size="sm"\n                        onClick={() => handleDeleteTask(task.id)}\n                      >\n                        <Trash2 className="w-4 h-4 mr-2 text-red-600" />\n                        Delete\n                      </Button>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        )}\n      </div>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}