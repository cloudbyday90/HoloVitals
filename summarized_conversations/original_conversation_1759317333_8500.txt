{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/ehr/allscripts/bulk-export/[id]/route.ts">\n/**\n * Allscripts Bulk Export Status API\n * GET /api/ehr/allscripts/bulk-export/:id - Check export status\n * POST /api/ehr/allscripts/bulk-export/:id/process - Process completed export\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { getServerSession } from \'next-auth\';\nimport { authOptions } from \'@/lib/auth\';\nimport { PrismaClient } from \'@prisma/client\';\nimport { FHIRClient } from \'@/lib/fhir/FHIRClient\';\nimport { AllscriptsEnhancedService } from \'@/lib/services/AllscriptsEnhancedService\';\n\nconst prisma = new PrismaClient();\n\n/**\n * GET /api/ehr/allscripts/bulk-export/:id\n * Check the status of a bulk export job\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 401 }\n      );\n    }\n\n    const jobId = params.id;\n\n    // Get the job\n    const job = await prisma.bulkExportJob.findUnique({\n      where: { id: jobId },\n      include: {\n        connection: {\n          select: {\n            userId: true,\n            fhirBaseUrl: true,\n            accessToken: true,\n          },\n        },\n      },\n    });\n\n    if (!job) {\n      return NextResponse.json(\n        { error: \'Job not found\' },\n        { status: 404 }\n      );\n    }\n\n    // Verify job belongs to user\n    if (job.connection.userId !== session.user.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 403 }\n      );\n    }\n\n    // If job is not completed, check status\n    if (job.status === \'INITIATED\' || job.status === \'IN_PROGRESS\') {\n      const fhirClient = new FHIRClient(\n        job.connection.fhirBaseUrl,\n        job.connection.accessToken || \'\'\n      );\n      const allscriptsService = new AllscriptsEnhancedService(fhirClient);\n\n      const newStatus = await allscriptsService.checkBulkExportStatus(jobId);\n\n      // Get updated job\n      const updatedJob = await prisma.bulkExportJob.findUnique({\n        where: { id: jobId },\n      });\n\n      return NextResponse.json({\n        success: true,\n        job: {\n          id: updatedJob?.id,\n          exportType: updatedJob?.exportType,\n          status: updatedJob?.status,\n          startedAt: updatedJob?.startedAt,\n          completedAt: updatedJob?.completedAt,\n          resourceCount: updatedJob?.resourceCount,\n          totalSize: updatedJob?.totalSize.toString(),\n          errorMessage: updatedJob?.errorMessage,\n        },\n      });\n    }\n\n    // Job is already in final state\n    return NextResponse.json({\n      success: true,\n      job: {\n        id: job.id,\n        exportType: job.exportType,\n        status: job.status,\n        startedAt: job.startedAt,\n        completedAt: job.completedAt,\n        resourceCount: job.resourceCount,\n        totalSize: job.totalSize.toString(),\n        errorMessage: job.errorMessage,\n      },\n    });\n  } catch (error) {\n    console.error(\'Error checking bulk export status:\', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \'Failed to check export status\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/ehr/allscripts/bulk-export/:id/process\n * Process a completed bulk export (download and store resources)\n */\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { id: string } }\n) {\n  try {\n    const session = await getServerSession(authOptions);\n    if (!session?.user?.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 401 }\n      );\n    }\n\n    const jobId = params.id;\n\n    // Get the job\n    const job = await prisma.bulkExportJob.findUnique({\n      where: { id: jobId },\n      include: {\n        connection: {\n          select: {\n            userId: true,\n            fhirBaseUrl: true,\n            accessToken: true,\n          },\n        },\n      },\n    });\n\n    if (!job) {\n      return NextResponse.json(\n        { error: \'Job not found\' },\n        { status: 404 }\n      );\n    }\n\n    // Verify job belongs to user\n    if (job.connection.userId !== session.user.id) {\n      return NextResponse.json(\n        { error: \'Unauthorized\' },\n        { status: 403 }\n      );\n    }\n\n    // Verify job is completed\n    if (job.status !== \'COMPLETED\') {\n      return NextResponse.json(\n        { error: \'Job is not completed yet\' },\n        { status: 400 }\n      );\n    }\n\n    // Process the export files\n    const fhirClient = new FHIRClient(\n      job.connection.fhirBaseUrl,\n      job.connection.accessToken || \'\'\n    );\n    const allscriptsService = new AllscriptsEnhancedService(fhirClient);\n\n    await allscriptsService.processBulkExportFiles(jobId);\n\n    // Get updated job\n    const updatedJob = await prisma.bulkExportJob.findUnique({\n      where: { id: jobId },\n    });\n\n    return NextResponse.json({\n      success: true,\n      message: \'Bulk export processed successfully\',\n      job: {\n        id: updatedJob?.id,\n        resourceCount: updatedJob?.resourceCount,\n        totalSize: updatedJob?.totalSize.toString(),\n      },\n    });\n  } catch (error) {\n    console.error(\'Error processing bulk export:\', error);\n    return NextResponse.json(\n      { error: error instanceof Error ? error.message : \'Failed to process bulk export\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}