{'role': 'assistant', 'content': 'Now let me create the database schema:\n\n<function_calls>\n<str-replace file_path="medical-analysis-platform/prisma/schema.prisma">\n<old_str>// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}</old_str>\n<new_str>// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\nmodel User {\n  id            String    @id @default(uuid())\n  email         String    @unique\n  passwordHash  String    @map("password_hash")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  updatedAt     DateTime  @updatedAt @map("updated_at")\n  \n  patients      Patient[]\n  documents     Document[]\n  analysisSessions AnalysisSession[]\n  \n  @@map("users")\n}\n\nmodel Patient {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  firstName     String?   @map("first_name")\n  lastName      String?   @map("last_name")\n  dateOfBirth   DateTime? @map("date_of_birth")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  documents     Document[]\n  analysisSessions AnalysisSession[]\n  \n  @@map("patients")\n}\n\nmodel Document {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  patientId     String?   @map("patient_id")\n  filePath      String    @map("file_path")\n  fileName      String    @map("file_name")\n  fileSize      Int?      @map("file_size")\n  mimeType      String?   @map("mime_type")\n  documentType  String?   @map("document_type") // \'bloodwork\', \'imaging\', \'aftercare\', etc.\n  uploadDate    DateTime  @default(now()) @map("upload_date")\n  documentDate  DateTime? @map("document_date") // Date of the actual medical document\n  status        String    @default("pending") // \'pending\', \'processing\', \'completed\', \'failed\'\n  createdAt     DateTime  @default(now()) @map("created_at")\n  updatedAt     DateTime  @updatedAt @map("updated_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\n  ocrResults    OcrResult[]\n  extractedData ExtractedData[]\n  sourceLinks   DocumentLink[] @relation("SourceDocument")\n  targetLinks   DocumentLink[] @relation("TargetDocument")\n  embeddings    DocumentEmbedding[]\n  \n  @@map("documents")\n}\n\nmodel OcrResult {\n  id              String    @id @default(uuid())\n  documentId      String    @map("document_id")\n  rawText         String    @map("raw_text") @db.Text\n  confidenceScore Float?    @map("confidence_score")\n  processedAt     DateTime  @default(now()) @map("processed_at")\n  \n  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("ocr_results")\n}\n\nmodel ExtractedData {\n  id            String    @id @default(uuid())\n  documentId    String    @map("document_id")\n  dataType      String    @map("data_type") // \'test_result\', \'diagnosis\', \'medication\', etc.\n  fieldName     String    @map("field_name")\n  fieldValue    String    @map("field_value") @db.Text\n  unit          String?\n  referenceRange String?  @map("reference_range")\n  isAbnormal    Boolean?  @map("is_abnormal")\n  extractedAt   DateTime  @default(now()) @map("extracted_at")\n  \n  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("extracted_data")\n}\n\nmodel DocumentLink {\n  id                  String    @id @default(uuid())\n  sourceDocumentId    String    @map("source_document_id")\n  targetDocumentId    String    @map("target_document_id")\n  relationshipType    String    @map("relationship_type") // \'follow_up\', \'related\', \'supersedes\', etc.\n  createdAt           DateTime  @default(now()) @map("created_at")\n  \n  sourceDocument      Document  @relation("SourceDocument", fields: [sourceDocumentId], references: [id], onDelete: Cascade)\n  targetDocument      Document  @relation("TargetDocument", fields: [targetDocumentId], references: [id], onDelete: Cascade)\n  \n  @@unique([sourceDocumentId, targetDocumentId])\n  @@map("document_links")\n}\n\nmodel AnalysisSession {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  patientId     String?   @map("patient_id")\n  sessionType   String    @map("session_type") // \'query\', \'trend_analysis\', \'insight_generation\'\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\n  interactions  AiInteraction[]\n  \n  @@map("analysis_sessions")\n}\n\nmodel AiInteraction {\n  id                String    @id @default(uuid())\n  sessionId         String    @map("session_id")\n  query             String    @db.Text\n  response          String?   @db.Text\n  contextDocuments  String[]  @map("context_documents") // Array of document IDs\n  createdAt         DateTime  @default(now()) @map("created_at")\n  \n  session           AnalysisSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  \n  @@map("ai_interactions")\n}\n\nmodel DocumentEmbedding {\n  id            String    @id @default(uuid())\n  documentId    String    @map("document_id")\n  chunkIndex    Int       @map("chunk_index")\n  chunkText     String    @map("chunk_text") @db.Text\n  embedding     Float[]   // Store as array of floats\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("document_embeddings")\n}</new_str>\n</str-replace>\n</function_calls>'}