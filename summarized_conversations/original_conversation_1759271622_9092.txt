{'role': 'assistant', 'content': 'Now let me create additional API endpoints for task management:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/analysis-queue/[taskId]/route.ts">\n/**\n * Analysis Queue Task API\n * \n * Endpoints for managing individual tasks.\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { analysisQueue } from \'@/lib/services/AnalysisQueueService\';\n\n/**\n * GET /api/analysis-queue/[taskId]\n * Get task by ID\n */\nexport async function GET(\n  request: NextRequest,\n  { params }: { params: { taskId: string } }\n) {\n  try {\n    const { taskId } = params;\n\n    const task = await analysisQueue.getTask(taskId);\n\n    if (!task) {\n      return NextResponse.json(\n        { error: \'Task not found\' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      data: task\n    });\n\n  } catch (error: any) {\n    console.error(\'Failed to get task:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to get task\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/analysis-queue/[taskId]?userId=xxx\n * Cancel a task\n */\nexport async function DELETE(\n  request: NextRequest,\n  { params }: { params: { taskId: string } }\n) {\n  try {\n    const { taskId } = params;\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get(\'userId\');\n\n    if (!userId) {\n      return NextResponse.json(\n        { error: \'userId is required\' },\n        { status: 400 }\n      );\n    }\n\n    const cancelled = await analysisQueue.cancelTask(taskId, userId);\n\n    if (!cancelled) {\n      return NextResponse.json(\n        { error: \'Task not found or cannot be cancelled\' },\n        { status: 404 }\n      );\n    }\n\n    return NextResponse.json({\n      success: true,\n      message: \'Task cancelled successfully\'\n    });\n\n  } catch (error: any) {\n    console.error(\'Failed to cancel task:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to cancel task\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PATCH /api/analysis-queue/[taskId]/progress\n * Update task progress\n */\nexport async function PATCH(\n  request: NextRequest,\n  { params }: { params: { taskId: string } }\n) {\n  try {\n    const { taskId } = params;\n    const body = await request.json();\n    const { progress } = body;\n\n    if (typeof progress !== \'number\' || progress < 0 || progress > 100) {\n      return NextResponse.json(\n        { error: \'progress must be a number between 0 and 100\' },\n        { status: 400 }\n      );\n    }\n\n    await analysisQueue.updateTaskProgress(taskId, progress);\n\n    return NextResponse.json({\n      success: true,\n      message: \'Progress updated successfully\'\n    });\n\n  } catch (error: any) {\n    console.error(\'Failed to update progress:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Failed to update progress\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}