{'role': 'assistant', 'content': 'Now let me create the database schema updates for the patient repository system:\n\n<function_calls>\n<str-replace file_path="medical-analysis-platform/prisma/schema.prisma">\n<old_str>// Security Alerts\nmodel SecurityAlert {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  action        String\n  details       String    @db.Text // JSON\n  severity      String    @default("high")\n  acknowledged  Boolean   @default(false)\n  acknowledgedBy String?  @map("acknowledged_by")\n  acknowledgedAt DateTime? @map("acknowledged_at")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  @@map("security_alerts")\n  @@index([userId])\n  @@index([acknowledged])\n  @@index([createdAt])\n}</old_str>\n<new_str>// Security Alerts\nmodel SecurityAlert {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  action        String\n  details       String    @db.Text // JSON\n  severity      String    @default("high")\n  acknowledged  Boolean   @default(false)\n  acknowledgedBy String?  @map("acknowledged_by")\n  acknowledgedAt DateTime? @map("acknowledged_at")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  @@map("security_alerts")\n  @@index([userId])\n  @@index([acknowledged])\n  @@index([createdAt])\n}\n\n// Patient Repository - Sandboxed per patient\nmodel PatientRepository {\n  id                      String    @id @default(uuid())\n  userId                  String    @unique @map("user_id")\n  primaryIdentityHash     String    @unique @map("primary_identity_hash")\n  secondaryIdentityHash   String    @map("secondary_identity_hash")\n  compositeIdentityHash   String    @unique @map("composite_identity_hash")\n  encryptedPersonalInfo   String    @map("encrypted_personal_info") @db.Text\n  hasMothersMaidenName    Boolean   @default(false) @map("has_mothers_maiden_name")\n  hasPreviousAddress      Boolean   @default(false) @map("has_previous_address")\n  createdAt               DateTime  @default(now()) @map("created_at")\n  updatedAt               DateTime  @updatedAt @map("updated_at")\n  lastAccessedAt          DateTime? @map("last_accessed_at")\n  version                 Int       @default(1)\n  \n  diagnoses               PatientDiagnosis[]\n  medications             PatientMedication[]\n  allergies               PatientAllergy[]\n  vitalSigns              PatientVitalSign[]\n  procedures              PatientProcedure[]\n  immunizations           PatientImmunization[]\n  familyHistory           PatientFamilyHistory[]\n  \n  @@map("patient_repositories")\n  @@index([userId])\n  @@index([compositeIdentityHash])\n}\n\n// Patient Medical Data Tables\n\nmodel PatientDiagnosis {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  condition       String\n  icd10Code       String?   @map("icd10_code")\n  diagnosedDate   DateTime  @map("diagnosed_date")\n  status          String    // \'active\', \'resolved\', \'chronic\'\n  severity        String?   // \'mild\', \'moderate\', \'severe\'\n  notes           String?   @db.Text\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_diagnoses")\n  @@index([repositoryId])\n  @@index([diagnosedDate])\n}\n\nmodel PatientMedication {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  name            String\n  dosage          String\n  frequency       String\n  startDate       DateTime  @map("start_date")\n  endDate         DateTime? @map("end_date")\n  prescribedBy    String?   @map("prescribed_by")\n  purpose         String?   @db.Text\n  status          String    // \'active\', \'discontinued\', \'completed\'\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_medications")\n  @@index([repositoryId])\n  @@index([status])\n}\n\nmodel PatientAllergy {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  allergen        String\n  type            String    // \'drug\', \'food\', \'environmental\', \'other\'\n  reaction        String\n  severity        String    // \'mild\', \'moderate\', \'severe\', \'life-threatening\'\n  diagnosedDate   DateTime? @map("diagnosed_date")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_allergies")\n  @@index([repositoryId])\n}\n\nmodel PatientVitalSign {\n  id                      String    @id @default(uuid())\n  repositoryId            String    @map("repository_id")\n  date                    DateTime\n  bloodPressureSystolic   Int?      @map("blood_pressure_systolic")\n  bloodPressureDiastolic  Int?      @map("blood_pressure_diastolic")\n  heartRate               Int?      @map("heart_rate")\n  temperature             Float?\n  weight                  Float?\n  height                  Float?\n  bmi                     Float?\n  oxygenSaturation        Int?      @map("oxygen_saturation")\n  createdAt               DateTime  @default(now()) @map("created_at")\n  \n  repository              PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_vital_signs")\n  @@index([repositoryId])\n  @@index([date])\n}\n\nmodel PatientProcedure {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  name            String\n  date            DateTime\n  performedBy     String?   @map("performed_by")\n  location        String?\n  notes           String?   @db.Text\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_procedures")\n  @@index([repositoryId])\n  @@index([date])\n}\n\nmodel PatientImmunization {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  vaccine         String\n  date            DateTime\n  doseNumber      Int?      @map("dose_number")\n  administeredBy  String?   @map("administered_by")\n  lotNumber       String?   @map("lot_number")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_immunizations")\n  @@index([repositoryId])\n  @@index([date])\n}\n\nmodel PatientFamilyHistory {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  relationship    String\n  condition       String\n  ageAtDiagnosis  Int?      @map("age_at_diagnosis")\n  notes           String?   @db.Text\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_family_history")\n  @@index([repositoryId])\n}\n\n// Identity Verification Challenges\nmodel IdentityChallenge {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  questions       String    @db.Text // JSON array\n  expiresAt       DateTime  @map("expires_at")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  @@map("identity_challenges")\n  @@index([repositoryId])\n  @@index([expiresAt])\n}</new_str>\n</str-replace>\n</function_calls>'}