{'role': 'assistant', 'content': '<function_calls>\n<full-file-rewrite file_path="todo.md">\n# HoloVitals EHR Integration System - Fasten-OnPrem Style\n\n**Goal**: Build a medical data retrieval system that connects to Epic and other EHR platforms using FHIR APIs to automatically pull patient medical records, including PDFs and clinical documents.\n\n**Status**: 0% Complete  \n**Estimated Time**: 3-4 weeks\n\n---\n\n## Phase 1: FHIR Foundation & Architecture (Week 1)\n\n### 1.1 FHIR Client Infrastructure\n- [ ] Create base FHIR client with R4 support\n- [ ] Implement SMART on FHIR authentication flow\n- [ ] Create OAuth2 token management service\n- [ ] Build FHIR resource parser and validator\n- [ ] Implement error handling and retry logic\n\n### 1.2 Database Schema for EHR Data\n- [ ] Create EHRConnection model (provider, credentials, status)\n- [ ] Create FHIRResource model (raw FHIR data storage)\n- [ ] Create DocumentReference model (PDF/document metadata)\n- [ ] Create SyncHistory model (sync logs and status)\n- [ ] Add indexes for performance\n\n### 1.3 Provider Registry\n- [ ] Create provider configuration system\n- [ ] Add Epic FHIR endpoint configurations\n- [ ] Add Cerner/Oracle Health configurations\n- [ ] Add support for 100+ healthcare systems\n- [ ] Implement provider discovery service\n\n---\n\n## Phase 2: Epic Integration (Week 2)\n\n### 2.1 Epic SMART on FHIR Authentication\n- [ ] Implement Epic OAuth2 authorization flow\n- [ ] Create Epic app registration helper\n- [ ] Build patient authorization UI\n- [ ] Implement token refresh mechanism\n- [ ] Add Epic sandbox testing support\n\n### 2.2 Epic FHIR API Integration\n- [ ] Implement Patient resource retrieval\n- [ ] Implement DocumentReference queries\n- [ ] Implement Observation (labs) retrieval\n- [ ] Implement Condition (diagnoses) retrieval\n- [ ] Implement MedicationRequest retrieval\n- [ ] Implement AllergyIntolerance retrieval\n- [ ] Implement Immunization retrieval\n- [ ] Implement Procedure retrieval\n\n### 2.3 Document Retrieval\n- [ ] Implement PDF download from DocumentReference\n- [ ] Support Base64-encoded documents\n- [ ] Support external document URLs\n- [ ] Implement document type detection\n- [ ] Add document validation and virus scanning\n\n---\n\n## Phase 3: Data Synchronization Engine (Week 2-3)\n\n### 3.1 Sync Service\n- [ ] Create background sync scheduler\n- [ ] Implement incremental sync (only new/updated data)\n- [ ] Add full sync capability\n- [ ] Implement sync conflict resolution\n- [ ] Add sync progress tracking\n\n### 3.2 Data Transformation\n- [ ] Transform FHIR resources to HoloVitals format\n- [ ] Map FHIR codes to standard terminologies\n- [ ] Extract structured data from documents\n- [ ] Implement data deduplication\n- [ ] Add data quality validation\n\n### 3.3 Cost Management Integration\n- [ ] Estimate tokens for imported documents\n- [ ] Apply free upload limits\n- [ ] Integrate with token deduction system\n- [ ] Track import costs per provider\n- [ ] Generate cost reports\n\n---\n\n## Phase 4: Multi-Provider Support (Week 3)\n\n### 4.1 Additional EHR Connectors\n- [ ] Cerner/Oracle Health connector\n- [ ] Allscripts connector\n- [ ] athenahealth connector\n- [ ] eClinicalWorks connector\n- [ ] NextGen connector\n\n### 4.2 Connector Framework\n- [ ] Create abstract EHR connector interface\n- [ ] Implement connector factory pattern\n- [ ] Add connector health monitoring\n- [ ] Build connector testing framework\n- [ ] Create connector documentation\n\n---\n\n## Phase 5: API Endpoints (Week 3-4)\n\n### 5.1 Connection Management APIs\n- [ ] POST /api/ehr/connect - Initiate EHR connection\n- [ ] GET /api/ehr/connections - List user\'s connections\n- [ ] DELETE /api/ehr/connections/:id - Remove connection\n- [ ] POST /api/ehr/authorize - Complete OAuth flow\n- [ ] GET /api/ehr/providers - List available providers\n\n### 5.2 Sync Management APIs\n- [ ] POST /api/ehr/sync - Trigger manual sync\n- [ ] GET /api/ehr/sync/status - Get sync status\n- [ ] GET /api/ehr/sync/history - Get sync history\n- [ ] POST /api/ehr/sync/cancel - Cancel ongoing sync\n\n### 5.3 Data Retrieval APIs\n- [ ] GET /api/ehr/documents - List imported documents\n- [ ] GET /api/ehr/resources - List FHIR resources\n- [ ] GET /api/ehr/timeline - Get patient timeline\n- [ ] GET /api/ehr/summary - Get health summary\n\n---\n\n## Phase 6: UI Components (Week 4)\n\n### 6.1 Provider Connection UI\n- [ ] Provider selection page\n- [ ] OAuth authorization flow UI\n- [ ] Connection status dashboard\n- [ ] Connection management interface\n\n### 6.2 Data Sync UI\n- [ ] Sync progress indicator\n- [ ] Sync history timeline\n- [ ] Manual sync trigger button\n- [ ] Sync settings configuration\n\n### 6.3 Imported Data UI\n- [ ] Document viewer for imported PDFs\n- [ ] Health timeline visualization\n- [ ] Lab results display\n- [ ] Medication list view\n- [ ] Allergy and condition lists\n\n---\n\n## Phase 7: Security & Compliance (Week 4)\n\n### 7.1 Security Measures\n- [ ] Encrypt OAuth tokens at rest\n- [ ] Implement token rotation\n- [ ] Add connection timeout policies\n- [ ] Implement rate limiting\n- [ ] Add IP whitelisting for callbacks\n\n### 7.2 HIPAA Compliance\n- [ ] Audit all EHR data access\n- [ ] Implement data retention policies\n- [ ] Add patient consent tracking\n- [ ] Create BAA documentation\n- [ ] Implement data breach notification\n\n### 7.3 Testing & Validation\n- [ ] Unit tests for all services\n- [ ] Integration tests with Epic sandbox\n- [ ] End-to-end workflow tests\n- [ ] Security penetration testing\n- [ ] Load testing for sync operations\n\n---\n\n## Phase 8: Documentation & Deployment\n\n### 8.1 Documentation\n- [ ] EHR integration guide\n- [ ] Provider setup instructions\n- [ ] API documentation\n- [ ] Troubleshooting guide\n- [ ] Security best practices\n\n### 8.2 Deployment\n- [ ] Configure production OAuth apps\n- [ ] Set up webhook endpoints\n- [ ] Configure background job workers\n- [ ] Deploy to production\n- [ ] Monitor and optimize\n\n---\n\n## Key Features to Implement\n\n### 1. SMART on FHIR Authentication\n- OAuth2 authorization code flow\n- Patient-facing app registration\n- Automatic token refresh\n- Secure token storage\n\n### 2. Comprehensive Data Retrieval\n- Patient demographics\n- Clinical documents (PDFs, CCDAs)\n- Lab results and observations\n- Medications and prescriptions\n- Diagnoses and conditions\n- Allergies and intolerances\n- Immunization records\n- Procedures and surgeries\n\n### 3. Intelligent Sync\n- Incremental updates (only new data)\n- Conflict resolution\n- Error recovery\n- Progress tracking\n- Cost estimation\n\n### 4. Multi-Provider Support\n- Epic (MyChart)\n- Cerner/Oracle Health\n- 100+ healthcare systems\n- Extensible connector framework\n\n### 5. Cost Integration\n- Automatic token estimation\n- Free upload limit application\n- Cost tracking per provider\n- Budget alerts\n\n---\n\n## Technical Stack\n\n### Backend\n- TypeScript/Node.js\n- FHIR Client library (fhir.js or custom)\n- OAuth2 client (simple-oauth2)\n- Background jobs (Bull/BullMQ)\n- Prisma ORM\n\n### Standards\n- FHIR R4\n- SMART on FHIR\n- OAuth 2.0\n- HL7 standards\n\n### Security\n- Token encryption (AES-256-GCM)\n- HTTPS only\n- HIPAA-compliant logging\n- Audit trails\n\n---\n\n## Success Metrics\n\n- [ ] Successfully connect to Epic sandbox\n- [ ] Retrieve patient data from Epic\n- [ ] Download and process PDF documents\n- [ ] Sync 100+ resources in <5 minutes\n- [ ] Support 5+ EHR providers\n- [ ] Maintain 99.9% sync success rate\n- [ ] Complete HIPAA compliance audit\n\n---\n\n## Next Immediate Steps\n\n1. Create FHIR client infrastructure\n2. Set up Epic sandbox account\n3. Implement SMART on FHIR auth flow\n4. Build database schema\n5. Create first Epic connector\n</full-file-rewrite>\n</function_calls>'}