{'role': 'assistant', 'content': 'Now let\'s create the final page - the Costs Dashboard. This will be comprehensive with charts and analytics:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/dashboard/costs/page.tsx">\n\'use client\';\n\nimport { useState } from \'react\';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \'@/components/ui/card\';\nimport { Button } from \'@/components/ui/button\';\nimport {\n  DollarSign,\n  TrendingUp,\n  TrendingDown,\n  Calendar,\n  Download,\n  Filter,\n  Zap,\n  Server,\n  MessageSquare,\n  FileText,\n  ArrowUpRight,\n  ArrowDownRight\n} from \'lucide-react\';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \'@/components/ui/select\';\n\ninterface CostData {\n  date: string;\n  chatbot: number;\n  optimizer: number;\n  queue: number;\n  instances: number;\n  total: number;\n}\n\nexport default function CostsPage() {\n  const [timeRange, setTimeRange] = useState(\'7d\');\n  \n  // Mock data - would come from API\n  const costData: CostData[] = [\n    { date: \'2024-09-24\', chatbot: 1.20, optimizer: 0.50, queue: 0.30, instances: 2.40, total: 4.40 },\n    { date: \'2024-09-25\', chatbot: 1.50, optimizer: 0.60, queue: 0.40, instances: 3.20, total: 5.70 },\n    { date: \'2024-09-26\', chatbot: 1.80, optimizer: 0.70, queue: 0.50, instances: 2.80, total: 5.80 },\n    { date: \'2024-09-27\', chatbot: 1.40, optimizer: 0.55, queue: 0.35, instances: 3.50, total: 5.80 },\n    { date: \'2024-09-28\', chatbot: 1.60, optimizer: 0.65, queue: 0.45, instances: 2.90, total: 5.60 },\n    { date: \'2024-09-29\', chatbot: 1.90, optimizer: 0.75, queue: 0.55, instances: 3.80, total: 7.00 },\n    { date: \'2024-09-30\', chatbot: 2.10, optimizer: 0.80, queue: 0.60, instances: 4.20, total: 7.70 },\n  ];\n\n  const currentTotal = costData[costData.length - 1].total;\n  const previousTotal = costData[costData.length - 2].total;\n  const percentChange = ((currentTotal - previousTotal) / previousTotal) * 100;\n\n  const stats = {\n    today: currentTotal,\n    yesterday: previousTotal,\n    week: costData.reduce((sum, d) => sum + d.total, 0),\n    month: costData.reduce((sum, d) => sum + d.total, 0) * 4.3, // Approximate\n    chatbot: costData.reduce((sum, d) => sum + d.chatbot, 0),\n    optimizer: costData.reduce((sum, d) => sum + d.optimizer, 0),\n    queue: costData.reduce((sum, d) => sum + d.queue, 0),\n    instances: costData.reduce((sum, d) => sum + d.instances, 0),\n  };\n\n  const savings = {\n    tokensSaved: 125000,\n    costSaved: 52.30,\n    percentSaved: 40,\n    instanceSavings: 245.80,\n    totalSavings: 298.10,\n  };\n\n  const breakdown = [\n    { \n      name: \'Chatbot Service\', \n      cost: stats.chatbot, \n      percentage: (stats.chatbot / stats.week) * 100,\n      icon: MessageSquare,\n      color: \'text-blue-600\',\n      bgColor: \'bg-blue-100\'\n    },\n    { \n      name: \'Context Optimizer\', \n      cost: stats.optimizer, \n      percentage: (stats.optimizer / stats.week) * 100,\n      icon: Zap,\n      color: \'text-purple-600\',\n      bgColor: \'bg-purple-100\'\n    },\n    { \n      name: \'Analysis Queue\', \n      cost: stats.queue, \n      percentage: (stats.queue / stats.week) * 100,\n      icon: FileText,\n      color: \'text-green-600\',\n      bgColor: \'bg-green-100\'\n    },\n    { \n      name: \'Cloud Instances\', \n      cost: stats.instances, \n      percentage: (stats.instances / stats.week) * 100,\n      icon: Server,\n      color: \'text-orange-600\',\n      bgColor: \'bg-orange-100\'\n    },\n  ];\n\n  const maxCost = Math.max(...costData.map(d => d.total));\n\n  return (\n    <div className="space-y-6">\n      {/* Header */}\n      <div className="flex items-center justify-between">\n        <div>\n          <h1 className="text-3xl font-bold mb-2">Cost Dashboard</h1>\n          <p className="text-gray-600">Track and optimize your platform costs</p>\n        </div>\n        <div className="flex gap-2">\n          <Select value={timeRange} onValueChange={setTimeRange}>\n            <SelectTrigger className="w-32">\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value="7d">Last 7 days</SelectItem>\n              <SelectItem value="30d">Last 30 days</SelectItem>\n              <SelectItem value="90d">Last 90 days</SelectItem>\n            </SelectContent>\n          </Select>\n          <Button variant="outline">\n            <Download className="w-4 h-4 mr-2" />\n            Export\n          </Button>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className="grid gap-4 md:grid-cols-4">\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              Today\n            </CardTitle>\n            <DollarSign className="w-4 h-4 text-gray-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">${stats.today.toFixed(2)}</div>\n            <div className="flex items-center gap-1 text-xs mt-1">\n              {percentChange >= 0 ? (\n                <>\n                  <ArrowUpRight className="w-3 h-3 text-red-600" />\n                  <span className="text-red-600">+{percentChange.toFixed(1)}%</span>\n                </>\n              ) : (\n                <>\n                  <ArrowDownRight className="w-3 h-3 text-green-600" />\n                  <span className="text-green-600">{percentChange.toFixed(1)}%</span>\n                </>\n              )}\n              <span className="text-gray-500">vs yesterday</span>\n            </div>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              This Week\n            </CardTitle>\n            <Calendar className="w-4 h-4 text-gray-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">${stats.week.toFixed(2)}</div>\n            <p className="text-xs text-gray-500 mt-1">\n              Avg ${(stats.week / 7).toFixed(2)}/day\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-gray-600">\n              This Month (Est.)\n            </CardTitle>\n            <TrendingUp className="w-4 h-4 text-gray-500" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold">${stats.month.toFixed(2)}</div>\n            <p className="text-xs text-gray-500 mt-1">\n              Projected\n            </p>\n          </CardContent>\n        </Card>\n\n        <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">\n          <CardHeader className="flex flex-row items-center justify-between pb-2">\n            <CardTitle className="text-sm font-medium text-green-900">\n              Total Savings\n            </CardTitle>\n            <TrendingDown className="w-4 h-4 text-green-600" />\n          </CardHeader>\n          <CardContent>\n            <div className="text-2xl font-bold text-green-600">\n              ${savings.totalSavings.toFixed(2)}\n            </div>\n            <p className="text-xs text-green-700 mt-1">\n              This week\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Cost Trend Chart */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Cost Trend</CardTitle>\n          <CardDescription>Daily cost breakdown over time</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="space-y-4">\n            {/* Simple bar chart */}\n            <div className="flex items-end justify-between h-64 gap-2">\n              {costData.map((data, index) => (\n                <div key={index} className="flex-1 flex flex-col items-center gap-2">\n                  <div className="w-full flex flex-col gap-1">\n                    {/* Stacked bars */}\n                    <div\n                      className="w-full bg-blue-500 rounded-t"\n                      style={{ height: `${(data.chatbot / maxCost) * 200}px` }}\n                      title={`Chatbot: $${data.chatbot.toFixed(2)}`}\n                    />\n                    <div\n                      className="w-full bg-purple-500"\n                      style={{ height: `${(data.optimizer / maxCost) * 200}px` }}\n                      title={`Optimizer: $${data.optimizer.toFixed(2)}`}\n                    />\n                    <div\n                      className="w-full bg-green-500"\n                      style={{ height: `${(data.queue / maxCost) * 200}px` }}\n                      title={`Queue: $${data.queue.toFixed(2)}`}\n                    />\n                    <div\n                      className="w-full bg-orange-500"\n                      style={{ height: `${(data.instances / maxCost) * 200}px` }}\n                      title={`Instances: $${data.instances.toFixed(2)}`}\n                    />\n                  </div>\n                  <div className="text-xs text-gray-600 text-center">\n                    {new Date(data.date).toLocaleDateString(\'en-US\', { month: \'short\', day: \'numeric\' })}\n                  </div>\n                  <div className="text-xs font-medium">\n                    ${data.total.toFixed(2)}\n                  </div>\n                </div>\n              ))}\n            </div>\n\n            {/* Legend */}\n            <div className="flex flex-wrap gap-4 justify-center pt-4 border-t">\n              <div className="flex items-center gap-2">\n                <div className="w-3 h-3 bg-blue-500 rounded" />\n                <span className="text-sm text-gray-600">Chatbot</span>\n              </div>\n              <div className="flex items-center gap-2">\n                <div className="w-3 h-3 bg-purple-500 rounded" />\n                <span className="text-sm text-gray-600">Optimizer</span>\n              </div>\n              <div className="flex items-center gap-2">\n                <div className="w-3 h-3 bg-green-500 rounded" />\n                <span className="text-sm text-gray-600">Queue</span>\n              </div>\n              <div className="flex items-center gap-2">\n                <div className="w-3 h-3 bg-orange-500 rounded" />\n                <span className="text-sm text-gray-600">Instances</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Cost Breakdown & Savings */}\n      <div className="grid lg:grid-cols-2 gap-6">\n        {/* Cost Breakdown */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Cost Breakdown</CardTitle>\n            <CardDescription>Spending by service (this week)</CardDescription>\n          </CardHeader>\n          <CardContent className="space-y-4">\n            {breakdown.map((item, index) => {\n              const Icon = item.icon;\n              return (\n                <div key={index} className="space-y-2">\n                  <div className="flex items-center justify-between">\n                    <div className="flex items-center gap-3">\n                      <div className={`w-10 h-10 ${item.bgColor} rounded-lg flex items-center justify-center`}>\n                        <Icon className={`w-5 h-5 ${item.color}`} />\n                      </div>\n                      <div>\n                        <p className="font-medium">{item.name}</p>\n                        <p className="text-sm text-gray-500">\n                          {item.percentage.toFixed(1)}% of total\n                        </p>\n                      </div>\n                    </div>\n                    <div className="text-right">\n                      <p className="font-bold">${item.cost.toFixed(2)}</p>\n                    </div>\n                  </div>\n                  <div className="w-full bg-gray-200 rounded-full h-2">\n                    <div\n                      className={`h-2 rounded-full ${item.bgColor.replace(\'100\', \'500\')}`}\n                      style={{ width: `${item.percentage}%` }}\n                    />\n                  </div>\n                </div>\n              );\n            })}\n          </CardContent>\n        </Card>\n\n        {/* Savings Summary */}\n        <Card className="bg-gradient-to-br from-green-50 to-emerald-50 border-green-200">\n          <CardHeader>\n            <CardTitle className="text-green-900">Cost Savings</CardTitle>\n            <CardDescription className="text-green-700">\n              Your optimization is working!\n            </CardDescription>\n          </CardHeader>\n          <CardContent className="space-y-6">\n            {/* Context Optimization Savings */}\n            <div>\n              <div className="flex items-center justify-between mb-2">\n                <div className="flex items-center gap-2">\n                  <Zap className="w-5 h-5 text-green-600" />\n                  <span className="font-medium text-green-900">Context Optimization</span>\n                </div>\n                <span className="text-2xl font-bold text-green-600">\n                  ${savings.costSaved.toFixed(2)}\n                </span>\n              </div>\n              <div className="space-y-1 text-sm text-green-800">\n                <p>{savings.tokensSaved.toLocaleString()} tokens saved</p>\n                <p>{savings.percentSaved}% reduction in AI costs</p>\n              </div>\n            </div>\n\n            {/* Instance Savings */}\n            <div>\n              <div className="flex items-center justify-between mb-2">\n                <div className="flex items-center gap-2">\n                  <Server className="w-5 h-5 text-green-600" />\n                  <span className="font-medium text-green-900">Ephemeral Instances</span>\n                </div>\n                <span className="text-2xl font-bold text-green-600">\n                  ${savings.instanceSavings.toFixed(2)}\n                </span>\n              </div>\n              <div className="space-y-1 text-sm text-green-800">\n                <p>90% savings vs always-on</p>\n                <p>Auto-termination working</p>\n              </div>\n            </div>\n\n            {/* Total */}\n            <div className="pt-4 border-t border-green-300">\n              <div className="flex items-center justify-between">\n                <span className="text-lg font-semibold text-green-900">\n                  Total Savings This Week\n                </span>\n                <span className="text-3xl font-bold text-green-600">\n                  ${savings.totalSavings.toFixed(2)}\n                </span>\n              </div>\n              <p className="text-sm text-green-700 mt-2">\n                Projected monthly savings: ${(savings.totalSavings * 4.3).toFixed(2)}\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Cost Optimization Tips */}\n      <Card>\n        <CardHeader>\n          <CardTitle>Cost Optimization Tips</CardTitle>\n          <CardDescription>Ways to reduce your costs further</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className="grid md:grid-cols-2 gap-4">\n            <div className="p-4 bg-blue-50 rounded-lg">\n              <h4 className="font-medium text-blue-900 mb-2">Use Local Models</h4>\n              <p className="text-sm text-blue-800">\n                Switch to Llama 3.2 for non-critical tasks to save on API costs. It\'s completely free!\n              </p>\n            </div>\n            <div className="p-4 bg-purple-50 rounded-lg">\n              <h4 className="font-medium text-purple-900 mb-2">Optimize Context</h4>\n              <p className="text-sm text-purple-800">\n                Enable aggressive optimization for documents to maximize token savings (up to 60% reduction).\n              </p>\n            </div>\n            <div className="p-4 bg-green-50 rounded-lg">\n              <h4 className="font-medium text-green-900 mb-2">Batch Processing</h4>\n              <p className="text-sm text-green-800">\n                Process multiple documents together to reduce instance provisioning overhead.\n              </p>\n            </div>\n            <div className="p-4 bg-orange-50 rounded-lg">\n              <h4 className="font-medium text-orange-900 mb-2">Auto-Termination</h4>\n              <p className="text-sm text-orange-800">\n                Set shorter auto-terminate times for instances to avoid unnecessary costs.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n</create-file>\n</function_calls>'}