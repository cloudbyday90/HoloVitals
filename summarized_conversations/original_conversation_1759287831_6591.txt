{'role': 'assistant', 'content': 'Perfect! Now let me create a quick reference guide for developers:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/docs/PRICING_QUICK_START.md">\n# Pricing System - Quick Start Guide\n\n## For Developers\n\n### 1. Create a Subscription\n\n```typescript\nimport { SubscriptionService } from \'@/lib/services/SubscriptionService\';\nimport { SubscriptionTier } from \'@/lib/config/pricing\';\n\n// Create new subscription\nconst result = await SubscriptionService.createSubscription({\n  userId: \'user-123\',\n  tier: SubscriptionTier.PROFESSIONAL,\n  paymentMethodId: \'pm_xxx\',\n  trialPeriod: false,\n});\n\nconsole.log(\'Subscription:\', result.subscription);\nconsole.log(\'Token Balance:\', result.tokenBalance);\n```\n\n### 2. Check Token Balance\n\n```typescript\nimport { TokenService } from \'@/lib/services/TokenService\';\n\nconst balance = await TokenService.getBalance(\'user-123\');\n\nconsole.log(\'Current Balance:\', balance.currentBalanceFormatted);\nconsole.log(\'Total Earned:\', balance.totalEarnedFormatted);\nconsole.log(\'Total Used:\', balance.totalUsedFormatted);\nconsole.log(\'Free Upload Remaining:\', balance.freeUploadRemaining);\n```\n\n### 3. Estimate File Upload Cost\n\n```typescript\nimport { FileUploadService } from \'@/lib/services/FileUploadService\';\n\nconst result = await FileUploadService.createUpload({\n  userId: \'user-123\',\n  fileName: \'medical-records.pdf\',\n  filePath: \'/uploads/medical-records.pdf\',\n  fileSize: 52428800, // 50MB\n  mimeType: \'application/pdf\',\n  requiresOCR: true,\n  requiresAnalysis: true,\n});\n\nconsole.log(\'Estimated Tokens:\', result.costEstimation.estimatedTokens);\nconsole.log(\'Estimated Cost:\', result.costEstimation.estimatedCostFormatted);\nconsole.log(\'Can Afford:\', result.costEstimation.canAfford);\nconsole.log(\'Recommendation:\', result.costEstimation.recommendation);\n```\n\n### 4. Approve and Process Upload\n\n```typescript\n// Option 1: Immediate processing\nconst result = await FileUploadService.approveCost({\n  uploadId: \'upload-123\',\n  approved: true,\n  processingOption: \'immediate\',\n});\n\n// Option 2: Multi-month processing\nconst result = await FileUploadService.approveCost({\n  uploadId: \'upload-123\',\n  approved: true,\n  processingOption: \'multi-month\',\n});\n\n// Option 3: Purchase tokens first\nconst result = await FileUploadService.approveCost({\n  uploadId: \'upload-123\',\n  approved: true,\n  processingOption: \'one-time-purchase\',\n  packageIndex: 2, // 250K tokens package\n});\n```\n\n### 5. Purchase Additional Tokens\n\n```typescript\nimport { TokenService } from \'@/lib/services/TokenService\';\n\nconst balance = await TokenService.purchaseTokens({\n  userId: \'user-123\',\n  packageIndex: 2, // 250K tokens + 25K bonus\n  paymentIntentId: \'pi_xxx\',\n});\n\nconsole.log(\'New Balance:\', balance.currentBalance);\n```\n\n### 6. Upgrade Subscription\n\n```typescript\nimport { SubscriptionService } from \'@/lib/services/SubscriptionService\';\nimport { SubscriptionTier } from \'@/lib/config/pricing\';\n\n// Immediate upgrade\nconst subscription = await SubscriptionService.changeSubscriptionTier({\n  userId: \'user-123\',\n  newTier: SubscriptionTier.ENTERPRISE,\n  immediate: true,\n});\n\n// Scheduled upgrade (next billing cycle)\nconst subscription = await SubscriptionService.changeSubscriptionTier({\n  userId: \'user-123\',\n  newTier: SubscriptionTier.ENTERPRISE,\n  immediate: false,\n});\n```\n\n### 7. Get Usage Analytics\n\n```typescript\nimport { TokenService } from \'@/lib/services/TokenService\';\n\nconst analytics = await TokenService.getUsageAnalytics(\'user-123\', 30);\n\nconsole.log(\'Total Used:\', analytics.usage.total);\nconsole.log(\'Average Daily:\', analytics.usage.averageDaily);\nconsole.log(\'Projected Monthly:\', analytics.usage.projectedMonthly);\nconsole.log(\'Usage by Type:\', analytics.usageByType);\n```\n\n---\n\n## API Examples\n\n### Create Subscription\n\n```bash\ncurl -X POST http://localhost:3000/api/subscriptions \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "userId": "user-123",\n    "tier": "PROFESSIONAL",\n    "paymentMethodId": "pm_xxx",\n    "trialPeriod": false\n  }\'\n```\n\n### Get Token Balance\n\n```bash\ncurl http://localhost:3000/api/tokens/balance?userId=user-123\n```\n\n### Estimate Upload Cost\n\n```bash\ncurl -X POST http://localhost:3000/api/uploads/estimate \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "userId": "user-123",\n    "fileName": "medical-records.pdf",\n    "filePath": "/uploads/medical-records.pdf",\n    "fileSize": 52428800,\n    "mimeType": "application/pdf"\n  }\'\n```\n\n### Purchase Tokens\n\n```bash\ncurl -X POST http://localhost:3000/api/tokens/purchase \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "userId": "user-123",\n    "packageIndex": 2,\n    "paymentIntentId": "pi_xxx"\n  }\'\n```\n\n### Get Pricing Information\n\n```bash\ncurl http://localhost:3000/api/pricing\n```\n\n---\n\n## Common Patterns\n\n### Check if User Can Afford Operation\n\n```typescript\nimport { TokenService } from \'@/lib/services/TokenService\';\n\nconst tokensNeeded = 50000;\nconst canAfford = await TokenService.canAfford(\'user-123\', tokensNeeded);\n\nif (!canAfford) {\n  // Show upgrade or purchase options\n}\n```\n\n### Deduct Tokens After Processing\n\n```typescript\nimport { TokenService } from \'@/lib/services/TokenService\';\n\nawait TokenService.deductTokens({\n  userId: \'user-123\',\n  amount: 50000,\n  description: \'Document processing: medical-records.pdf\',\n  referenceId: \'upload-123\',\n  referenceType: \'FileUpload\',\n});\n```\n\n### Refund Tokens on Failure\n\n```typescript\nimport { TokenService } from \'@/lib/services/TokenService\';\n\nawait TokenService.refundTokens({\n  userId: \'user-123\',\n  amount: 50000,\n  reason: \'Processing failed - system error\',\n  referenceId: \'upload-123\',\n});\n```\n\n### Get Recommended Tier Upgrade\n\n```typescript\nimport { PricingService } from \'@/lib/services/PricingService\';\nimport { SubscriptionTier } from \'@/lib/config/pricing\';\n\nconst currentTier = SubscriptionTier.BASIC;\nconst monthlyUsage = 150000; // tokens\n\nconst recommendedTier = PricingService.getRecommendedTierUpgrade(\n  currentTier,\n  monthlyUsage\n);\n\nif (recommendedTier) {\n  console.log(\'Recommended upgrade:\', recommendedTier);\n}\n```\n\n---\n\n## Error Handling\n\n```typescript\ntry {\n  await TokenService.deductTokens({\n    userId: \'user-123\',\n    amount: 50000,\n    description: \'Processing\',\n  });\n} catch (error) {\n  if (error.message.includes(\'Insufficient token balance\')) {\n    // Show purchase or upgrade options\n  } else {\n    // Handle other errors\n  }\n}\n```\n\n---\n\n## Testing\n\n### Run Tests\n\n```bash\nnpm test\n```\n\n### Test Specific Service\n\n```bash\nnpm test -- SubscriptionService\nnpm test -- TokenService\nnpm test -- FileUploadService\n```\n\n---\n\n## Database Access\n\n### View Data in Prisma Studio\n\n```bash\nnpx prisma studio\n```\n\n### Query Database Directly\n\n```bash\nsudo -u postgres psql -d holovitals\n\n-- View subscriptions\nSELECT * FROM subscriptions;\n\n-- View token balances\nSELECT * FROM token_balances;\n\n-- View recent transactions\nSELECT * FROM token_transactions ORDER BY created_at DESC LIMIT 10;\n```\n\n---\n\n## Cron Jobs (To Implement)\n\n### Monthly Token Refresh\n\n```typescript\n// Run daily at 2 AM\nimport { SubscriptionService } from \'@/lib/services/SubscriptionService\';\n\n// Get all active subscriptions due for refresh\nconst subscriptions = await prisma.subscription.findMany({\n  where: {\n    status: \'ACTIVE\',\n    // Check if 30 days since last refresh\n  },\n});\n\nfor (const sub of subscriptions) {\n  await SubscriptionService.refreshMonthlyTokens(sub.userId);\n}\n```\n\n### Multi-Month Processing\n\n```typescript\n// Run daily at 3 AM\nimport { FileUploadService } from \'@/lib/services/FileUploadService\';\n\n// Get all scheduled uploads ready for next chunk\nconst uploads = await prisma.fileUpload.findMany({\n  where: {\n    status: \'SCHEDULED\',\n    // Check if ready for next month\n  },\n});\n\nfor (const upload of uploads) {\n  await FileUploadService.processMultiMonthChunk(upload.id);\n}\n```\n\n---\n\n## Configuration\n\n### Pricing Tiers\n\nEdit `lib/config/pricing.ts`:\n\n```typescript\nexport const TIER_CONFIGS: Record<SubscriptionTier, TierConfig> = {\n  [SubscriptionTier.BASIC]: {\n    monthlyPrice: 9.99,\n    monthlyTokens: 100_000,\n    freeUploadLimit: 10 * 1024 * 1024, // 10MB\n    // ...\n  },\n  // ...\n};\n```\n\n### Token Costs\n\n```typescript\nexport const TOKEN_COSTS: TokenCosts = {\n  documentProcessing: 1_000, // per MB\n  chatMessage: 500,\n  documentAnalysis: 5_000,\n  // ...\n};\n```\n\n---\n\n## Troubleshooting\n\n### "Insufficient token balance"\n\n```typescript\n// Check balance\nconst balance = await TokenService.getBalance(userId);\nconsole.log(\'Current balance:\', balance.currentBalance);\n\n// Recommend action\nif (balance.currentBalance < tokensNeeded) {\n  const package = PricingService.getRecommendedPackage(tokensNeeded);\n  console.log(\'Recommended package:\', package);\n}\n```\n\n### "Subscription not found"\n\n```typescript\n// Check if user has subscription\nconst hasSubscription = await SubscriptionService.hasActiveSubscription(userId);\n\nif (!hasSubscription) {\n  // Create subscription first\n  await SubscriptionService.createSubscription({\n    userId,\n    tier: SubscriptionTier.BASIC,\n    trialPeriod: true,\n  });\n}\n```\n\n### "File size exceeds tier limit"\n\n```typescript\nimport { PricingService } from \'@/lib/services/PricingService\';\n\nconst validation = PricingService.validateFileSize(fileSize, currentTier);\n\nif (!validation.valid) {\n  console.log(validation.message);\n  // Suggest upgrade or file splitting\n}\n```\n\n---\n\n## Support\n\n- **Documentation**: `/docs/PRICING_SYSTEM.md`\n- **API Reference**: `/docs/PRICING_SYSTEM.md#api-reference`\n- **Implementation Details**: `/docs/PRICING_IMPLEMENTATION_SUMMARY.md`\n\n---\n\n**Last Updated**: January 2025  \n**Version**: 1.0.0\n</create-file>\n</function_calls>'}