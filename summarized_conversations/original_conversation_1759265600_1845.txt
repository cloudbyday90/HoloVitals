{'role': 'user', 'content': '<tool_result> <scrape-webpage> ToolResult(success=True, output=\'[\\n  {\\n    "title": "Reference documentation for the prisma config file | Prisma Documentation",\\n    "url": "https://www.prisma.io/docs/orm/reference/prisma-config-reference",\\n    "text": "\\\\n\\\\n[Skip to main content](#__docusaurus_skipToContent_fallback)\\\\n\\\\n[Want to decrease global latency for your db queries?](https://pris.ly/sidebar-promo/make-your-db-global)\\\\n\\\\nOn this page\\\\n\\\\n# Prisma Config reference\\\\n\\\\n## Overview[\\\\u200b](#overview \\\\"Direct link to Overview\\\\")\\\\n\\\\nThe Prisma Config file configures the Prisma CLI, including subcommands like `migrate` and `studio`, using TypeScript.\\\\n\\\\nYou can define your config in either of two ways:\\\\n\\\\n* Using the `defineConfig` helper:\\\\n\\\\n  ```\\\\n  import path from \\\\"node:path\\\\";  \\\\n  import { defineConfig } from \\\\"prisma/config\\\\";  \\\\n\\\\n  export default defineConfig({  \\\\n    schema: path.join(\\\\"prisma\\\\", \\\\"schema.prisma\\\\"),  \\\\n    migrations: {  \\\\n      path: path.join(\\\\"db\\\\", \\\\"migrations\\\\"),  \\\\n    },  \\\\n    views: {  \\\\n      path: path.join(\\\\"db\\\\", \\\\"views\\\\"),  \\\\n    },  \\\\n    typedSql: {  \\\\n      path: path.join(\\\\"db\\\\", \\\\"queries\\\\"),  \\\\n    }  \\\\n  });  \\\\n\\\\n  ```\\\\n* Using TypeScript\\\'s `satisfies` operator with the `PrismaConfig` type:\\\\n\\\\n  ```\\\\n  import path from \\\\"node:path\\\\";  \\\\n  import type { PrismaConfig } from \\\\"prisma\\\\";  \\\\n\\\\n  export default {  \\\\n    schema: path.join(\\\\"db\\\\", \\\\"schema.prisma\\\\"),  \\\\n    migrations: {  \\\\n      path: path.join(\\\\"db\\\\", \\\\"migrations\\\\"),  \\\\n    },  \\\\n    views: {  \\\\n      path: path.join(\\\\"db\\\\", \\\\"views\\\\"),  \\\\n    },  \\\\n    typedSql: {  \\\\n      path: path.join(\\\\"db\\\\", \\\\"queries\\\\"),  \\\\n    }  \\\\n  } satisfies PrismaConfig;  \\\\n\\\\n  ```\\\\n\\\\n## Configuration interface[\\\\u200b](#configuration-interface \\\\"Direct link to Configuration interface\\\\")\\\\n\\\\nHere is a simplified version of the `PrismaConfig` type:\\\\n\\\\n```\\\\nexport declare type PrismaConfig = {  \\\\n  // Whether features with an unstable API are enabled.  \\\\n  experimental: {  \\\\n    adapter: true,  \\\\n    externalTables: true,  \\\\n    studio: true,  \\\\n  },  \\\\n\\\\n  // The path to the schema file, or path to a folder that shall be recursively searched for *.prisma files.  \\\\n  schema?: string;  \\\\n\\\\n  // The Driver Adapter used for Prisma CLI.  \\\\n  adapter?: () => Promise<SqlMigrationAwareDriverAdapterFactory>;  \\\\n\\\\n  // The configuration for Prisma Studio.  \\\\n  studio?: {  \\\\n    adapter: () => Promise<SqlMigrationAwareDriverAdapterFactory>;  \\\\n  };  \\\\n\\\\n  // Configuration for Prisma migrations.  \\\\n  migrations?: {  \\\\n    path: string;  \\\\n    seed: string;  \\\\n    initShadowDb: string;  \\\\n  };  \\\\n\\\\n  // Configuration for the database view entities.  \\\\n  views?: {  \\\\n    path: string;  \\\\n  };  \\\\n\\\\n  // Configuration for the `typedSql` preview feature.  \\\\n  typedSql?: {  \\\\n    path: string;  \\\\n  };  \\\\n};  \\\\n\\\\n```\\\\n\\\\n## Supported file extensions[\\\\u200b](#supported-file-extensions \\\\"Direct link to Supported file extensions\\\\")\\\\n\\\\nPrisma Config files can be named as `prisma.config.*` or `.config/prisma.*` with the extensions `js`, `ts`, `mjs`, `cjs`, `mts`, or `cts`. Other extensions are supported to ensure compatibility with different TypeScript compiler settings.\\\\n\\\\nRecommendation\\\\n\\\\n* Use **`prisma.config.ts`** for small TypeScript projects.\\\\n* Use **`.config/prisma.ts`** for larger TypeScript projects with multiple configuration files (following the [`.config` directory proposal](https://github.com/pi0/config-dir)).\\\\n\\\\n## Options reference[\\\\u200b](#options-reference \\\\"Direct link to Options reference\\\\")\\\\n\\\\n### `schema`[\\\\u200b](#schema \\\\"Direct link to schema\\\\")\\\\n\\\\nConfigures how Prisma ORM locates and loads your schema file(s). Can be a file or folder path. Relative paths are resolved relative to the `prisma.config.ts` file location. See [here](/docs/orm/prisma-schema/overview/location#multi-file-prisma-schema) for more info about schema location options.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `schema` | `string` | No | `./prisma/schema.prisma` and `./schema.prisma` |\\\\n\\\\n### `adapter`[\\\\u200b](#adapter \\\\"Direct link to adapter\\\\")\\\\n\\\\nA function that returns a Prisma driver adapter instance which is used by the Prisma CLI to run migrations. The function should return a `Promise` that resolves to a valid Prisma driver adapter.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `adapter` | `() => Promise<SqlMigrationAwareDriverAdapterFactory>` | No | none |\\\\n\\\\nExample using the Prisma ORM D1 driver adapter:\\\\n\\\\n```\\\\nimport path from \\\\"node:path\\\\";  \\\\nimport type { PrismaConfig } from \\\\"prisma\\\\";  \\\\nimport { PrismaD1 } from \\\\"@prisma/adapter-d1\\\\";  \\\\n\\\\n// import your .env file  \\\\nimport \\\\"dotenv/config\\\\";  \\\\n\\\\nexport default {  \\\\n  experimental: {  \\\\n    adapter: true  \\\\n  },  \\\\n  schema: path.join(\\\\"prisma\\\\", \\\\"schema.prisma\\\\"),  \\\\n  async adapter() {  \\\\n    return new PrismaD1({  \\\\n      CLOUDFLARE_D1_TOKEN: process.env.CLOUDFLARE_D1_TOKEN,  \\\\n      CLOUDFLARE_ACCOUNT_ID: process.env.CLOUDFLARE_ACCOUNT_ID,  \\\\n      CLOUDFLARE_DATABASE_ID: process.env.CLOUDFLARE_DATABASE_ID,  \\\\n    });  \\\\n  },  \\\\n} satisfies PrismaConfig;  \\\\n\\\\n```\\\\n\\\\nnote\\\\n\\\\nAs of [Prisma ORM v6.11.0](https://github.com/prisma/prisma/releases/tag/6.11.0), the D1 adapter has been renamed from `PrismaD1HTTP` to `PrismaD1`.\\\\n\\\\n### `studio`[\\\\u200b](#studio \\\\"Direct link to studio\\\\")\\\\n\\\\nConfigures how Prisma Studio connects to your database. See sub-options below for details.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `studio` | `object` | No | none |\\\\n\\\\n#### `studio.adapter`[\\\\u200b](#studioadapter \\\\"Direct link to studioadapter\\\\")\\\\n\\\\nA function that returns a Prisma driver adapter instance. The function receives an `env` parameter containing environment variables and should return a `Promise` that resolves to a valid Prisma driver adapter.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `studio.adapter` | `(env: Env) => Promise<SqlMigrationAwareDriverAdapterFactory>` | No | none |\\\\n\\\\nExample using the Prisma ORM LibSQL driver adapter:\\\\n\\\\n```\\\\nimport type { PrismaConfig } from \\\\"prisma\\\\";  \\\\n\\\\nexport default {  \\\\n  experimental: {  \\\\n    studio: true  \\\\n  },  \\\\n  studio: {  \\\\n    adapter: async (env: Env) => {  \\\\n      const { PrismaLibSQL } = await import(\\\\"@prisma/adapter-libsql\\\\");  \\\\n      const { createClient } = await import(\\\\"@libsql/client\\\\");  \\\\n\\\\n      const libsql = createClient({  \\\\n        url: env.DOTENV_PRISMA_STUDIO_LIBSQL_DATABASE_URL,  \\\\n      });  \\\\n      return new PrismaLibSQL(libsql);  \\\\n    },  \\\\n  },  \\\\n} satisfies PrismaConfig;  \\\\n\\\\n```\\\\n\\\\n### `tables.external` and `enums.external`[\\\\u200b](#tablesexternal-and-enumsexternal \\\\"Direct link to tablesexternal-and-enumsexternal\\\\")\\\\n\\\\nThese options declare tables and enums in your database that are **managed externally** (not by Prisma Migrate). You can still query them with Prisma Client, but they will be ignored by migrations.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `tables.external` | `string[]` | No | `[]` |\\\\n| `enums.external` | `string[]` | No | `[]` |\\\\n\\\\n**Example:**\\\\n\\\\n```\\\\nimport { defineConfig } from \\\\"prisma/config\\\\";  \\\\n\\\\nexport default defineConfig({  \\\\n  experimental: {  \\\\n    externalTables: true,  \\\\n  },  \\\\n  tables: {  \\\\n    external: [\\\\"public.users\\\\"],  \\\\n  },  \\\\n  enums: {  \\\\n    external: [\\\\"public.role\\\\"],  \\\\n  },  \\\\n});  \\\\n\\\\n```\\\\n\\\\nLearn more about the [`externalTables` feature here](/docs/orm/prisma-schema/data-model/externally-managed-tables).\\\\n\\\\n### `migrations.path`[\\\\u200b](#migrationspath \\\\"Direct link to migrationspath\\\\")\\\\n\\\\nThe path to the directory where Prisma should store migration files, and look for them.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `migrations.path` | `string` | No | none |\\\\n\\\\n### `migrations.seed`[\\\\u200b](#migrationsseed \\\\"Direct link to migrationsseed\\\\")\\\\n\\\\nThis option allows you to define a script that Prisma runs to seed your database after running migrations or using the npx prisma db seed command. The string should be a command that can be executed in your terminal, such as with `node`, `ts-node`, or `tsx`.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `migrations.seed` | `string` | No | none |\\\\n\\\\n**Example:**\\\\n\\\\n```\\\\nimport { defineConfig } from \\\\"prisma/config\\\\";  \\\\n\\\\nexport default defineConfig({  \\\\n  migrations: {  \\\\n    seed: `tsx db/seed.ts`,  \\\\n  },  \\\\n});  \\\\n\\\\n```\\\\n\\\\n### `migrations.initShadowDb`[\\\\u200b](#migrationsinitshadowdb \\\\"Direct link to migrationsinitshadowdb\\\\")\\\\n\\\\nThis option allows you to define SQL statements that Prisma runs on the **shadow database** before creating migrations. It is useful when working with [external managed tables](/docs/orm/prisma-schema/data-model/externally-managed-tables), as Prisma needs to know about the structure of these tables to correctly generate migrations.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `migrations.initShadowDb` | `string` | No | none |\\\\n\\\\n**Example:**\\\\n\\\\n```\\\\nimport { defineConfig } from \\\\"prisma/config\\\\";  \\\\n\\\\nexport default defineConfig({  \\\\n  experimental: {  \\\\n    externalTables: true,  \\\\n  },  \\\\n  tables: {  \\\\n    external: [\\\\"public.users\\\\"],  \\\\n  },  \\\\n  migrations: {  \\\\n    initShadowDb: `  \\\\n      CREATE TABLE public.users (id SERIAL PRIMARY KEY);  \\\\n    `,  \\\\n  },  \\\\n});  \\\\n\\\\n```\\\\n\\\\nLearn more about the [`externalTables` feature here](/docs/orm/prisma-schema/data-model/externally-managed-tables).\\\\n\\\\n### `views.path`[\\\\u200b](#viewspath \\\\"Direct link to viewspath\\\\")\\\\n\\\\nThe path to the directory where Prisma should look for the SQL view definitions.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `views.path` | `string` | No | none |\\\\n\\\\n### `typedSql.path`[\\\\u200b](#typedsqlpath \\\\"Direct link to typedsqlpath\\\\")\\\\n\\\\nThe path to the directory where Prisma should look for the SQL files used for generating typings via [`typedSql`](/docs/orm/prisma-client/using-raw-sql/typedsql).\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `typedSql.path` | `string` | No | none |\\\\n\\\\n### `experimental`[\\\\u200b](#experimental \\\\"Direct link to experimental\\\\")\\\\n\\\\nEnables specific experimental features in the Prisma CLI.\\\\n\\\\n| Property | Type | Required | Default |\\\\n| --- | --- | --- | --- |\\\\n| `adapter` | `boolean` | No | `false` |\\\\n| `externalTables` | `boolean` | No | `false` |\\\\n| `studio` | `boolean` | No | `false` |\\\\n\\\\nExample:\\\\n\\\\n```\\\\nimport { defineConfig } from \\\\"prisma/config\\\\";  \\\\n\\\\nexport default defineConfig({  \\\\n  experimental: {  \\\\n    adapter: true,  \\\\n    externalTables: true,  \\\\n    studio: true,  \\\\n  },  \\\\n  schema: \\\\"prisma/schema.prisma\\\\",  \\\\n});  \\\\n\\\\n```\\\\n\\\\nnote\\\\n\\\\nIf you use features like `adapter`, `studio` or `externalTables` without enabling the corresponding experimental flag, Prisma will throw an error:\\\\n\\\\n```\\\\nFailed to load config file \\\\"~\\\\" as a TypeScript/JavaScript module. Error: Error: The `studio` configuration requires `experimental.studio` to be set to `true`.  \\\\n\\\\n```\\\\n\\\\n## Common patterns[\\\\u200b](#common-patterns \\\\"Direct link to Common patterns\\\\")\\\\n\\\\n### Setting up your project[\\\\u200b](#setting-up-your-project \\\\"Direct link to Setting up your project\\\\")\\\\n\\\\nTo get started with Prisma Config, create a `prisma.config.ts` file in your project root. You can use either of these approaches:\\\\n\\\\nUsing `defineConfig`:\\\\n\\\\n```\\\\nimport { defineConfig } from \\\\"prisma/config\\\\";  \\\\n\\\\nexport default defineConfig({});  \\\\n\\\\n```\\\\n\\\\nUsing TypeScript types:\\\\n\\\\n```\\\\nimport type { PrismaConfig } from \\\\"prisma\\\\";  \\\\n\\\\nexport default {} satisfies PrismaConfig;  \\\\n\\\\n```\\\\n\\\\n### Using environment variables[\\\\u200b](#using-environment-variables \\\\"Direct link to Using environment variables\\\\")\\\\n\\\\nWhen using `prisma.config.ts`, environment variables from `.env` files are not automatically loaded. You\\\'ll need to:\\\\n\\\\n1. Install the `dotenv` package:\\\\n\\\\n```\\\\nnpm install dotenv  \\\\n\\\\n```\\\\n\\\\n2. Import `dotenv/config` in your config file:\\\\n\\\\n```\\\\nimport \\\\"dotenv/config\\\\";  \\\\nimport type { PrismaConfig } from \\\\"prisma\\\\";  \\\\n\\\\nexport default {  \\\\n  // now you can use process.env variables  \\\\n} satisfies PrismaConfig;  \\\\n\\\\n```\\\\n\\\\n### Using multi-file schemas[\\\\u200b](#using-multi-file-schemas \\\\"Direct link to Using multi-file schemas\\\\")\\\\n\\\\nIf you want to split your Prisma schema into multiple files, you need to specify the path to your Prisma schema folder via the `schema` property:\\\\n\\\\n```\\\\nimport path from \\\\"node:path\\\\";  \\\\nimport type { PrismaConfig } from \\\\"prisma\\\\";  \\\\n\\\\nexport default {  \\\\n  schema: path.join(\\\\"prisma\\\\", \\\\"schema\\\\"),  \\\\n} satisfies PrismaConfig;  \\\\n\\\\n```\\\\n\\\\nIn that case, your `migrations` directory must be located next to the `.prisma` file that defines the `datasource` block.\\\\n\\\\nFor example, assuming `schema.prisma` defines the `datasource`, here\\\'s how how need to place the migrations folder:\\\\n\\\\n```\\\\n# `migrations` and `schema.prisma` are on the same level  \\\\n.  \\\\n\\\\u251c\\\\u2500\\\\u2500 migrations  \\\\n\\\\u251c\\\\u2500\\\\u2500 models  \\\\n\\\\u2502   \\\\u251c\\\\u2500\\\\u2500 posts.prisma  \\\\n\\\\u2502   \\\\u2514\\\\u2500\\\\u2500 users.prisma  \\\\n\\\\u2514\\\\u2500\\\\u2500 schema.prisma  \\\\n\\\\n```\\\\n\\\\n## Path resolution[\\\\u200b](#path-resolution \\\\"Direct link to Path resolution\\\\")\\\\n\\\\nPrisma CLI commands such as `prisma validate` or `prisma migrate` use `prisma.config.ts` (or `.config/prisma.ts`) to locate your Prisma schema and other resources.\\\\n\\\\n**Key rules:**\\\\n\\\\n* Paths defined in the config file (e.g., `schema`, `migrations`) are always resolved **relative to the location of the config file**, not where you run the CLI command from.\\\\n* The CLI must first **find the config file** itself, which depends on how Prisma is installed and the package manager used.\\\\n\\\\n### Behavior with `pnpm prisma`[\\\\u200b](#behavior-with-pnpm-prisma \\\\"Direct link to behavior-with-pnpm-prisma\\\\")\\\\n\\\\nWhen Prisma is installed locally and run via `pnpm prisma`, the config file is detected automatically whether you run the command from the project root or a subdirectory.\\\\n\\\\nExample project tree:\\\\n\\\\n```\\\\n.  \\\\n\\\\u251c\\\\u2500\\\\u2500 node_modules  \\\\n\\\\u251c\\\\u2500\\\\u2500 package.json  \\\\n\\\\u251c\\\\u2500\\\\u2500 prisma-custom  \\\\n\\\\u2502   \\\\u2514\\\\u2500\\\\u2500 schema.prisma  \\\\n\\\\u251c\\\\u2500\\\\u2500 prisma.config.ts  \\\\n\\\\u2514\\\\u2500\\\\u2500 src  \\\\n\\\\n```\\\\n\\\\nExample run from the project root:\\\\n\\\\n```\\\\npnpm prisma validate  \\\\n# \\\\u2192 Loaded Prisma config from ./prisma.config.ts  \\\\n# \\\\u2192 Prisma schema loaded from prisma-custom/schema.prisma  \\\\n\\\\n```\\\\n\\\\nExample run from a subdirectory:\\\\n\\\\n```\\\\ncd src  \\\\npnpm prisma validate  \\\\n# \\\\u2192 Still finds prisma.config.ts and resolves schema correctly  \\\\n\\\\n```\\\\n\\\\n### Behavior with `npm exec prisma` or `bun prisma`[\\\\u200b](#behavior-with-npm-exec-prisma-or-bun-prisma \\\\"Direct link to behavior-with-npm-exec-prisma-or-bun-prisma\\\\")\\\\n\\\\nWhen running via `npm exec prisma` or `bun prisma`, the CLI only detects the config file if the command is run from the **project root** (where `package.json` declares Prisma).\\\\n\\\\nExample run from the project root:\\\\n\\\\n```\\\\nnpm exec prisma validate  \\\\n# \\\\u2192 Works as expected  \\\\n\\\\n```\\\\n\\\\nRun from a subdirectory (fails):\\\\n\\\\n```\\\\ncd src  \\\\nnpm exec prisma validate  \\\\n# \\\\u2192 Error: Could not find Prisma Schema...  \\\\n\\\\n```\\\\n\\\\nTo fix this, you can use the `--config` flag:\\\\n\\\\n```\\\\nnpm exec prisma -- --config ../prisma.config.ts validate  \\\\n\\\\n```\\\\n\\\\n### Global Prisma installations[\\\\u200b](#global-prisma-installations \\\\"Direct link to Global Prisma installations\\\\")\\\\n\\\\nIf Prisma is installed globally (`npm i -g prisma`), it may not find your `prisma.config.ts` or `prisma/config` module by default.\\\\nTo avoid issues:\\\\n\\\\n* Prefer local Prisma installations in your project.\\\\n* Or use `@prisma/config` locally and pass `--config` to point to your config file.\\\\n\\\\n### Monorepos[\\\\u200b](#monorepos \\\\"Direct link to Monorepos\\\\")\\\\n\\\\n* If Prisma is installed in the **workspace root**, `pnpm prisma` will detect the config file from subdirectories.\\\\n* If Prisma is installed in a **subpackage** (e.g., `./packages/db`), run commands from that package directory or deeper.\\\\n\\\\n### Custom config location[\\\\u200b](#custom-config-location \\\\"Direct link to Custom config location\\\\")\\\\n\\\\nYou can specify a custom location for your config file when running Prisma CLI commands:\\\\n\\\\n```\\\\nprisma validate --config ./path/to/myconfig.ts  \\\\n\\\\n```\\\\n\\\\nOpen in\\\\n\\\\nCopy as Markdown\\\\n\\\\n[Open in Claude](https://claude.ai/new?q=Read%20https://prisma.io/docs/orm/reference/prisma-config-reference%20so%20I%20can%20ask%20questions%20about%20it.)[Open in ChatGPT](https://chat.openai.com/?q=Read%20https://prisma.io/docs/orm/reference/prisma-config-reference%20so%20I%20can%20ask%20questions%20about%20it.)[Open in T3.chat](https://www.t3.chat/new?q=Read%20https://prisma.io/docs/orm/reference/prisma-config-reference%20so%20I%20can%20ask%20questions%20about%20it.)[Edit in GitHub](https://github.com/prisma/docs/tree/main/content/200-orm/500-reference/325-prisma-config-reference.mdx)\\\\n\\\\n* [Overview](#overview)\\\\n* [Configuration interface](#configuration-interface)\\\\n* [Supported file extensions](#supported-file-extensions)\\\\n* [Options reference](#options-reference)\\\\n  + [`schema`](#schema)\\\\n  + [`adapter`](#adapter)\\\\n  + [`studio`](#studio)\\\\n  + [`tables.external` and `enums.external`](#tablesexternal-and-enumsexternal)\\\\n  + [`migrations.path`](#migrationspath)\\\\n  + [`migrations.seed`](#migrationsseed)\\\\n  + [`migrations.initShadowDb`](#migrationsinitshadowdb)\\\\n  + [`views.path`](#viewspath)\\\\n  + [`typedSql.path`](#typedsqlpath)\\\\n  + [`experimental`](#experimental)\\\\n* [Common patterns](#common-patterns)\\\\n  + [Setting up your project](#setting-up-your-project)\\\\n  + [Using environment variables](#using-environment-variables)\\\\n  + [Using multi-file schemas](#using-multi-file-schemas)\\\\n* [Path resolution](#path-resolution)\\\\n  + [Behavior with `pnpm prisma`](#behavior-with-pnpm-prisma)\\\\n  + [Behavior with `npm exec prisma` or `bun prisma`](#behavior-with-npm-exec-prisma-or-bun-prisma)\\\\n  + [Global Prisma installations](#global-prisma-installations)\\\\n  + [Monorepos](#monorepos)\\\\n  + [Custom config location](#custom-config-location)\\\\n\\\\n[![Prisma logo](https://www.prisma.io/docs/img/logo-white.svg) ![Prisma logo](https://www.prisma.io/docs/img/logo-white.svg)](https://www.prisma.io/)\\\\n\\\\nProduct\\\\n\\\\n* [ORM](https://www.prisma.io/orm)\\\\n* [Studio](https://www.prisma.io/studio)\\\\n* [Optimize](https://www.prisma.io/optimize)\\\\n* [Accelerate](https://www.prisma.io/accelerate)\\\\n* [Postgres](https://www.prisma.io/postgres)\\\\n* [Pricing](https://www.prisma.io/pricing)\\\\n* [Changelog](https://www.prisma.io/changelog)\\\\n* [Data Platform status\\\\u00a0\\\\u2197](https://www.prisma-status.com/)\\\\n\\\\nResources\\\\n\\\\n* [Docs](/docs)\\\\n* [Ecosystem](https://www.prisma.io/ecosystem)\\\\n* [Playground\\\\u00a0\\\\u2197](https://playground.prisma.io/)\\\\n* [ORM Benchmarks\\\\u00a0\\\\u2197](https://benchmarks.prisma.io/)\\\\n* [Customer stories](https://www.prisma.io/showcase)\\\\n* [Data guide](https://www.prisma.io/dataguide)\\\\n\\\\nContact us\\\\n\\\\n* [Community](https://www.prisma.io/community)\\\\n* [Support](https://www.prisma.io/support)\\\\n* [Enterprise](https://www.prisma.io/enterprise)\\\\n* [Partners](https://www.prisma.io/partners)\\\\n* [OSS Friends](https://www.prisma.io/oss-friends)\\\\n\\\\nCompany\\\\n\\\\n* [About](https://www.prisma.io/about)\\\\n* [Blog](https://www.prisma.io/blog)\\\\n* [Data DX\\\\u00a0\\\\u2197](https://www.datadx.io/)\\\\n* [Careers](https://www.prisma.io/careers)\\\\n* [Security & Compliance](https://trust.prisma.io/)\\\\n\\\\n* Legal\\\\n\\\\n[Privacy Policy](https://pris.ly/privacy)[Terms of Service](https://pris.ly/terms)[Service Level Agreement](https://pris.ly/sla)[Event Code of Conduct](https://pris.ly/code-conduct)\\\\n\\\\n\\\\u00a9 2025 Prisma Data, Inc.\\\\n\\\\n[![gdpr](https://www.prisma.io/docs/img/icons/gdpr.svg)](https://trust.prisma.io/) [![hipaa](https://www.prisma.io/docs/img/icons/hipaa.svg)](https://trust.prisma.io/) [![iso27001](https://www.prisma.io/docs/img/icons/iso27.svg)](https://trust.prisma.io/) [![soc](https://www.prisma.io/docs/img/icons/soc2.svg)](https://trust.prisma.io/)\\\\n\\\\n",\\n    "metadata": {\\n      "content_elapsed": 152.0,\\n      "readability_elapsed": 186.0,\\n      "markdown_elapsed": 46.0,\\n      "text_elapsed": null,\\n      "summarize_elapsed": null,\\n      "cached": true\\n    },\\n    "published_date": "1759259015.119302"\\n  }\\n]\') </scrape-webpage> </tool_result>'}