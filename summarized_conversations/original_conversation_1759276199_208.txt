{'role': 'assistant', 'content': 'Great! Now let me create the test suite for Service 4:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/__tests__/services/InstanceProvisionerService.test.ts">\n/**\n * InstanceProvisionerService Test Suite\n * \n * Tests for ephemeral cloud instance provisioning and management\n */\n\nimport InstanceProvisionerService, {\n  CloudProvider,\n  InstanceType,\n  InstanceStatus,\n  ProvisionRequest\n} from \'@/lib/services/InstanceProvisionerService\';\nimport { PrismaClient } from \'@prisma/client\';\n\nconst prisma = new PrismaClient();\n\n// Mock user and task IDs\nconst TEST_USER_ID = \'test-user-instance-provisioner\';\nconst TEST_TASK_ID = \'test-task-instance-provisioner\';\n\ndescribe(\'InstanceProvisionerService\', () => {\n  let service: InstanceProvisionerService;\n\n  beforeAll(async () => {\n    service = InstanceProvisionerService.getInstance();\n    \n    // Create test user\n    await prisma.user.upsert({\n      where: { id: TEST_USER_ID },\n      update: {},\n      create: {\n        id: TEST_USER_ID,\n        email: \'instance-test@example.com\',\n        passwordHash: \'test-hash\'\n      }\n    });\n\n    // Create test task\n    await prisma.analysisTask.upsert({\n      where: { id: TEST_TASK_ID },\n      update: {},\n      create: {\n        id: TEST_TASK_ID,\n        userId: TEST_USER_ID,\n        type: \'DOCUMENT_ANALYSIS\',\n        priority: \'HIGH\',\n        status: \'PENDING\',\n        data: JSON.stringify({ test: true })\n      }\n    });\n  });\n\n  afterAll(async () => {\n    // Clean up test data\n    await prisma.cloudInstance.deleteMany({\n      where: { userId: TEST_USER_ID }\n    });\n    await prisma.analysisTask.deleteMany({\n      where: { id: TEST_TASK_ID }\n    });\n    await prisma.user.deleteMany({\n      where: { id: TEST_USER_ID }\n    });\n    \n    service.stopMonitoring();\n    await prisma.$disconnect();\n  });\n\n  describe(\'provisionInstance\', () => {\n    it(\'should provision an Azure instance successfully\', async () => {\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 100,\n          autoTerminateMinutes: 60,\n          tags: { environment: \'test\' }\n        },\n        purpose: \'Test AI Analysis\'\n      };\n\n      const instance = await service.provisionInstance(request);\n\n      expect(instance).toBeDefined();\n      expect(instance.id).toBeDefined();\n      expect(instance.provider).toBe(CloudProvider.AZURE);\n      expect(instance.instanceType).toBe(InstanceType.AZURE_NC6);\n      expect(instance.status).toBe(InstanceStatus.READY);\n      expect(instance.publicIp).toBeDefined();\n      expect(instance.privateIp).toBeDefined();\n      expect(instance.costPerHour).toBe(0.90);\n      expect(instance.totalCost).toBe(0);\n    }, 30000); // 30 second timeout for provisioning\n\n    it(\'should provision an AWS instance successfully\', async () => {\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AWS,\n          instanceType: InstanceType.AWS_G4DN_XLARGE,\n          region: \'us-east-1\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 30\n        },\n        purpose: \'Test GPU Processing\'\n      };\n\n      const instance = await service.provisionInstance(request);\n\n      expect(instance).toBeDefined();\n      expect(instance.provider).toBe(CloudProvider.AWS);\n      expect(instance.instanceType).toBe(InstanceType.AWS_G4DN_XLARGE);\n      expect(instance.status).toBe(InstanceStatus.READY);\n      expect(instance.costPerHour).toBe(0.526);\n    }, 30000);\n\n    it(\'should reject invalid configuration\', async () => {\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 10, // Too small\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test\'\n      };\n\n      await expect(service.provisionInstance(request)).rejects.toThrow(\n        \'Disk size must be at least 30GB\'\n      );\n    });\n\n    it(\'should reject auto-terminate time less than 5 minutes\', async () => {\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 2 // Too short\n        },\n        purpose: \'Test\'\n      };\n\n      await expect(service.provisionInstance(request)).rejects.toThrow(\n        \'Auto-terminate must be at least 5 minutes\'\n      );\n    });\n  });\n\n  describe(\'getInstance\', () => {\n    it(\'should retrieve instance details\', async () => {\n      // First provision an instance\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Retrieval\'\n      };\n\n      const provisioned = await service.provisionInstance(request);\n      \n      // Retrieve it\n      const retrieved = await service.getInstance(provisioned.id);\n\n      expect(retrieved).toBeDefined();\n      expect(retrieved?.id).toBe(provisioned.id);\n      expect(retrieved?.status).toBe(InstanceStatus.READY);\n    }, 30000);\n\n    it(\'should return null for non-existent instance\', async () => {\n      const instance = await service.getInstance(\'non-existent-id\');\n      expect(instance).toBeNull();\n    });\n  });\n\n  describe(\'terminateInstance\', () => {\n    it(\'should terminate an instance successfully\', async () => {\n      // Provision an instance\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AWS,\n          instanceType: InstanceType.AWS_G4DN_XLARGE,\n          region: \'us-east-1\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Termination\'\n      };\n\n      const instance = await service.provisionInstance(request);\n      \n      // Terminate it\n      await service.terminateInstance(instance.id);\n\n      // Verify termination\n      const terminated = await service.getInstance(instance.id);\n      expect(terminated?.status).toBe(InstanceStatus.TERMINATED);\n      expect(terminated?.terminatedAt).toBeDefined();\n      expect(terminated?.totalCost).toBeGreaterThan(0);\n    }, 30000);\n\n    it(\'should handle terminating already terminated instance\', async () => {\n      // Provision and terminate\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Double Termination\'\n      };\n\n      const instance = await service.provisionInstance(request);\n      await service.terminateInstance(instance.id);\n\n      // Try to terminate again - should not throw\n      await expect(service.terminateInstance(instance.id)).resolves.not.toThrow();\n    }, 30000);\n\n    it(\'should throw error for non-existent instance\', async () => {\n      await expect(service.terminateInstance(\'non-existent-id\')).rejects.toThrow(\n        \'Instance not found\'\n      );\n    });\n  });\n\n  describe(\'listInstances\', () => {\n    beforeEach(async () => {\n      // Clean up before each test\n      await prisma.cloudInstance.deleteMany({\n        where: { userId: TEST_USER_ID }\n      });\n    });\n\n    it(\'should list all instances for a user\', async () => {\n      // Provision multiple instances\n      const request1: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test List 1\'\n      };\n\n      const request2: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AWS,\n          instanceType: InstanceType.AWS_G4DN_XLARGE,\n          region: \'us-east-1\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test List 2\'\n      };\n\n      await service.provisionInstance(request1);\n      await service.provisionInstance(request2);\n\n      const instances = await service.listInstances(TEST_USER_ID);\n\n      expect(instances).toHaveLength(2);\n      expect(instances[0].status).toBe(InstanceStatus.READY);\n      expect(instances[1].status).toBe(InstanceStatus.READY);\n    }, 60000);\n\n    it(\'should filter instances by status\', async () => {\n      // Provision and terminate one instance\n      const request1: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Filter 1\'\n      };\n\n      const request2: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AWS,\n          instanceType: InstanceType.AWS_G4DN_XLARGE,\n          region: \'us-east-1\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Filter 2\'\n      };\n\n      const instance1 = await service.provisionInstance(request1);\n      await service.provisionInstance(request2);\n      \n      await service.terminateInstance(instance1.id);\n\n      // Filter by READY status\n      const readyInstances = await service.listInstances(TEST_USER_ID, InstanceStatus.READY);\n      expect(readyInstances).toHaveLength(1);\n      expect(readyInstances[0].status).toBe(InstanceStatus.READY);\n\n      // Filter by TERMINATED status\n      const terminatedInstances = await service.listInstances(TEST_USER_ID, InstanceStatus.TERMINATED);\n      expect(terminatedInstances).toHaveLength(1);\n      expect(terminatedInstances[0].status).toBe(InstanceStatus.TERMINATED);\n    }, 60000);\n  });\n\n  describe(\'getStatistics\', () => {\n    beforeEach(async () => {\n      // Clean up before each test\n      await prisma.cloudInstance.deleteMany({\n        where: { userId: TEST_USER_ID }\n      });\n    });\n\n    it(\'should calculate statistics correctly\', async () => {\n      // Provision and terminate some instances\n      const request1: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Stats 1\'\n      };\n\n      const request2: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AWS,\n          instanceType: InstanceType.AWS_G4DN_XLARGE,\n          region: \'us-east-1\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Stats 2\'\n      };\n\n      const instance1 = await service.provisionInstance(request1);\n      const instance2 = await service.provisionInstance(request2);\n      \n      await service.terminateInstance(instance1.id);\n\n      const stats = await service.getStatistics(TEST_USER_ID);\n\n      expect(stats.totalProvisioned).toBe(2);\n      expect(stats.currentlyRunning).toBe(1);\n      expect(stats.totalCost).toBeGreaterThan(0);\n      expect(stats.providerBreakdown[CloudProvider.AZURE]).toBe(1);\n      expect(stats.providerBreakdown[CloudProvider.AWS]).toBe(1);\n      expect(stats.instanceTypeBreakdown[InstanceType.AZURE_NC6]).toBe(1);\n      expect(stats.instanceTypeBreakdown[InstanceType.AWS_G4DN_XLARGE]).toBe(1);\n    }, 60000);\n\n    it(\'should return zero statistics for user with no instances\', async () => {\n      const stats = await service.getStatistics(\'non-existent-user\');\n\n      expect(stats.totalProvisioned).toBe(0);\n      expect(stats.currentlyRunning).toBe(0);\n      expect(stats.totalCost).toBe(0);\n      expect(stats.averageDuration).toBe(0);\n      expect(stats.averageCost).toBe(0);\n    });\n  });\n\n  describe(\'Cost Calculations\', () => {\n    it(\'should calculate costs correctly for Azure instances\', async () => {\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC12,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Cost Calculation\'\n      };\n\n      const instance = await service.provisionInstance(request);\n      \n      // Wait a bit to accumulate some cost\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      await service.terminateInstance(instance.id);\n\n      const terminated = await service.getInstance(instance.id);\n      \n      expect(terminated?.costPerHour).toBe(1.80); // Azure NC12 cost\n      expect(terminated?.totalCost).toBeGreaterThan(0);\n      expect(terminated?.totalCost).toBeLessThan(0.01); // Should be very small for 2 seconds\n    }, 30000);\n\n    it(\'should calculate costs correctly for AWS instances\', async () => {\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AWS,\n          instanceType: InstanceType.AWS_P3_2XLARGE,\n          region: \'us-east-1\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test AWS Cost\'\n      };\n\n      const instance = await service.provisionInstance(request);\n      \n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      await service.terminateInstance(instance.id);\n\n      const terminated = await service.getInstance(instance.id);\n      \n      expect(terminated?.costPerHour).toBe(3.06); // AWS P3.2xlarge cost\n      expect(terminated?.totalCost).toBeGreaterThan(0);\n    }, 30000);\n  });\n\n  describe(\'Event Emissions\', () => {\n    it(\'should emit events during instance lifecycle\', async () => {\n      const events: string[] = [];\n\n      service.on(\'instance:provisioning\', () => events.push(\'provisioning\'));\n      service.on(\'instance:provisioned\', () => events.push(\'provisioned\'));\n      service.on(\'instance:ready\', () => events.push(\'ready\'));\n      service.on(\'instance:stopping\', () => events.push(\'stopping\'));\n      service.on(\'instance:terminated\', () => events.push(\'terminated\'));\n\n      const request: ProvisionRequest = {\n        userId: TEST_USER_ID,\n        taskId: TEST_TASK_ID,\n        config: {\n          provider: CloudProvider.AZURE,\n          instanceType: InstanceType.AZURE_NC6,\n          region: \'eastus\',\n          diskSizeGB: 50,\n          autoTerminateMinutes: 60\n        },\n        purpose: \'Test Events\'\n      };\n\n      const instance = await service.provisionInstance(request);\n      await service.terminateInstance(instance.id);\n\n      expect(events).toContain(\'provisioning\');\n      expect(events).toContain(\'provisioned\');\n      expect(events).toContain(\'ready\');\n      expect(events).toContain(\'stopping\');\n      expect(events).toContain(\'terminated\');\n\n      // Clean up listeners\n      service.removeAllListeners();\n    }, 30000);\n  });\n});\n</create-file>\n</function_calls>'}