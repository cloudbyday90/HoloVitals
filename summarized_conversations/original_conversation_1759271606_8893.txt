{'role': 'assistant', 'content': '<function_calls>\n<str-replace file_path="medical-analysis-platform/lib/services/ContextOptimizerService.ts">\n    <old_str>  /**\n   * Compress individual segment\n   */\n  private compressSegment(content: string, strategy: OptimizationStrategy): string {\n    let compressed = content;\n\n    // Remove extra whitespace\n    compressed = compressed.replace(/\\s+/g, \' \').trim();\n\n    // Strategy-specific compression\n    switch (strategy) {\n      case OptimizationStrategy.AGGRESSIVE:\n        // Remove articles and common words more aggressively\n        compressed = this.removeStopWords(compressed, 0.8);\n        // Abbreviate common medical terms\n        compressed = this.abbreviateMedicalTerms(compressed);\n        break;\n\n      case OptimizationStrategy.BALANCED:\n        // Moderate stop word removal\n        compressed = this.removeStopWords(compressed, 0.5);\n        break;\n\n      case OptimizationStrategy.CONSERVATIVE:\n        // Light stop word removal\n        compressed = this.removeStopWords(compressed, 0.3);\n        break;\n\n      case OptimizationStrategy.MINIMAL:\n        // Only remove obvious redundancy\n        compressed = this.removeStopWords(compressed, 0.1);\n        break;\n    }\n\n    return compressed;\n  }</old_str>\n    <new_str>  /**\n   * Compress individual segment\n   */\n  private compressSegment(content: string, strategy: OptimizationStrategy): string {\n    let compressed = content;\n\n    // Remove extra whitespace\n    compressed = compressed.replace(/\\s+/g, \' \').trim();\n\n    // Strategy-specific compression\n    switch (strategy) {\n      case OptimizationStrategy.AGGRESSIVE:\n        // Remove articles and common words more aggressively\n        compressed = this.removeStopWords(compressed, 0.9);\n        // Abbreviate common medical terms\n        compressed = this.abbreviateMedicalTerms(compressed);\n        // Remove redundant phrases\n        compressed = this.removeRedundantPhrases(compressed);\n        break;\n\n      case OptimizationStrategy.BALANCED:\n        // Moderate stop word removal\n        compressed = this.removeStopWords(compressed, 0.6);\n        // Abbreviate some medical terms\n        compressed = this.abbreviateMedicalTerms(compressed);\n        break;\n\n      case OptimizationStrategy.CONSERVATIVE:\n        // Light stop word removal\n        compressed = this.removeStopWords(compressed, 0.4);\n        break;\n\n      case OptimizationStrategy.MINIMAL:\n        // Only remove obvious redundancy\n        compressed = this.removeStopWords(compressed, 0.15);\n        break;\n    }\n\n    return compressed;\n  }\n\n  /**\n   * Remove redundant phrases\n   */\n  private removeRedundantPhrases(content: string): string {\n    const redundantPhrases = [\n      /\\b(as mentioned|as stated|as noted|previously mentioned|previously stated)\\b/gi,\n      /\\b(it is important to note that|it should be noted that|please note that)\\b/gi,\n      /\\b(in addition to this|in addition to that|furthermore|moreover)\\b/gi,\n      /\\b(the patient has|the patient is|the patient was)\\b/gi,\n    ];\n\n    let cleaned = content;\n    for (const phrase of redundantPhrases) {\n      cleaned = cleaned.replace(phrase, \'\');\n    }\n\n    // Clean up extra spaces\n    cleaned = cleaned.replace(/\\s+/g, \' \').trim();\n    \n    return cleaned;\n  }</new_str>\n</str-replace>\n</function_calls>'}