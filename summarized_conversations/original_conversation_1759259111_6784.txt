{'role': 'assistant', 'content': 'Good! Now let me merge the existing schema with the new AI architecture tables. I\'ll create a comprehensive updated schema:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/prisma/schema-updated.prisma">\n// HoloVitals Complete Database Schema\n// Includes: Base platform + AI Architecture + All Repository Systems\n\ngenerator client {\n  provider = "prisma-client-js"\n}\n\ndatasource db {\n  provider = "postgresql"\n  url      = env("DATABASE_URL")\n}\n\n// ============================================================================\n// USER MANAGEMENT & AUTHENTICATION\n// ============================================================================\n\nmodel User {\n  id                    String    @id @default(uuid())\n  email                 String    @unique\n  passwordHash          String    @map("password_hash")\n  mfaEnabled            Boolean   @default(false) @map("mfa_enabled")\n  mfaSecret             String?   @map("mfa_secret")\n  mfaBackupCodes        String?   @map("mfa_backup_codes")\n  failedLoginAttempts   Int       @default(0) @map("failed_login_attempts")\n  lastFailedLogin       DateTime? @map("last_failed_login")\n  createdAt             DateTime  @default(now()) @map("created_at")\n  updatedAt             DateTime  @updatedAt @map("updated_at")\n  \n  patients              Patient[]\n  documents             Document[]\n  analysisSessions      AnalysisSession[]\n  sessions              UserSession[]\n  consentRequestsAsPatient ConsentGrant[] @relation("PatientConsents")\n  consentRequestsAsSpecialist ConsentGrant[] @relation("SpecialistConsents")\n  auditLogs             AuditLog[]\n  \n  // AI Architecture Relations\n  chatConversations     ChatConversation[]\n  analysisQueue         AnalysisQueue[]\n  chatbotCosts          ChatbotCost[]\n  analysisCosts         AnalysisCost[]\n  \n  @@map("users")\n}\n\nmodel Patient {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  firstName     String?   @map("first_name")\n  lastName      String?   @map("last_name")\n  dateOfBirth   DateTime? @map("date_of_birth")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  documents     Document[]\n  analysisSessions AnalysisSession[]\n  \n  @@map("patients")\n}\n\n// ============================================================================\n// DOCUMENT MANAGEMENT\n// ============================================================================\n\nmodel Document {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  patientId     String?   @map("patient_id")\n  filePath      String    @map("file_path")\n  fileName      String    @map("file_name")\n  fileSize      Int?      @map("file_size")\n  mimeType      String?   @map("mime_type")\n  documentType  String?   @map("document_type")\n  uploadDate    DateTime  @default(now()) @map("upload_date")\n  documentDate  DateTime? @map("document_date")\n  status        String    @default("pending")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  updatedAt     DateTime  @updatedAt @map("updated_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\n  ocrResults    OcrResult[]\n  extractedData ExtractedData[]\n  sourceLinks   DocumentLink[] @relation("SourceDocument")\n  targetLinks   DocumentLink[] @relation("TargetDocument")\n  embeddings    DocumentEmbedding[]\n  \n  @@map("documents")\n}\n\nmodel OcrResult {\n  id              String    @id @default(uuid())\n  documentId      String    @map("document_id")\n  rawText         String    @map("raw_text") @db.Text\n  confidenceScore Float?    @map("confidence_score")\n  processedAt     DateTime  @default(now()) @map("processed_at")\n  \n  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("ocr_results")\n}\n\nmodel ExtractedData {\n  id            String    @id @default(uuid())\n  documentId    String    @map("document_id")\n  dataType      String    @map("data_type")\n  fieldName     String    @map("field_name")\n  fieldValue    String    @map("field_value") @db.Text\n  unit          String?\n  referenceRange String?  @map("reference_range")\n  isAbnormal    Boolean?  @map("is_abnormal")\n  extractedAt   DateTime  @default(now()) @map("extracted_at")\n  \n  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("extracted_data")\n}\n\nmodel DocumentLink {\n  id                  String    @id @default(uuid())\n  sourceDocumentId    String    @map("source_document_id")\n  targetDocumentId    String    @map("target_document_id")\n  relationshipType    String    @map("relationship_type")\n  createdAt           DateTime  @default(now()) @map("created_at")\n  \n  sourceDocument      Document  @relation("SourceDocument", fields: [sourceDocumentId], references: [id], onDelete: Cascade)\n  targetDocument      Document  @relation("TargetDocument", fields: [targetDocumentId], references: [id], onDelete: Cascade)\n  \n  @@unique([sourceDocumentId, targetDocumentId])\n  @@map("document_links")\n}\n\nmodel DocumentEmbedding {\n  id            String    @id @default(uuid())\n  documentId    String    @map("document_id")\n  chunkIndex    Int       @map("chunk_index")\n  chunkText     String    @map("chunk_text") @db.Text\n  embedding     Float[]\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\n  \n  @@map("document_embeddings")\n}\n\n// ============================================================================\n// ANALYSIS SESSIONS (Legacy)\n// ============================================================================\n\nmodel AnalysisSession {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  patientId     String?   @map("patient_id")\n  sessionType   String    @map("session_type")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\n  interactions  AiInteraction[]\n  \n  @@map("analysis_sessions")\n}\n\nmodel AiInteraction {\n  id                String    @id @default(uuid())\n  sessionId         String    @map("session_id")\n  query             String    @db.Text\n  response          String?   @db.Text\n  contextDocuments  String[]  @map("context_documents")\n  createdAt         DateTime  @default(now()) @map("created_at")\n  \n  session           AnalysisSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\n  \n  @@map("ai_interactions")\n}\n\n// ============================================================================\n// CHATBOT CONVERSATIONS (New AI Architecture)\n// ============================================================================\n\nmodel ChatConversation {\n  id        String   @id @default(cuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  title     String?\n  startedAt DateTime @default(now())\n  lastMessageAt DateTime @default(now())\n  \n  messages  ChatMessage[]\n  \n  @@index([userId])\n  @@index([lastMessageAt])\n  @@map("chat_conversations")\n}\n\nmodel ChatMessage {\n  id             String   @id @default(cuid())\n  conversationId String\n  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n  \n  role           String\n  content        String   @db.Text\n  timestamp      DateTime @default(now())\n  \n  type           String   @default("quick")\n  confidence     Float?\n  \n  needsEscalation Boolean @default(false)\n  escalationReason String? @db.Text\n  escalatedToTaskId String?\n  \n  documentId     String?\n  analysisId     String?\n  \n  metadata       Json?\n  \n  @@index([conversationId])\n  @@index([timestamp])\n  @@map("chat_messages")\n}\n\n// ============================================================================\n// ANALYSIS QUEUE SYSTEM (New AI Architecture)\n// ============================================================================\n\nmodel AnalysisQueue {\n  id        String   @id @default(cuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  type      String\n  priority  Int      @default(3)\n  \n  prompt    String   @db.Text\n  documents Json\n  \n  totalTokens      Int\n  contextWindow    Int\n  needsSplitting   Boolean @default(false)\n  splitStrategy    String?\n  estimatedCost    Float\n  recommendedModel String\n  \n  status    String   @default("queued")\n  \n  createdAt   DateTime @default(now())\n  startedAt   DateTime?\n  completedAt DateTime?\n  \n  result    Json?\n  error     String?  @db.Text\n  \n  instanceId String?\n  instance   CloudInstance? @relation(fields: [instanceId], references: [id])\n  \n  actualCost Float?\n  \n  @@index([userId])\n  @@index([status])\n  @@index([priority, createdAt])\n  @@index([createdAt])\n  @@map("analysis_queue")\n}\n\n// ============================================================================\n// CLOUD INSTANCE TRACKING (New AI Architecture)\n// ============================================================================\n\nmodel CloudInstance {\n  id           String   @id @default(cuid())\n  \n  provider     String\n  region       String\n  instanceType String\n  instanceId   String   @unique\n  \n  model        String\n  \n  status       String   @default("provisioning")\n  \n  createdAt    DateTime @default(now())\n  readyAt      DateTime?\n  terminatedAt DateTime?\n  \n  costPerMinute Float\n  totalCost     Float   @default(0)\n  \n  tasks        AnalysisQueue[]\n  \n  metadata     Json?\n  \n  @@index([status])\n  @@index([createdAt])\n  @@index([provider, region])\n  @@map("cloud_instances")\n}\n\n// ============================================================================\n// COST TRACKING (New AI Architecture)\n// ============================================================================\n\nmodel InstanceCost {\n  id           String   @id @default(cuid())\n  \n  instanceId   String\n  provider     String\n  instanceType String\n  model        String\n  \n  createdAt    DateTime\n  terminatedAt DateTime\n  duration     Float\n  \n  costPerMinute Float\n  totalCost     Float\n  \n  tasksCompleted Int    @default(0)\n  tokensProcessed Int   @default(0)\n  \n  metadata     Json?\n  \n  @@index([createdAt])\n  @@index([provider])\n  @@index([model])\n  @@map("instance_costs")\n}\n\nmodel ChatbotCost {\n  id        String   @id @default(cuid())\n  \n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  messageId String\n  timestamp DateTime @default(now())\n  \n  inputTokens  Int\n  outputTokens Int\n  totalTokens  Int\n  \n  cost      Float\n  \n  model     String   @default("gpt-3.5-turbo")\n  \n  @@index([userId])\n  @@index([timestamp])\n  @@map("chatbot_costs")\n}\n\nmodel AnalysisCost {\n  id        String   @id @default(cuid())\n  \n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  taskId    String\n  timestamp DateTime @default(now())\n  \n  inputTokens  Int\n  outputTokens Int\n  totalTokens  Int\n  \n  modelCost      Float\n  infrastructureCost Float\n  totalCost      Float\n  \n  model        String\n  instanceType String?\n  \n  duration     Float\n  \n  @@index([userId])\n  @@index([timestamp])\n  @@map("analysis_costs")\n}\n\n// ============================================================================\n// CONTEXT OPTIMIZATION (New AI Architecture)\n// ============================================================================\n\nmodel PromptOptimization {\n  id        String   @id @default(cuid())\n  \n  originalPrompt String @db.Text\n  originalTokens Int\n  \n  optimizedPrompt String @db.Text\n  optimizedTokens Int\n  \n  strategy       String\n  tokenReduction Int\n  reductionPercent Float\n  \n  executionTime  Float?\n  successRate    Float?\n  \n  createdAt DateTime @default(now())\n  \n  metadata  Json?\n  \n  @@index([createdAt])\n  @@map("prompt_optimizations")\n}\n\nmodel PromptSplit {\n  id        String   @id @default(cuid())\n  \n  taskId    String\n  \n  splitId   String\n  content   String   @db.Text\n  tokens    Int\n  order     Int\n  \n  dependencies Json\n  \n  status    String   @default("pending")\n  \n  result    Json?\n  error     String?  @db.Text\n  \n  createdAt   DateTime @default(now())\n  completedAt DateTime?\n  \n  @@index([taskId])\n  @@index([order])\n  @@map("prompt_splits")\n}\n\n// ============================================================================\n// MODEL PERFORMANCE TRACKING (New AI Architecture)\n// ============================================================================\n\nmodel ModelPerformance {\n  id        String   @id @default(cuid())\n  \n  model     String\n  provider  String\n  \n  avgResponseTime Float\n  avgTokensPerSecond Float\n  successRate Float\n  errorRate   Float\n  \n  avgCostPerRequest Float\n  avgCostPerToken   Float\n  \n  totalRequests Int\n  totalTokens   Int\n  totalCost     Float\n  \n  periodStart DateTime\n  periodEnd   DateTime\n  \n  metadata    Json?\n  \n  @@index([model])\n  @@index([periodStart])\n  @@map("model_performance")\n}\n\n// ============================================================================\n// SYSTEM HEALTH MONITORING (New AI Architecture)\n// ============================================================================\n\nmodel SystemHealth {\n  id        String   @id @default(cuid())\n  \n  component String\n  \n  status    String\n  \n  responseTime Float?\n  errorRate    Float?\n  throughput   Float?\n  \n  cpuUsage    Float?\n  memoryUsage Float?\n  diskUsage   Float?\n  \n  timestamp DateTime @default(now())\n  \n  message   String?  @db.Text\n  metadata  Json?\n  \n  @@index([component])\n  @@index([timestamp])\n  @@index([status])\n  @@map("system_health")\n}\n\n// ============================================================================\n// AUTHENTICATION & SESSIONS\n// ============================================================================\n\nmodel UserSession {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  expiresAt     DateTime  @map("expires_at")\n  ipAddress     String?   @map("ip_address")\n  userAgent     String?   @map("user_agent")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  @@map("user_sessions")\n  @@index([userId])\n  @@index([expiresAt])\n}\n\n// ============================================================================\n// CONSENT MANAGEMENT\n// ============================================================================\n\nmodel ConsentGrant {\n  id                      String    @id @default(uuid())\n  patientId               String    @map("patient_id")\n  specialistId            String    @map("specialist_id")\n  permissions             String    @db.Text\n  reason                  String    @db.Text\n  requestedDuration       Int       @map("requested_duration")\n  urgency                 String\n  status                  String\n  restrictions            String?   @db.Text\n  grantedAt               DateTime? @map("granted_at")\n  expiresAt               DateTime  @map("expires_at")\n  revokedAt               DateTime? @map("revoked_at")\n  revocationReason        String?   @map("revocation_reason") @db.Text\n  denialReason            String?   @map("denial_reason") @db.Text\n  lastAccessed            DateTime? @map("last_accessed")\n  accessCount             Int       @default(0) @map("access_count")\n  expirationWarningSent   Boolean   @default(false) @map("expiration_warning_sent")\n  createdAt               DateTime  @default(now()) @map("created_at")\n  updatedAt               DateTime  @updatedAt @map("updated_at")\n  \n  patient                 User      @relation("PatientConsents", fields: [patientId], references: [id], onDelete: Cascade)\n  specialist              User      @relation("SpecialistConsents", fields: [specialistId], references: [id], onDelete: Cascade)\n  accessLogs              AccessLog[]\n  \n  @@map("consent_grants")\n  @@index([patientId])\n  @@index([specialistId])\n  @@index([status])\n  @@index([expiresAt])\n}\n\nmodel AccessLog {\n  id            String    @id @default(uuid())\n  consentId     String    @map("consent_id")\n  specialistId  String    @map("specialist_id")\n  action        String\n  resource      String\n  ipAddress     String?   @map("ip_address")\n  userAgent     String?   @map("user_agent")\n  details       String?   @db.Text\n  timestamp     DateTime  @default(now())\n  success       Boolean   @default(true)\n  \n  consent       ConsentGrant @relation(fields: [consentId], references: [id], onDelete: Cascade)\n  \n  @@map("access_logs")\n  @@index([consentId])\n  @@index([specialistId])\n  @@index([timestamp])\n}\n\n// ============================================================================\n// AUDIT & COMPLIANCE\n// ============================================================================\n\nmodel AuditLog {\n  id              String    @id @default(uuid())\n  userId          String    @map("user_id")\n  action          String\n  resource        String\n  resourceId      String    @map("resource_id")\n  details         String?   @db.Text\n  ipAddress       String?   @map("ip_address")\n  userAgent       String?   @map("user_agent")\n  sessionId       String?   @map("session_id")\n  severity        String\n  requiresReview  Boolean   @default(false) @map("requires_review")\n  reviewed        Boolean   @default(false)\n  reviewedBy      String?   @map("reviewed_by")\n  reviewedAt      DateTime? @map("reviewed_at")\n  reviewNotes     String?   @map("review_notes") @db.Text\n  consentId       String?   @map("consent_id")\n  timestamp       DateTime  @default(now())\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  @@map("audit_logs")\n  @@index([userId])\n  @@index([action])\n  @@index([resource])\n  @@index([timestamp])\n  @@index([severity])\n  @@index([requiresReview])\n}\n\n// ============================================================================\n// NOTIFICATIONS & ALERTS\n// ============================================================================\n\nmodel Notification {\n  id              String    @id @default(uuid())\n  patientId       String    @map("patient_id")\n  type            String\n  message         String    @db.Text\n  requiresAction  Boolean   @default(false) @map("requires_action")\n  read            Boolean   @default(false)\n  readAt          DateTime? @map("read_at")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  @@map("notifications")\n  @@index([patientId])\n  @@index([read])\n  @@index([createdAt])\n}\n\nmodel SecurityAlert {\n  id            String    @id @default(uuid())\n  userId        String    @map("user_id")\n  action        String\n  details       String    @db.Text\n  severity      String    @default("high")\n  acknowledged  Boolean   @default(false)\n  acknowledgedBy String?  @map("acknowledged_by")\n  acknowledgedAt DateTime? @map("acknowledged_at")\n  createdAt     DateTime  @default(now()) @map("created_at")\n  \n  @@map("security_alerts")\n  @@index([userId])\n  @@index([acknowledged])\n  @@index([createdAt])\n}\n\n// ============================================================================\n// PATIENT REPOSITORY (Sandboxed per patient)\n// ============================================================================\n\nmodel PatientRepository {\n  id                      String    @id @default(uuid())\n  userId                  String    @unique @map("user_id")\n  primaryIdentityHash     String    @unique @map("primary_identity_hash")\n  secondaryIdentityHash   String    @map("secondary_identity_hash")\n  compositeIdentityHash   String    @unique @map("composite_identity_hash")\n  encryptedPersonalInfo   String    @map("encrypted_personal_info") @db.Text\n  hasMothersMaidenName    Boolean   @default(false) @map("has_mothers_maiden_name")\n  hasPreviousAddress      Boolean   @default(false) @map("has_previous_address")\n  createdAt               DateTime  @default(now()) @map("created_at")\n  updatedAt               DateTime  @updatedAt @map("updated_at")\n  lastAccessedAt          DateTime? @map("last_accessed_at")\n  version                 Int       @default(1)\n  \n  diagnoses               PatientDiagnosis[]\n  medications             PatientMedication[]\n  allergies               PatientAllergy[]\n  vitalSigns              PatientVitalSign[]\n  procedures              PatientProcedure[]\n  immunizations           PatientImmunization[]\n  familyHistory           PatientFamilyHistory[]\n  \n  @@map("patient_repositories")\n  @@index([userId])\n  @@index([compositeIdentityHash])\n}\n\nmodel PatientDiagnosis {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  condition       String\n  icd10Code       String?   @map("icd10_code")\n  diagnosedDate   DateTime  @map("diagnosed_date")\n  status          String\n  severity        String?\n  notes           String?   @db.Text\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_diagnoses")\n  @@index([repositoryId])\n  @@index([diagnosedDate])\n}\n\nmodel PatientMedication {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  name            String\n  dosage          String\n  frequency       String\n  startDate       DateTime  @map("start_date")\n  endDate         DateTime? @map("end_date")\n  prescribedBy    String?   @map("prescribed_by")\n  purpose         String?   @db.Text\n  status          String\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_medications")\n  @@index([repositoryId])\n  @@index([status])\n}\n\nmodel PatientAllergy {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  allergen        String\n  type            String\n  reaction        String\n  severity        String\n  diagnosedDate   DateTime? @map("diagnosed_date")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_allergies")\n  @@index([repositoryId])\n}\n\nmodel PatientVitalSign {\n  id                      String    @id @default(uuid())\n  repositoryId            String    @map("repository_id")\n  date                    DateTime\n  bloodPressureSystolic   Int?      @map("blood_pressure_systolic")\n  bloodPressureDiastolic  Int?      @map("blood_pressure_diastolic")\n  heartRate               Int?      @map("heart_rate")\n  temperature             Float?\n  weight                  Float?\n  height                  Float?\n  bmi                     Float?\n  oxygenSaturation        Int?      @map("oxygen_saturation")\n  createdAt               DateTime  @default(now()) @map("created_at")\n  \n  repository              PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_vital_signs")\n  @@index([repositoryId])\n  @@index([date])\n}\n\nmodel PatientProcedure {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  name            String\n  date            DateTime\n  performedBy     String?   @map("performed_by")\n  location        String?\n  notes           String?   @db.Text\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_procedures")\n  @@index([repositoryId])\n  @@index([date])\n}\n\nmodel PatientImmunization {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  vaccine         String\n  date            DateTime\n  doseNumber      Int?      @map("dose_number")\n  administeredBy  String?   @map("administered_by")\n  lotNumber       String?   @map("lot_number")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_immunizations")\n  @@index([repositoryId])\n  @@index([date])\n}\n\nmodel PatientFamilyHistory {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  relationship    String\n  condition       String\n  ageAtDiagnosis  Int?      @map("age_at_diagnosis")\n  notes           String?   @db.Text\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\n  \n  @@map("patient_family_history")\n  @@index([repositoryId])\n}\n\nmodel IdentityChallenge {\n  id              String    @id @default(uuid())\n  repositoryId    String    @map("repository_id")\n  questions       String    @db.Text\n  expiresAt       DateTime  @map("expires_at")\n  createdAt       DateTime  @default(now()) @map("created_at")\n  \n  @@map("identity_challenges")\n  @@index([repositoryId])\n  @@index([expiresAt])\n}\n</create-file>\n</function_calls>'}