{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/docs/ERROR_HANDLING.md">\n# Error Handling System Documentation\n\n## Overview\n\nHoloVitals implements a comprehensive error handling system that provides:\n- **Structured error classes** for different error types\n- **Centralized error logging** with severity levels\n- **User-friendly error pages** for different scenarios\n- **Toast notifications** for inline error feedback\n- **Error boundaries** for React component errors\n- **API error handling** with proper HTTP status codes\n- **Retry mechanisms** with exponential backoff\n- **HIPAA-compliant error logging** (no PHI in logs)\n\n---\n\n## Architecture\n\n### Error Flow\n\n```\nError Occurs\n    ↓\nError Boundary / API Handler Catches\n    ↓\nError Logger Records (Database + Console)\n    ↓\nUser Notification (Toast / Error Page)\n    ↓\n[If Critical] → Alert System\n```\n\n---\n\n## Components\n\n### 1. Custom Error Classes (`lib/errors/AppError.ts`)\n\n#### Base Error Class\n\n```typescript\nexport class AppError extends Error {\n  statusCode: number;\n  isOperational: boolean;\n  code?: string;\n  details?: any;\n  timestamp: Date;\n}\n```\n\n#### Error Categories\n\n**Authentication & Authorization:**\n- `AuthenticationError` (401)\n- `AuthorizationError` (403)\n- `TokenExpiredError` (401)\n- `InvalidTokenError` (401)\n\n**Validation:**\n- `ValidationError` (400)\n- `InvalidInputError` (400)\n- `MissingFieldError` (400)\n\n**Resources:**\n- `NotFoundError` (404)\n- `ResourceExistsError` (409)\n- `ResourceLockedError` (423)\n\n**Database:**\n- `DatabaseError` (500)\n- `DatabaseConnectionError` (503)\n- `TransactionError` (500)\n\n**External Services:**\n- `ExternalServiceError` (502)\n- `AIServiceError` (502)\n- `CloudProviderError` (502)\n\n**Rate Limiting:**\n- `RateLimitError` (429)\n- `QuotaExceededError` (429)\n\n**File Operations:**\n- `FileUploadError` (400)\n- `FileSizeError` (413)\n- `FileTypeError` (415)\n\n**Business Logic:**\n- `BusinessLogicError` (422)\n- `InsufficientFundsError` (402)\n- `ConsentRequiredError` (403)\n\n**HIPAA Compliance:**\n- `HIPAAViolationError` (403)\n- `PHIAccessError` (403)\n\n**System:**\n- `SystemError` (500)\n- `ConfigurationError` (500)\n- `ServiceUnavailableError` (503)\n\n### 2. Error Logger (`lib/errors/ErrorLogger.ts`)\n\n#### Severity Levels\n\n```typescript\nenum ErrorSeverity {\n  LOW = \'LOW\',           // Minor issues (rate limits, validation)\n  MEDIUM = \'MEDIUM\',     // Expected errors (not found, conflicts)\n  HIGH = \'HIGH\',         // Security issues (auth failures, HIPAA)\n  CRITICAL = \'CRITICAL\', // System failures (database, services)\n}\n```\n\n#### Features\n\n- **Database logging**: All errors stored in `error_logs` table\n- **Console logging**: Color-coded by severity\n- **Critical alerts**: Automatic notifications for critical errors\n- **Statistics**: Error counts by severity, code, endpoint\n- **Cleanup**: Automatic removal of old low/medium severity logs\n\n#### Usage\n\n```typescript\nimport { errorLogger } from \'@/lib/errors/ErrorLogger\';\n\nawait errorLogger.logError(error, {\n  userId: \'user-123\',\n  endpoint: \'/api/documents\',\n  method: \'POST\',\n  ipAddress: \'192.168.1.1\',\n  userAgent: \'Mozilla/5.0...\',\n});\n```\n\n### 3. Error Handler (`lib/errors/errorHandler.ts`)\n\n#### Global Error Handler\n\n```typescript\nimport { handleError } from \'@/lib/errors/errorHandler\';\n\nexport async function POST(req: NextRequest) {\n  try {\n    // Your logic\n  } catch (error) {\n    return handleError(error as Error, req);\n  }\n}\n```\n\n#### Error Handler Wrapper\n\n```typescript\nimport { withErrorHandler } from \'@/lib/errors/errorHandler\';\n\nexport const POST = withErrorHandler(async (req: NextRequest) => {\n  // Your logic - errors automatically handled\n  return NextResponse.json({ success: true });\n});\n```\n\n#### Features\n\n- **Automatic error logging**\n- **Proper HTTP status codes**\n- **User-friendly error messages**\n- **Request ID tracking**\n- **Prisma error handling**\n- **Development vs production modes**\n\n### 4. Error Boundaries (`components/ErrorBoundary.tsx`)\n\n#### Page-Level Error Boundary\n\n```tsx\nimport { PageErrorBoundary } from \'@/components/ErrorBoundary\';\n\nexport default function MyPage() {\n  return (\n    <PageErrorBoundary>\n      <YourContent />\n    </PageErrorBoundary>\n  );\n}\n```\n\n#### Component-Level Error Boundary\n\n```tsx\nimport { ComponentErrorBoundary } from \'@/components/ErrorBoundary\';\n\n<ComponentErrorBoundary>\n  <RiskyComponent />\n</ComponentErrorBoundary>\n```\n\n#### Silent Error Boundary\n\n```tsx\nimport { SilentErrorBoundary } from \'@/components/ErrorBoundary\';\n\n<SilentErrorBoundary>\n  <NonCriticalComponent />\n</SilentErrorBoundary>\n```\n\n### 5. Error Pages\n\n#### Global Error Page (`app/error.tsx`)\n\nCatches errors in any page component.\n\n#### Global Error Handler (`app/global-error.tsx`)\n\nCatches errors in the root layout.\n\n#### 404 Not Found (`app/not-found.tsx`)\n\nDisplayed when a route doesn\'t exist.\n\n### 6. Toast Notifications (`components/ui/toast.tsx`)\n\n#### Usage\n\n```typescript\nimport { success, error, warning, info } from \'@/hooks/useToast\';\n\n// Success\nsuccess(\'Document uploaded\', \'Your document has been processed\');\n\n// Error\nerror(\'Upload failed\', \'File size exceeds limit\');\n\n// Warning\nwarning(\'Session expiring\', \'Please save your work\');\n\n// Info\ninfo(\'New feature\', \'Check out our new AI chat\');\n```\n\n#### Variants\n\n- **Success**: Green with checkmark icon\n- **Error**: Red with alert icon\n- **Warning**: Yellow with warning icon\n- **Info**: Blue with info icon\n\n---\n\n## Usage Examples\n\n### API Route Error Handling\n\n```typescript\n// app/api/documents/route.ts\nimport { withErrorHandler } from \'@/lib/errors/errorHandler\';\nimport { NotFoundError, ValidationError } from \'@/lib/errors/AppError\';\n\nexport const GET = withErrorHandler(async (req: NextRequest) => {\n  const { searchParams } = new URL(req.url);\n  const id = searchParams.get(\'id\');\n\n  if (!id) {\n    throw new ValidationError(\'Document ID is required\');\n  }\n\n  const document = await prisma.document.findUnique({\n    where: { id },\n  });\n\n  if (!document) {\n    throw new NotFoundError(\'Document\');\n  }\n\n  return NextResponse.json(document);\n});\n```\n\n### Client-Side Error Handling\n\n```typescript\n// Using error utilities\nimport { handleApiError, retryWithBackoff } from \'@/lib/utils/errorUtils\';\n\nasync function uploadDocument(file: File) {\n  try {\n    const response = await retryWithBackoff(\n      async () => {\n        const formData = new FormData();\n        formData.append(\'file\', file);\n        \n        const res = await fetch(\'/api/documents\', {\n          method: \'POST\',\n          body: formData,\n        });\n\n        if (!res.ok) {\n          throw await parseErrorResponse(res);\n        }\n\n        return res.json();\n      },\n      3, // max retries\n      1000 // base delay\n    );\n\n    success(\'Upload successful\', \'Your document has been uploaded\');\n    return response;\n  } catch (error) {\n    handleApiError(error);\n    return null;\n  }\n}\n```\n\n### Form Validation Errors\n\n```typescript\nimport { ValidationError, extractFieldErrors } from \'@/lib/errors/AppError\';\n\ntry {\n  const response = await fetch(\'/api/users\', {\n    method: \'POST\',\n    body: JSON.stringify(formData),\n  });\n\n  if (!response.ok) {\n    const error = await parseErrorResponse(response);\n    \n    if (error.code === \'VALIDATION_ERROR\') {\n      const fieldErrors = extractFieldErrors(error);\n      setErrors(fieldErrors); // Update form errors\n    } else {\n      throw error;\n    }\n  }\n} catch (error) {\n  handleApiError(error);\n}\n```\n\n### Service-Level Error Handling\n\n```typescript\n// lib/services/DocumentService.ts\nimport { DatabaseError, NotFoundError } from \'@/lib/errors/AppError\';\n\nexport class DocumentService {\n  async getDocument(id: string) {\n    try {\n      const document = await prisma.document.findUnique({\n        where: { id },\n      });\n\n      if (!document) {\n        throw new NotFoundError(\'Document\', { id });\n      }\n\n      return document;\n    } catch (error) {\n      if (error instanceof Prisma.PrismaClientKnownRequestError) {\n        throw new DatabaseError(\'Failed to fetch document\', {\n          prismaCode: error.code,\n          id,\n        });\n      }\n      throw error;\n    }\n  }\n}\n```\n\n---\n\n## Error Response Format\n\n### Success Response\n\n```json\n{\n  "data": { ... },\n  "success": true\n}\n```\n\n### Error Response\n\n```json\n{\n  "error": {\n    "message": "Document not found",\n    "code": "NOT_FOUND",\n    "statusCode": 404,\n    "details": {\n      "id": "doc-123"\n    },\n    "timestamp": "2025-01-30T12:34:56.789Z",\n    "requestId": "req_1234567890_abc123"\n  }\n}\n```\n\n---\n\n## Database Schema\n\n### ErrorLog Table\n\n```prisma\nmodel ErrorLog {\n  id          String   @id @default(uuid())\n  severity    String   // LOW, MEDIUM, HIGH, CRITICAL\n  message     String   @db.Text\n  code        String?\n  statusCode  Int?\n  stack       String?  @db.Text\n  details     String?  @db.Text\n  userId      String?\n  requestId   String?\n  endpoint    String?\n  method      String?\n  userAgent   String?\n  ipAddress   String?\n  timestamp   DateTime @default(now())\n\n  @@index([userId])\n  @@index([timestamp])\n  @@index([severity])\n  @@index([code])\n  @@index([endpoint])\n}\n```\n\n### Notification Table\n\n```prisma\nmodel Notification {\n  id        String   @id @default(uuid())\n  type      String\n  title     String\n  message   String   @db.Text\n  severity  String\n  metadata  String?  @db.Text\n  read      Boolean  @default(false)\n  userId    String?\n  createdAt DateTime @default(now())\n\n  @@index([userId])\n  @@index([createdAt])\n  @@index([read])\n}\n```\n\n---\n\n## Best Practices\n\n### 1. Use Appropriate Error Classes\n\n```typescript\n// ✅ Good\nthrow new NotFoundError(\'Document\', { id });\n\n// ❌ Bad\nthrow new Error(\'Document not found\');\n```\n\n### 2. Include Context in Errors\n\n```typescript\n// ✅ Good\nthrow new ValidationError(\'Invalid email format\', {\n  field: \'email\',\n  value: email,\n  pattern: EMAIL_REGEX,\n});\n\n// ❌ Bad\nthrow new ValidationError(\'Invalid email\');\n```\n\n### 3. Handle Errors at Appropriate Level\n\n```typescript\n// ✅ Good - Handle at API level\nexport const POST = withErrorHandler(async (req) => {\n  const result = await service.createDocument(data);\n  return NextResponse.json(result);\n});\n\n// ❌ Bad - Swallow errors\ntry {\n  await service.createDocument(data);\n} catch (error) {\n  console.log(error); // Don\'t just log and ignore\n}\n```\n\n### 4. Provide User-Friendly Messages\n\n```typescript\n// ✅ Good\nthrow new FileUploadError(\n  \'File size exceeds the 10MB limit. Please compress your file and try again.\',\n  { maxSize: 10, actualSize: 15 }\n);\n\n// ❌ Bad\nthrow new Error(\'File too big\');\n```\n\n### 5. Log Errors Properly\n\n```typescript\n// ✅ Good\nawait errorLogger.logError(error, {\n  userId: user.id,\n  endpoint: req.url,\n  method: req.method,\n});\n\n// ❌ Bad\nconsole.error(error); // Only console, no persistence\n```\n\n### 6. Don\'t Expose Sensitive Information\n\n```typescript\n// ✅ Good\nif (process.env.NODE_ENV === \'development\') {\n  return { error: error.stack };\n} else {\n  return { error: \'An error occurred\' };\n}\n\n// ❌ Bad\nreturn { error: error.stack }; // Always exposing stack trace\n```\n\n---\n\n## Error Monitoring\n\n### View Recent Errors\n\n```typescript\nimport { errorLogger } from \'@/lib/errors/ErrorLogger\';\n\n// Get recent errors\nconst errors = await errorLogger.getRecentErrors(100);\n\n// Get critical errors only\nconst criticalErrors = await errorLogger.getRecentErrors(50, ErrorSeverity.CRITICAL);\n```\n\n### Error Statistics\n\n```typescript\n// Get error stats for last 24 hours\nconst stats = await errorLogger.getErrorStats(24);\n\nconsole.log(stats);\n// {\n//   total: 150,\n//   bySeverity: {\n//     LOW: 80,\n//     MEDIUM: 50,\n//     HIGH: 15,\n//     CRITICAL: 5\n//   },\n//   byCode: {\n//     \'NOT_FOUND\': 40,\n//     \'VALIDATION_ERROR\': 30,\n//     \'AUTH_ERROR\': 20\n//   },\n//   byEndpoint: {\n//     \'/api/documents\': 60,\n//     \'/api/users\': 40\n//   }\n// }\n```\n\n### Cleanup Old Logs\n\n```typescript\n// Clean up logs older than 90 days (keep only HIGH and CRITICAL)\nconst deleted = await errorLogger.cleanupOldLogs(90);\nconsole.log(`Cleaned up ${deleted} old error logs`);\n```\n\n---\n\n## Testing Error Handling\n\n### Unit Tests\n\n```typescript\nimport { NotFoundError, ValidationError } from \'@/lib/errors/AppError\';\n\ndescribe(\'Error Handling\', () => {\n  it(\'should throw NotFoundError with correct status code\', () => {\n    const error = new NotFoundError(\'Document\');\n    expect(error.statusCode).toBe(404);\n    expect(error.code).toBe(\'NOT_FOUND\');\n  });\n\n  it(\'should include details in error\', () => {\n    const error = new ValidationError(\'Invalid input\', {\n      field: \'email\',\n      value: \'invalid\',\n    });\n    expect(error.details.field).toBe(\'email\');\n  });\n});\n```\n\n### Integration Tests\n\n```typescript\ndescribe(\'API Error Handling\', () => {\n  it(\'should return 404 for non-existent document\', async () => {\n    const response = await fetch(\'/api/documents/non-existent-id\');\n    expect(response.status).toBe(404);\n    \n    const data = await response.json();\n    expect(data.error.code).toBe(\'NOT_FOUND\');\n  });\n\n  it(\'should return 400 for validation errors\', async () => {\n    const response = await fetch(\'/api/documents\', {\n      method: \'POST\',\n      body: JSON.stringify({ /* invalid data */ }),\n    });\n    expect(response.status).toBe(400);\n    \n    const data = await response.json();\n    expect(data.error.code).toBe(\'VALIDATION_ERROR\');\n  });\n});\n```\n\n---\n\n## Troubleshooting\n\n### Error Not Being Logged\n\n**Check:**\n1. Database connection is working\n2. ErrorLog table exists\n3. Error logger is imported correctly\n4. Error is being thrown (not just logged to console)\n\n### Toast Not Showing\n\n**Check:**\n1. Toaster component is included in layout\n2. Toast hook is being called correctly\n3. No CSS conflicts hiding the toast\n4. Browser console for errors\n\n### Error Boundary Not Catching\n\n**Check:**\n1. Error is thrown during render (not in event handler)\n2. Error boundary is wrapping the component\n3. Component is client-side (\'use client\')\n4. No other error boundary catching it first\n\n---\n\n## Summary\n\nThe error handling system provides:\n- ✅ **Structured error classes** for all error types\n- ✅ **Centralized logging** with severity levels\n- ✅ **User-friendly UI** for errors\n- ✅ **Toast notifications** for inline feedback\n- ✅ **Error boundaries** for React errors\n- ✅ **API error handling** with proper status codes\n- ✅ **Retry mechanisms** for transient failures\n- ✅ **HIPAA compliance** (no PHI in logs)\n- ✅ **Monitoring & statistics** for error tracking\n- ✅ **Production-ready** with proper error messages\n\nThis comprehensive system ensures robust error handling across the entire HoloVitals platform.\n</create-file>\n</function_calls>'}