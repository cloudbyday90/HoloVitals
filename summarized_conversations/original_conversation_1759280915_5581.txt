{'role': 'assistant', 'content': '# Implementing Comprehensive Error Handling for HoloVitals\n\nLet me create a robust error handling system for the HoloVitals platform. I\'ll implement error boundaries, custom error classes, error logging, and user-friendly error pages.\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/lib/errors/AppError.ts">\n/**\n * Custom Application Error Classes\n * Provides structured error handling across the application\n */\n\n// ============================================================================\n// BASE ERROR CLASS\n// ============================================================================\n\nexport class AppError extends Error {\n  public readonly statusCode: number;\n  public readonly isOperational: boolean;\n  public readonly code?: string;\n  public readonly details?: any;\n  public readonly timestamp: Date;\n\n  constructor(\n    message: string,\n    statusCode: number = 500,\n    isOperational: boolean = true,\n    code?: string,\n    details?: any\n  ) {\n    super(message);\n    \n    this.statusCode = statusCode;\n    this.isOperational = isOperational;\n    this.code = code;\n    this.details = details;\n    this.timestamp = new Date();\n\n    // Maintains proper stack trace for where our error was thrown\n    Error.captureStackTrace(this, this.constructor);\n    \n    // Set the prototype explicitly\n    Object.setPrototypeOf(this, AppError.prototype);\n  }\n\n  toJSON() {\n    return {\n      message: this.message,\n      statusCode: this.statusCode,\n      code: this.code,\n      details: this.details,\n      timestamp: this.timestamp.toISOString(),\n    };\n  }\n}\n\n// ============================================================================\n// AUTHENTICATION & AUTHORIZATION ERRORS\n// ============================================================================\n\nexport class AuthenticationError extends AppError {\n  constructor(message: string = \'Authentication failed\', details?: any) {\n    super(message, 401, true, \'AUTH_ERROR\', details);\n    Object.setPrototypeOf(this, AuthenticationError.prototype);\n  }\n}\n\nexport class AuthorizationError extends AppError {\n  constructor(message: string = \'Access denied\', details?: any) {\n    super(message, 403, true, \'AUTHORIZATION_ERROR\', details);\n    Object.setPrototypeOf(this, AuthorizationError.prototype);\n  }\n}\n\nexport class TokenExpiredError extends AppError {\n  constructor(message: string = \'Token has expired\', details?: any) {\n    super(message, 401, true, \'TOKEN_EXPIRED\', details);\n    Object.setPrototypeOf(this, TokenExpiredError.prototype);\n  }\n}\n\nexport class InvalidTokenError extends AppError {\n  constructor(message: string = \'Invalid token\', details?: any) {\n    super(message, 401, true, \'INVALID_TOKEN\', details);\n    Object.setPrototypeOf(this, InvalidTokenError.prototype);\n  }\n}\n\n// ============================================================================\n// VALIDATION ERRORS\n// ============================================================================\n\nexport class ValidationError extends AppError {\n  constructor(message: string = \'Validation failed\', details?: any) {\n    super(message, 400, true, \'VALIDATION_ERROR\', details);\n    Object.setPrototypeOf(this, ValidationError.prototype);\n  }\n}\n\nexport class InvalidInputError extends AppError {\n  constructor(message: string = \'Invalid input provided\', details?: any) {\n    super(message, 400, true, \'INVALID_INPUT\', details);\n    Object.setPrototypeOf(this, InvalidInputError.prototype);\n  }\n}\n\nexport class MissingFieldError extends AppError {\n  constructor(field: string, details?: any) {\n    super(`Required field missing: ${field}`, 400, true, \'MISSING_FIELD\', {\n      field,\n      ...details,\n    });\n    Object.setPrototypeOf(this, MissingFieldError.prototype);\n  }\n}\n\n// ============================================================================\n// RESOURCE ERRORS\n// ============================================================================\n\nexport class NotFoundError extends AppError {\n  constructor(resource: string = \'Resource\', details?: any) {\n    super(`${resource} not found`, 404, true, \'NOT_FOUND\', details);\n    Object.setPrototypeOf(this, NotFoundError.prototype);\n  }\n}\n\nexport class ResourceExistsError extends AppError {\n  constructor(resource: string = \'Resource\', details?: any) {\n    super(`${resource} already exists`, 409, true, \'RESOURCE_EXISTS\', details);\n    Object.setPrototypeOf(this, ResourceExistsError.prototype);\n  }\n}\n\nexport class ResourceLockedError extends AppError {\n  constructor(resource: string = \'Resource\', details?: any) {\n    super(`${resource} is locked`, 423, true, \'RESOURCE_LOCKED\', details);\n    Object.setPrototypeOf(this, ResourceLockedError.prototype);\n  }\n}\n\n// ============================================================================\n// DATABASE ERRORS\n// ============================================================================\n\nexport class DatabaseError extends AppError {\n  constructor(message: string = \'Database operation failed\', details?: any) {\n    super(message, 500, true, \'DATABASE_ERROR\', details);\n    Object.setPrototypeOf(this, DatabaseError.prototype);\n  }\n}\n\nexport class DatabaseConnectionError extends AppError {\n  constructor(message: string = \'Database connection failed\', details?: any) {\n    super(message, 503, true, \'DB_CONNECTION_ERROR\', details);\n    Object.setPrototypeOf(this, DatabaseConnectionError.prototype);\n  }\n}\n\nexport class TransactionError extends AppError {\n  constructor(message: string = \'Transaction failed\', details?: any) {\n    super(message, 500, true, \'TRANSACTION_ERROR\', details);\n    Object.setPrototypeOf(this, TransactionError.prototype);\n  }\n}\n\n// ============================================================================\n// EXTERNAL SERVICE ERRORS\n// ============================================================================\n\nexport class ExternalServiceError extends AppError {\n  constructor(service: string, message?: string, details?: any) {\n    super(\n      message || `External service error: ${service}`,\n      502,\n      true,\n      \'EXTERNAL_SERVICE_ERROR\',\n      { service, ...details }\n    );\n    Object.setPrototypeOf(this, ExternalServiceError.prototype);\n  }\n}\n\nexport class AIServiceError extends AppError {\n  constructor(message: string = \'AI service error\', details?: any) {\n    super(message, 502, true, \'AI_SERVICE_ERROR\', details);\n    Object.setPrototypeOf(this, AIServiceError.prototype);\n  }\n}\n\nexport class CloudProviderError extends AppError {\n  constructor(provider: string, message?: string, details?: any) {\n    super(\n      message || `Cloud provider error: ${provider}`,\n      502,\n      true,\n      \'CLOUD_PROVIDER_ERROR\',\n      { provider, ...details }\n    );\n    Object.setPrototypeOf(this, CloudProviderError.prototype);\n  }\n}\n\n// ============================================================================\n// RATE LIMITING & QUOTA ERRORS\n// ============================================================================\n\nexport class RateLimitError extends AppError {\n  constructor(message: string = \'Rate limit exceeded\', details?: any) {\n    super(message, 429, true, \'RATE_LIMIT_ERROR\', details);\n    Object.setPrototypeOf(this, RateLimitError.prototype);\n  }\n}\n\nexport class QuotaExceededError extends AppError {\n  constructor(message: string = \'Quota exceeded\', details?: any) {\n    super(message, 429, true, \'QUOTA_EXCEEDED\', details);\n    Object.setPrototypeOf(this, QuotaExceededError.prototype);\n  }\n}\n\n// ============================================================================\n// FILE & UPLOAD ERRORS\n// ============================================================================\n\nexport class FileUploadError extends AppError {\n  constructor(message: string = \'File upload failed\', details?: any) {\n    super(message, 400, true, \'FILE_UPLOAD_ERROR\', details);\n    Object.setPrototypeOf(this, FileUploadError.prototype);\n  }\n}\n\nexport class FileSizeError extends AppError {\n  constructor(maxSize: number, actualSize: number, details?: any) {\n    super(\n      `File size exceeds limit. Max: ${maxSize}MB, Actual: ${actualSize}MB`,\n      413,\n      true,\n      \'FILE_SIZE_ERROR\',\n      { maxSize, actualSize, ...details }\n    );\n    Object.setPrototypeOf(this, FileSizeError.prototype);\n  }\n}\n\nexport class FileTypeError extends AppError {\n  constructor(allowedTypes: string[], actualType: string, details?: any) {\n    super(\n      `Invalid file type. Allowed: ${allowedTypes.join(\', \')}, Received: ${actualType}`,\n      415,\n      true,\n      \'FILE_TYPE_ERROR\',\n      { allowedTypes, actualType, ...details }\n    );\n    Object.setPrototypeOf(this, FileTypeError.prototype);\n  }\n}\n\n// ============================================================================\n// BUSINESS LOGIC ERRORS\n// ============================================================================\n\nexport class BusinessLogicError extends AppError {\n  constructor(message: string, details?: any) {\n    super(message, 422, true, \'BUSINESS_LOGIC_ERROR\', details);\n    Object.setPrototypeOf(this, BusinessLogicError.prototype);\n  }\n}\n\nexport class InsufficientFundsError extends AppError {\n  constructor(required: number, available: number, details?: any) {\n    super(\n      `Insufficient funds. Required: $${required}, Available: $${available}`,\n      402,\n      true,\n      \'INSUFFICIENT_FUNDS\',\n      { required, available, ...details }\n    );\n    Object.setPrototypeOf(this, InsufficientFundsError.prototype);\n  }\n}\n\nexport class ConsentRequiredError extends AppError {\n  constructor(message: string = \'Patient consent required\', details?: any) {\n    super(message, 403, true, \'CONSENT_REQUIRED\', details);\n    Object.setPrototypeOf(this, ConsentRequiredError.prototype);\n  }\n}\n\n// ============================================================================\n// HIPAA COMPLIANCE ERRORS\n// ============================================================================\n\nexport class HIPAAViolationError extends AppError {\n  constructor(message: string, details?: any) {\n    super(message, 403, true, \'HIPAA_VIOLATION\', details);\n    Object.setPrototypeOf(this, HIPAAViolationError.prototype);\n  }\n}\n\nexport class PHIAccessError extends AppError {\n  constructor(message: string = \'Unauthorized PHI access\', details?: any) {\n    super(message, 403, true, \'PHI_ACCESS_ERROR\', details);\n    Object.setPrototypeOf(this, PHIAccessError.prototype);\n  }\n}\n\n// ============================================================================\n// SYSTEM ERRORS\n// ============================================================================\n\nexport class SystemError extends AppError {\n  constructor(message: string = \'System error occurred\', details?: any) {\n    super(message, 500, false, \'SYSTEM_ERROR\', details);\n    Object.setPrototypeOf(this, SystemError.prototype);\n  }\n}\n\nexport class ConfigurationError extends AppError {\n  constructor(message: string = \'Configuration error\', details?: any) {\n    super(message, 500, false, \'CONFIGURATION_ERROR\', details);\n    Object.setPrototypeOf(this, ConfigurationError.prototype);\n  }\n}\n\nexport class ServiceUnavailableError extends AppError {\n  constructor(message: string = \'Service temporarily unavailable\', details?: any) {\n    super(message, 503, true, \'SERVICE_UNAVAILABLE\', details);\n    Object.setPrototypeOf(this, ServiceUnavailableError.prototype);\n  }\n}\n\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n\n/**\n * Check if error is operational (expected) or programming error\n */\nexport function isOperationalError(error: Error): boolean {\n  if (error instanceof AppError) {\n    return error.isOperational;\n  }\n  return false;\n}\n\n/**\n * Extract error details for logging\n */\nexport function getErrorDetails(error: Error) {\n  if (error instanceof AppError) {\n    return {\n      message: error.message,\n      statusCode: error.statusCode,\n      code: error.code,\n      details: error.details,\n      timestamp: error.timestamp,\n      stack: error.stack,\n    };\n  }\n\n  return {\n    message: error.message,\n    stack: error.stack,\n    name: error.name,\n  };\n}\n\n/**\n * Create user-friendly error message\n */\nexport function getUserFriendlyMessage(error: Error): string {\n  if (error instanceof AppError) {\n    // Return the error message as-is for operational errors\n    return error.message;\n  }\n\n  // Generic message for programming errors\n  return \'An unexpected error occurred. Please try again later.\';\n}\n</create-file>\n</function_calls>'}