{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="docs/MEDICAL_STANDARDIZATION_INTEGRATION.md">\n# Medical Standardization Repository Integration Guide\n\n## Overview\n\nThis guide shows how to integrate the Medical Standardization Repository with other HoloVitals repositories and services.\n\n---\n\n## Integration Architecture\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│         Medical Standardization Repository                  │\n│  (Central source of truth for medical codes)                │\n└─────────────────────────────────────────────────────────────┘\n                            │\n        ┌───────────────────┼───────────────────┐\n        │                   │                   │\n        ▼                   ▼                   ▼\n┌──────────────┐    ┌──────────────┐    ┌──────────────┐\n│ EHR Sync     │    │ AI Analysis  │    │ Patient      │\n│ Services     │    │ Services     │    │ Repository   │\n└──────────────┘    └──────────────┘    └──────────────┘\n```\n\n---\n\n## 1. Integration with EHR Sync Services\n\n### Epic Integration\n\n```typescript\n// lib/services/EpicEnhancedService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class EpicEnhancedService {\n  private medicalStandardization = getMedicalStandardizationRepository();\n\n  async syncDiagnosticReports(connectionId: string): Promise<void> {\n    const connection = await this.getConnection(connectionId);\n    const reports = await this.fetchDiagnosticReports(connection);\n\n    for (const report of reports) {\n      // Extract lab results from report\n      const labResults = this.extractLabResults(report);\n\n      // Standardize each result\n      const standardizedResults = await this.medicalStandardization.batchStandardize(\n        labResults.map(result => ({\n          loincNumber: this.mapEpicCodeToLOINC(result.code),\n          value: result.value,\n          unit: result.unit,\n          patientAge: connection.user.age,\n          patientGender: connection.user.gender,\n        }))\n      );\n\n      // Store standardized results\n      for (let i = 0; i < standardizedResults.length; i++) {\n        const original = labResults[i];\n        const standardized = standardizedResults[i];\n\n        await prisma.labResultStandardization.create({\n          data: {\n            // Original data\n            originalCode: original.code,\n            originalCodeSystem: \'EPIC\',\n            originalName: original.name,\n            originalValue: String(original.value),\n            originalUnit: original.unit,\n\n            // Standardized data\n            loincCodeId: standardized.loincCode.id,\n            standardizedValue: standardized.standardizedValue,\n            standardizedUnit: standardized.unit.unit,\n\n            // Interpretation\n            interpretation: this.getInterpretationCode(standardized),\n            flags: standardized.flags,\n            referenceRangeId: standardized.referenceRange?.id,\n\n            // Context\n            patientId: connection.userId,\n            fhirResourceId: report.id,\n          },\n        });\n      }\n    }\n  }\n\n  private mapEpicCodeToLOINC(epicCode: string): string {\n    // Epic-specific code mapping\n    const mapping: Record<string, string> = {\n      \'EPIC_GLU\': \'2345-7\',  // Glucose\n      \'EPIC_NA\': \'2951-2\',   // Sodium\n      \'EPIC_K\': \'2823-3\',    // Potassium\n      \'EPIC_WBC\': \'6690-2\',  // WBC\n      \'EPIC_HGB\': \'718-7\',   // Hemoglobin\n      // Add more mappings...\n    };\n\n    return mapping[epicCode] || epicCode;\n  }\n\n  private getInterpretationCode(result: any): string {\n    if (result.flags.includes(\'CRITICAL\')) {\n      return result.flags.includes(\'LOW\') ? \'CRITICAL_LOW\' : \'CRITICAL_HIGH\';\n    }\n    if (result.flags.includes(\'LOW\')) return \'LOW\';\n    if (result.flags.includes(\'HIGH\')) return \'HIGH\';\n    return \'NORMAL\';\n  }\n}\n```\n\n### Cerner Integration\n\n```typescript\n// lib/services/CernerEnhancedService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class CernerEnhancedService {\n  private medicalStandardization = getMedicalStandardizationRepository();\n\n  async syncObservations(connectionId: string): Promise<void> {\n    const connection = await this.getConnection(connectionId);\n    const observations = await this.fetchObservations(connection);\n\n    // Filter for lab results (Observation resources with LOINC codes)\n    const labObservations = observations.filter(obs => \n      obs.code?.coding?.some((c: any) => c.system === \'http://loinc.org\')\n    );\n\n    // Batch standardize\n    const standardizedResults = await this.medicalStandardization.batchStandardize(\n      labObservations.map(obs => {\n        const loincCoding = obs.code.coding.find((c: any) => c.system === \'http://loinc.org\');\n        return {\n          loincNumber: loincCoding.code,\n          value: obs.valueQuantity.value,\n          unit: obs.valueQuantity.unit,\n          patientAge: connection.user.age,\n          patientGender: connection.user.gender,\n        };\n      })\n    );\n\n    // Store results\n    await prisma.labResultStandardization.createMany({\n      data: standardizedResults.map((result, index) => {\n        const obs = labObservations[index];\n        const loincCoding = obs.code.coding.find((c: any) => c.system === \'http://loinc.org\');\n\n        return {\n          originalCode: loincCoding.code,\n          originalCodeSystem: \'CERNER\',\n          originalName: obs.code.text,\n          originalValue: String(obs.valueQuantity.value),\n          originalUnit: obs.valueQuantity.unit,\n          loincCodeId: result.loincCode.id,\n          standardizedValue: result.standardizedValue,\n          standardizedUnit: result.unit.unit,\n          interpretation: this.getInterpretationCode(result),\n          flags: result.flags,\n          referenceRangeId: result.referenceRange?.id,\n          patientId: connection.userId,\n          fhirResourceId: obs.id,\n        };\n      }),\n    });\n  }\n\n  private getInterpretationCode(result: any): string {\n    if (result.flags.includes(\'CRITICAL\')) {\n      return result.flags.includes(\'LOW\') ? \'CRITICAL_LOW\' : \'CRITICAL_HIGH\';\n    }\n    if (result.flags.includes(\'LOW\')) return \'LOW\';\n    if (result.flags.includes(\'HIGH\')) return \'HIGH\';\n    return \'NORMAL\';\n  }\n}\n```\n\n### Allscripts Integration\n\n```typescript\n// lib/services/AllscriptsEnhancedService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class AllscriptsEnhancedService {\n  private medicalStandardization = getMedicalStandardizationRepository();\n\n  async syncDiagnosticReports(connectionId: string): Promise<void> {\n    const connection = await this.getConnection(connectionId);\n    const reports = await this.fetchDiagnosticReports(connection);\n\n    for (const report of reports) {\n      const labResults = this.extractLabResults(report);\n\n      // Validate before standardizing\n      const validationResults = await Promise.all(\n        labResults.map(result =>\n          this.medicalStandardization.validateLabResult({\n            loincNumber: this.mapAllscriptsCodeToLOINC(result.code),\n            value: result.value,\n            unit: result.unit,\n            patientAge: connection.user.age,\n            patientGender: connection.user.gender,\n          })\n        )\n      );\n\n      // Only standardize valid results\n      const validResults = labResults.filter((_, index) => validationResults[index].isValid);\n\n      if (validResults.length > 0) {\n        const standardized = await this.medicalStandardization.batchStandardize(\n          validResults.map(result => ({\n            loincNumber: this.mapAllscriptsCodeToLOINC(result.code),\n            value: result.value,\n            unit: result.unit,\n            patientAge: connection.user.age,\n            patientGender: connection.user.gender,\n          }))\n        );\n\n        // Store standardized results\n        await this.storeStandardizedResults(standardized, validResults, connection);\n      }\n\n      // Log invalid results for review\n      const invalidResults = labResults.filter((_, index) => !validationResults[index].isValid);\n      if (invalidResults.length > 0) {\n        await this.logInvalidResults(invalidResults, validationResults, connection);\n      }\n    }\n  }\n\n  private mapAllscriptsCodeToLOINC(allscriptsCode: string): string {\n    // Allscripts-specific code mapping\n    const mapping: Record<string, string> = {\n      \'AS_GLU\': \'2345-7\',\n      \'AS_NA\': \'2951-2\',\n      \'AS_K\': \'2823-3\',\n      // Add more mappings...\n    };\n\n    return mapping[allscriptsCode] || allscriptsCode;\n  }\n}\n```\n\n---\n\n## 2. Integration with AI Analysis Services\n\n### Lab Result Analysis\n\n```typescript\n// lib/services/LabResultAnalysisService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class LabResultAnalysisService {\n  private medicalStandardization = getMedicalStandardizationRepository();\n\n  async analyzeLabResults(patientId: string): Promise<AnalysisResult> {\n    // Get all standardized lab results for patient\n    const results = await prisma.labResultStandardization.findMany({\n      where: { patientId },\n      include: {\n        loincCode: true,\n        referenceRange: true,\n      },\n      orderBy: { createdAt: \'desc\' },\n    });\n\n    // Group by LOINC code for trend analysis\n    const groupedResults = this.groupByLOINCCode(results);\n\n    // Analyze each test\n    const analyses = [];\n    for (const [loincNumber, testResults] of Object.entries(groupedResults)) {\n      const analysis = await this.analyzeTest(loincNumber, testResults);\n      analyses.push(analysis);\n    }\n\n    // Generate overall assessment\n    const assessment = await this.generateAssessment(analyses);\n\n    return {\n      analyses,\n      assessment,\n      abnormalCount: analyses.filter(a => a.isAbnormal).length,\n      criticalCount: analyses.filter(a => a.isCritical).length,\n    };\n  }\n\n  private async analyzeTest(loincNumber: string, results: any[]): Promise<TestAnalysis> {\n    const loincCode = await this.medicalStandardization.getLOINCCode(loincNumber);\n    \n    if (!loincCode) {\n      throw new Error(`LOINC code ${loincNumber} not found`);\n    }\n\n    // Get latest result\n    const latest = results[0];\n\n    // Calculate trend (if multiple results)\n    const trend = results.length > 1 ? this.calculateTrend(results) : \'STABLE\';\n\n    // Check for abnormalities\n    const isAbnormal = latest.interpretation !== \'NORMAL\';\n    const isCritical = latest.flags.includes(\'CRITICAL\');\n\n    // Generate interpretation\n    const interpretation = await this.generateInterpretation(\n      loincCode,\n      latest,\n      trend,\n      results\n    );\n\n    return {\n      loincCode: loincCode.commonName,\n      loincNumber,\n      latestValue: latest.standardizedValue,\n      unit: latest.standardizedUnit,\n      referenceRange: latest.referenceRange,\n      interpretation: latest.interpretation,\n      trend,\n      isAbnormal,\n      isCritical,\n      aiInterpretation: interpretation,\n      historicalValues: results.map(r => ({\n        value: r.standardizedValue,\n        date: r.createdAt,\n      })),\n    };\n  }\n\n  private calculateTrend(results: any[]): \'INCREASING\' | \'DECREASING\' | \'STABLE\' {\n    if (results.length < 2) return \'STABLE\';\n\n    const latest = results[0].standardizedValue;\n    const previous = results[1].standardizedValue;\n    const change = ((latest - previous) / previous) * 100;\n\n    if (Math.abs(change) < 5) return \'STABLE\';\n    return change > 0 ? \'INCREASING\' : \'DECREASING\';\n  }\n\n  private async generateInterpretation(\n    loincCode: any,\n    result: any,\n    trend: string,\n    history: any[]\n  ): Promise<string> {\n    // Use AI to generate interpretation\n    const prompt = `\n      Analyze this lab result:\n      Test: ${loincCode.commonName}\n      Value: ${result.standardizedValue} ${result.standardizedUnit}\n      Reference Range: ${result.referenceRange.lowValue} - ${result.referenceRange.highValue}\n      Interpretation: ${result.interpretation}\n      Trend: ${trend}\n      Historical Values: ${history.map(h => h.standardizedValue).join(\', \')}\n\n      Provide a brief clinical interpretation for the patient.\n    `;\n\n    // Call AI service (GPT-4, Claude, etc.)\n    const interpretation = await this.callAIService(prompt);\n\n    return interpretation;\n  }\n}\n```\n\n### Trend Analysis\n\n```typescript\n// lib/services/LabTrendAnalysisService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class LabTrendAnalysisService {\n  private medicalStandardization = getMedicalStandardizationRepository();\n\n  async analyzeTrends(patientId: string, loincNumber: string): Promise<TrendAnalysis> {\n    // Get historical results\n    const results = await prisma.labResultStandardization.findMany({\n      where: {\n        patientId,\n        loincCode: {\n          loincNumber,\n        },\n      },\n      include: {\n        loincCode: true,\n        referenceRange: true,\n      },\n      orderBy: { createdAt: \'asc\' },\n    });\n\n    if (results.length < 2) {\n      return {\n        hasEnoughData: false,\n        message: \'Need at least 2 results for trend analysis\',\n      };\n    }\n\n    // Calculate statistics\n    const values = results.map(r => r.standardizedValue!);\n    const mean = values.reduce((a, b) => a + b, 0) / values.length;\n    const variance = values.reduce((a, b) => a + Math.pow(b - mean, 2), 0) / values.length;\n    const stdDev = Math.sqrt(variance);\n\n    // Calculate trend\n    const trend = this.calculateLinearTrend(results);\n\n    // Detect anomalies\n    const anomalies = this.detectAnomalies(results, mean, stdDev);\n\n    // Predict next value\n    const prediction = this.predictNextValue(results, trend);\n\n    return {\n      hasEnoughData: true,\n      testName: results[0].loincCode.commonName,\n      dataPoints: results.length,\n      mean,\n      stdDev,\n      trend: {\n        direction: trend.slope > 0 ? \'INCREASING\' : \'DECREASING\',\n        slope: trend.slope,\n        confidence: trend.rSquared,\n      },\n      anomalies,\n      prediction,\n      recommendation: this.generateRecommendation(results, trend, anomalies),\n    };\n  }\n\n  private calculateLinearTrend(results: any[]): { slope: number; intercept: number; rSquared: number } {\n    const n = results.length;\n    const x = results.map((_, i) => i);\n    const y = results.map(r => r.standardizedValue!);\n\n    const sumX = x.reduce((a, b) => a + b, 0);\n    const sumY = y.reduce((a, b) => a + b, 0);\n    const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);\n    const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);\n\n    const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);\n    const intercept = (sumY - slope * sumX) / n;\n\n    // Calculate R-squared\n    const yMean = sumY / n;\n    const ssTotal = y.reduce((sum, yi) => sum + Math.pow(yi - yMean, 2), 0);\n    const ssResidual = y.reduce((sum, yi, i) => {\n      const predicted = slope * x[i] + intercept;\n      return sum + Math.pow(yi - predicted, 2);\n    }, 0);\n    const rSquared = 1 - (ssResidual / ssTotal);\n\n    return { slope, intercept, rSquared };\n  }\n\n  private detectAnomalies(results: any[], mean: number, stdDev: number): any[] {\n    // Use 2 standard deviations as threshold\n    const threshold = 2 * stdDev;\n\n    return results\n      .filter(r => Math.abs(r.standardizedValue! - mean) > threshold)\n      .map(r => ({\n        date: r.createdAt,\n        value: r.standardizedValue,\n        deviation: Math.abs(r.standardizedValue! - mean) / stdDev,\n      }));\n  }\n\n  private predictNextValue(results: any[], trend: any): { value: number; confidence: string } {\n    const nextX = results.length;\n    const predictedValue = trend.slope * nextX + trend.intercept;\n\n    let confidence: string;\n    if (trend.rSquared > 0.8) confidence = \'HIGH\';\n    else if (trend.rSquared > 0.5) confidence = \'MEDIUM\';\n    else confidence = \'LOW\';\n\n    return {\n      value: predictedValue,\n      confidence,\n    };\n  }\n\n  private generateRecommendation(results: any[], trend: any, anomalies: any[]): string {\n    const latest = results[results.length - 1];\n    const isAbnormal = latest.interpretation !== \'NORMAL\';\n    const isCritical = latest.flags.includes(\'CRITICAL\');\n    const hasAnomalies = anomalies.length > 0;\n    const trendingUp = trend.slope > 0;\n\n    if (isCritical) {\n      return \'URGENT: Critical value detected. Immediate medical attention required.\';\n    }\n\n    if (isAbnormal && trendingUp && trend.rSquared > 0.7) {\n      return \'WARNING: Abnormal value with strong upward trend. Schedule follow-up soon.\';\n    }\n\n    if (hasAnomalies) {\n      return \'NOTICE: Anomalous values detected. Consider retesting for accuracy.\';\n    }\n\n    if (isAbnormal) {\n      return \'ATTENTION: Abnormal value detected. Monitor and retest as recommended.\';\n    }\n\n    return \'NORMAL: Values within expected range. Continue routine monitoring.\';\n  }\n}\n```\n\n---\n\n## 3. Integration with Patient Repository\n\n### Store Standardized Results\n\n```typescript\n// lib/services/PatientLabResultService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class PatientLabResultService {\n  private medicalStandardization = getMedicalStandardizationRepository();\n\n  async addLabResult(params: {\n    patientId: string;\n    testName: string;\n    value: number;\n    unit: string;\n    testDate: Date;\n    providerId?: string;\n  }): Promise<void> {\n    const { patientId, testName, value, unit, testDate, providerId } = params;\n\n    // Search for LOINC code\n    const searchResult = await this.medicalStandardization.searchLOINCCodes({\n      query: testName,\n      limit: 1,\n    });\n\n    if (searchResult.codes.length === 0) {\n      throw new Error(`No LOINC code found for test: ${testName}`);\n    }\n\n    const loincCode = searchResult.codes[0];\n\n    // Get patient demographics\n    const patient = await prisma.user.findUnique({\n      where: { id: patientId },\n    });\n\n    if (!patient) {\n      throw new Error(\'Patient not found\');\n    }\n\n    // Standardize result\n    const standardized = await this.medicalStandardization.standardizeLabResult({\n      loincNumber: loincCode.loincNumber,\n      value,\n      unit,\n      patientAge: this.calculateAge(patient.dateOfBirth),\n      patientGender: patient.gender as any,\n    });\n\n    // Store result\n    await prisma.labResultStandardization.create({\n      data: {\n        originalCode: testName,\n        originalCodeSystem: \'MANUAL\',\n        originalName: testName,\n        originalValue: String(value),\n        originalUnit: unit,\n        loincCodeId: standardized.loincCode.id,\n        standardizedValue: standardized.standardizedValue,\n        standardizedUnit: standardized.unit.unit,\n        interpretation: this.getInterpretationCode(standardized),\n        flags: standardized.flags,\n        referenceRangeId: standardized.referenceRange?.id,\n        patientId,\n        standardizedBy: providerId || \'PATIENT\',\n        createdAt: testDate,\n      },\n    });\n\n    // Create notification if abnormal\n    if (!standardized.isWithinRange) {\n      await this.createAbnormalResultNotification(patientId, standardized);\n    }\n  }\n\n  private calculateAge(dateOfBirth: Date): number {\n    const today = new Date();\n    let age = today.getFullYear() - dateOfBirth.getFullYear();\n    const monthDiff = today.getMonth() - dateOfBirth.getMonth();\n    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < dateOfBirth.getDate())) {\n      age--;\n    }\n    return age;\n  }\n\n  private getInterpretationCode(result: any): string {\n    if (result.flags.includes(\'CRITICAL\')) {\n      return result.flags.includes(\'LOW\') ? \'CRITICAL_LOW\' : \'CRITICAL_HIGH\';\n    }\n    if (result.flags.includes(\'LOW\')) return \'LOW\';\n    if (result.flags.includes(\'HIGH\')) return \'HIGH\';\n    return \'NORMAL\';\n  }\n\n  private async createAbnormalResultNotification(patientId: string, result: any): Promise<void> {\n    await prisma.notification.create({\n      data: {\n        userId: patientId,\n        type: result.flags.includes(\'CRITICAL\') ? \'CRITICAL_LAB_RESULT\' : \'ABNORMAL_LAB_RESULT\',\n        title: `Abnormal Lab Result: ${result.loincCode.commonName}`,\n        message: `Your ${result.loincCode.commonName} result is ${result.interpretation.toLowerCase()}. Please consult with your healthcare provider.`,\n        priority: result.flags.includes(\'CRITICAL\') ? \'HIGH\' : \'MEDIUM\',\n        read: false,\n      },\n    });\n  }\n}\n```\n\n---\n\n## 4. Code Mapping Management\n\n### Create Provider-Specific Mappings\n\n```typescript\n// lib/services/CodeMappingService.ts\n\nimport { getMedicalStandardizationRepository } from \'./MedicalStandardizationRepository\';\n\nexport class CodeMappingService {\n  async createMapping(params: {\n    providerCode: string;\n    providerSystem: string;\n    loincNumber: string;\n    confidence?: number;\n  }): Promise<void> {\n    const { providerCode, providerSystem, loincNumber, confidence = 1.0 } = params;\n\n    await prisma.codeMapping.create({\n      data: {\n        loincCode: loincNumber,\n        targetSystem: providerSystem,\n        targetCode: providerCode,\n        relationship: \'EQUIVALENT\',\n        confidence,\n        source: \'Manual\',\n      },\n    });\n  }\n\n  async getMapping(providerCode: string, providerSystem: string): Promise<string | null> {\n    const mapping = await prisma.codeMapping.findFirst({\n      where: {\n        targetCode: providerCode,\n        targetSystem: providerSystem,\n      },\n      orderBy: { confidence: \'desc\' },\n    });\n\n    return mapping?.loincCode || null;\n  }\n\n  async bulkCreateMappings(mappings: Array<{\n    providerCode: string;\n    providerSystem: string;\n    loincNumber: string;\n    confidence?: number;\n  }>): Promise<void> {\n    await prisma.codeMapping.createMany({\n      data: mappings.map(m => ({\n        loincCode: m.loincNumber,\n        targetSystem: m.providerSystem,\n        targetCode: m.providerCode,\n        relationship: \'EQUIVALENT\',\n        confidence: m.confidence || 1.0,\n        source: \'Bulk Import\',\n      })),\n      skipDuplicates: true,\n    });\n  }\n}\n```\n\n---\n\n## Summary\n\nThe Medical Standardization Repository integrates with:\n\n1. **EHR Sync Services**: Standardize lab results from Epic, Cerner, Allscripts\n2. **AI Analysis Services**: Provide standardized data for accurate analysis\n3. **Patient Repository**: Store and retrieve standardized lab results\n4. **Code Mapping**: Manage provider-specific code mappings\n\nAll integrations use the centralized repository as the single source of truth for medical codes, ensuring consistency across the platform.\n\n</create-file>\n</function_calls>'}