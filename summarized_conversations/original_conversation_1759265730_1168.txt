{'role': 'assistant', 'content': 'Now let\'s create comprehensive documentation for the AI Dev Interface:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/docs/AI_DEV_INTERFACE.md">\n# AI Development Interface Documentation\n\n## Overview\n\nThe AI Development Interface provides a flexible, multi-provider AI chat system specifically designed for development assistance. It supports both OpenAI (GPT models) and Anthropic (Claude models) with easy switching between providers.\n\n## Features\n\n### Multi-Provider Support\n- ✅ **OpenAI**: GPT-3.5 Turbo, GPT-4, GPT-4 Turbo, GPT-4o\n- ✅ **Claude**: Claude 3 Opus, Sonnet, Haiku, Claude 3.5 Sonnet\n- 🔄 **Extensible**: Easy to add more providers (Gemini, Llama, etc.)\n\n### Development Modes\n- **CODE_GENERATION**: Generate clean, efficient code\n- **DEBUGGING**: Identify and fix bugs\n- **ARCHITECTURE**: Design system architectures\n- **DOCUMENTATION**: Create technical documentation\n- **CODE_REVIEW**: Review code quality and security\n- **TEST_GENERATION**: Generate comprehensive tests\n- **REFACTORING**: Improve code quality\n- **GENERAL**: General development assistance\n\n### Key Capabilities\n- Provider switching on-the-fly\n- Conversation history management\n- Cost tracking per provider\n- Token usage monitoring\n- Streaming responses\n- Context-aware assistance\n\n---\n\n## Architecture\n\n```\n┌─────────────────────────────────────────────────────────┐\n│                  AI Provider Interface                   │\n│              (Abstract base for all providers)           │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n        ┌─────────────────┴─────────────────┐\n        ↓                                    ↓\n┌──────────────────┐              ┌──────────────────┐\n│  OpenAI Provider │              │ Claude Provider  │\n│  - GPT-3.5       │              │  - Claude 3      │\n│  - GPT-4         │              │  - Claude 3.5    │\n│  - GPT-4 Turbo   │              │                  │\n└──────────────────┘              └──────────────────┘\n        ↓                                    ↓\n┌─────────────────────────────────────────────────────────┐\n│              Provider Manager                            │\n│  - Register providers                                    │\n│  - Switch between providers                              │\n│  - Manage configurations                                 │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n┌─────────────────────────────────────────────────────────┐\n│           AI Development Chat Service                    │\n│  - Development-specific features                         │\n│  - Mode-based system prompts                             │\n│  - Context management                                    │\n│  - Cost tracking                                         │\n└─────────────────────────────────────────────────────────┘\n                          ↓\n┌─────────────────────────────────────────────────────────┐\n│                  REST API Endpoints                      │\n│  - POST /api/dev-chat                                    │\n│  - GET /api/dev-chat                                     │\n│  - GET /api/dev-chat/providers                           │\n│  - POST /api/dev-chat/providers                          │\n└─────────────────────────────────────────────────────────┘\n```\n\n---\n\n## Setup\n\n### 1. Install Dependencies\n\nAlready installed:\n```bash\nnpm install @anthropic-ai/sdk openai tiktoken\n```\n\n### 2. Configure Environment Variables\n\nAdd to `.env`:\n```env\n# OpenAI\nOPENAI_API_KEY="sk-..."\n\n# Anthropic (Claude)\nANTHROPIC_API_KEY="sk-ant-..."\n```\n\n### 3. Initialize Providers\n\nProviders are automatically initialized from environment variables when the API starts.\n\n---\n\n## API Reference\n\n### Chat Endpoint\n\n#### POST /api/dev-chat\n\nSend a message to the AI development assistant.\n\n**Request:**\n```json\n{\n  "userId": "user-123",\n  "message": "Write a function to validate email addresses",\n  "mode": "CODE_GENERATION",\n  "provider": "claude-sonnet",\n  "conversationId": "conv-123",\n  "context": {\n    "language": "typescript",\n    "framework": "Next.js",\n    "codeSnippet": "// existing code...",\n    "errorMessage": "Type error...",\n    "fileContext": ["utils/validation.ts"]\n  }\n}\n```\n\n**Response:**\n```json\n{\n  "conversationId": "conv-123",\n  "messageId": "msg-456",\n  "content": "Here\'s a TypeScript function to validate email addresses...",\n  "provider": "CLAUDE",\n  "model": "claude-3-5-sonnet-20241022",\n  "tokens": {\n    "prompt": 150,\n    "completion": 300,\n    "total": 450\n  },\n  "cost": 0.00135,\n  "processingTime": 2340,\n  "metadata": {\n    "mode": "CODE_GENERATION"\n  }\n}\n```\n\n#### GET /api/dev-chat?conversationId=xxx\n\nGet conversation history.\n\n**Response:**\n```json\n{\n  "id": "conv-123",\n  "userId": "user-123",\n  "title": "Dev Chat",\n  "messages": [\n    {\n      "id": "msg-1",\n      "role": "USER",\n      "content": "Write a function...",\n      "tokens": 150,\n      "createdAt": "2025-09-30T12:00:00Z"\n    },\n    {\n      "id": "msg-2",\n      "role": "ASSISTANT",\n      "content": "Here\'s the function...",\n      "tokens": 300,\n      "createdAt": "2025-09-30T12:00:02Z"\n    }\n  ],\n  "totalTokens": 450,\n  "totalCost": 0.00135,\n  "isActive": true\n}\n```\n\n#### GET /api/dev-chat?userId=xxx\n\nGet all conversations for a user.\n\n**Response:**\n```json\n[\n  {\n    "id": "conv-1",\n    "title": "Dev Chat",\n    "messages": [\n      { "content": "Latest message..." }\n    ],\n    "updatedAt": "2025-09-30T12:00:00Z"\n  }\n]\n```\n\n#### DELETE /api/dev-chat?conversationId=xxx\n\nDelete a conversation.\n\n**Response:**\n```json\n{\n  "message": "Conversation deleted successfully"\n}\n```\n\n---\n\n### Provider Management\n\n#### GET /api/dev-chat/providers\n\nList all available providers.\n\n**Response:**\n```json\n{\n  "providers": [\n    {\n      "name": "openai-gpt4",\n      "provider": "OPENAI",\n      "model": "gpt-4-turbo",\n      "isActive": false\n    },\n    {\n      "name": "claude-sonnet",\n      "provider": "CLAUDE",\n      "model": "claude-3-5-sonnet-20241022",\n      "isActive": true\n    }\n  ],\n  "activeProvider": {\n    "name": "claude-sonnet",\n    "provider": "CLAUDE",\n    "model": "claude-3-5-sonnet-20241022",\n    "capabilities": {\n      "supportsStreaming": true,\n      "supportsVision": true,\n      "supportsFunctionCalling": true,\n      "supportsSystemMessages": true,\n      "maxContextWindow": 200000,\n      "maxOutputTokens": 8192\n    },\n    "costs": {\n      "promptCostPer1M": 3.00,\n      "completionCostPer1M": 15.00,\n      "currency": "USD"\n    }\n  }\n}\n```\n\n#### POST /api/dev-chat/providers\n\nSwitch active provider or register a new one.\n\n**Switch Provider:**\n```json\n{\n  "action": "switch",\n  "providerName": "claude-opus"\n}\n```\n\n**Register Provider:**\n```json\n{\n  "action": "register",\n  "name": "my-custom-provider",\n  "config": {\n    "provider": "OPENAI",\n    "apiKey": "sk-...",\n    "model": "gpt-4o",\n    "maxTokens": 4096,\n    "temperature": 0.7\n  }\n}\n```\n\n#### PATCH /api/dev-chat/providers?name=xxx\n\nUpdate provider configuration.\n\n**Request:**\n```json\n{\n  "temperature": 0.5,\n  "maxTokens": 8192\n}\n```\n\n#### DELETE /api/dev-chat/providers?name=xxx\n\nRemove a provider.\n\n---\n\n## Usage Examples\n\n### Example 1: Code Generation with Claude\n\n```bash\ncurl -X POST http://localhost:3000/api/dev-chat \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "userId": "dev-user",\n    "message": "Create a React component for a user profile card",\n    "mode": "CODE_GENERATION",\n    "provider": "claude-sonnet",\n    "context": {\n      "language": "typescript",\n      "framework": "React"\n    }\n  }\'\n```\n\n### Example 2: Debugging with GPT-4\n\n```bash\ncurl -X POST http://localhost:3000/api/dev-chat \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "userId": "dev-user",\n    "message": "Why is this code throwing an error?",\n    "mode": "DEBUGGING",\n    "provider": "openai-gpt4",\n    "context": {\n      "codeSnippet": "const result = data.map(item => item.value);",\n      "errorMessage": "TypeError: Cannot read property map of undefined",\n      "language": "javascript"\n    }\n  }\'\n```\n\n### Example 3: Architecture Discussion\n\n```bash\ncurl -X POST http://localhost:3000/api/dev-chat \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "userId": "dev-user",\n    "message": "Design a microservices architecture for an e-commerce platform",\n    "mode": "ARCHITECTURE",\n    "provider": "claude-opus"\n  }\'\n```\n\n### Example 4: Switch Provider\n\n```bash\ncurl -X POST http://localhost:3000/api/dev-chat/providers \\\n  -H "Content-Type: application/json" \\\n  -d \'{\n    "action": "switch",\n    "providerName": "claude-haiku"\n  }\'\n```\n\n### Example 5: Streaming Response\n\n```bash\ncurl -X POST http://localhost:3000/api/dev-chat \\\n  -H "Content-Type: application/json" \\\n  -H "Accept: text/event-stream" \\\n  -d \'{\n    "userId": "dev-user",\n    "message": "Explain async/await in JavaScript"\n  }\'\n```\n\n---\n\n## Development Modes\n\n### CODE_GENERATION\n**Best for:** Writing new code, functions, components\n\n**System Prompt:** Expert software developer specializing in clean, efficient code\n\n**Example:**\n```json\n{\n  "mode": "CODE_GENERATION",\n  "message": "Create a REST API endpoint for user authentication"\n}\n```\n\n### DEBUGGING\n**Best for:** Finding and fixing bugs\n\n**System Prompt:** Expert debugging assistant analyzing errors and code\n\n**Example:**\n```json\n{\n  "mode": "DEBUGGING",\n  "message": "Why is my API returning 500 errors?",\n  "context": {\n    "errorMessage": "Internal Server Error",\n    "codeSnippet": "app.post(\'/api/users\', handler)"\n  }\n}\n```\n\n### ARCHITECTURE\n**Best for:** System design, architecture decisions\n\n**System Prompt:** Software architecture expert focusing on scalability\n\n**Example:**\n```json\n{\n  "mode": "ARCHITECTURE",\n  "message": "Design a real-time chat system architecture"\n}\n```\n\n### DOCUMENTATION\n**Best for:** Writing technical docs, API documentation\n\n**System Prompt:** Technical documentation specialist\n\n**Example:**\n```json\n{\n  "mode": "DOCUMENTATION",\n  "message": "Document this API endpoint",\n  "context": {\n    "codeSnippet": "POST /api/users - Create new user"\n  }\n}\n```\n\n### CODE_REVIEW\n**Best for:** Reviewing code quality, security, best practices\n\n**System Prompt:** Experienced code reviewer\n\n**Example:**\n```json\n{\n  "mode": "CODE_REVIEW",\n  "message": "Review this authentication code",\n  "context": {\n    "codeSnippet": "const hash = md5(password);"\n  }\n}\n```\n\n### TEST_GENERATION\n**Best for:** Writing unit tests, integration tests\n\n**System Prompt:** Testing expert\n\n**Example:**\n```json\n{\n  "mode": "TEST_GENERATION",\n  "message": "Generate tests for this function",\n  "context": {\n    "codeSnippet": "function validateEmail(email) { ... }"\n  }\n}\n```\n\n### REFACTORING\n**Best for:** Improving code quality without changing functionality\n\n**System Prompt:** Code refactoring specialist\n\n**Example:**\n```json\n{\n  "mode": "REFACTORING",\n  "message": "Refactor this code to be more maintainable",\n  "context": {\n    "codeSnippet": "if (x) { if (y) { if (z) { ... } } }"\n  }\n}\n```\n\n---\n\n## Provider Comparison\n\n### OpenAI (GPT Models)\n\n| Model | Context | Output | Cost (per 1M tokens) | Best For |\n|-------|---------|--------|---------------------|----------|\n| GPT-3.5 Turbo | 16K | 4K | $0.50 / $1.50 | Quick questions, simple tasks |\n| GPT-4 | 8K | 4K | $30 / $60 | Complex reasoning |\n| GPT-4 Turbo | 128K | 4K | $10 / $30 | Large context, vision |\n| GPT-4o | 128K | 4K | $5 / $15 | Balanced performance |\n\n### Anthropic (Claude Models)\n\n| Model | Context | Output | Cost (per 1M tokens) | Best For |\n|-------|---------|--------|---------------------|----------|\n| Claude 3 Haiku | 200K | 4K | $0.25 / $1.25 | Fast, cost-effective |\n| Claude 3 Sonnet | 200K | 4K | $3 / $15 | Balanced performance |\n| Claude 3.5 Sonnet | 200K | 8K | $3 / $15 | Latest, best quality |\n| Claude 3 Opus | 200K | 4K | $15 / $75 | Highest intelligence |\n\n### Recommendations\n\n**For Quick Tasks:** GPT-3.5 Turbo or Claude 3 Haiku  \n**For Complex Code:** GPT-4 Turbo or Claude 3.5 Sonnet  \n**For Large Context:** Claude models (200K context)  \n**For Cost Efficiency:** Claude 3 Haiku  \n**For Best Quality:** Claude 3 Opus or GPT-4o  \n\n---\n\n## Cost Tracking\n\nAll interactions are tracked in the database:\n\n```sql\nSELECT \n  model,\n  COUNT(*) as interactions,\n  SUM(total_tokens) as total_tokens,\n  SUM(cost) as total_cost,\n  AVG(response_time) as avg_response_time\nFROM ai_interactions\nWHERE interaction_type = \'DEV_CHAT\'\nGROUP BY model;\n```\n\n---\n\n## Best Practices\n\n### 1. Choose the Right Provider\n\n```typescript\n// For quick questions\n{ provider: "claude-haiku" }\n\n// For complex code generation\n{ provider: "claude-sonnet" }\n\n// For architecture discussions\n{ provider: "claude-opus" }\n```\n\n### 2. Use Appropriate Modes\n\n```typescript\n// Code generation\n{ mode: "CODE_GENERATION", context: { language: "typescript" } }\n\n// Debugging\n{ mode: "DEBUGGING", context: { errorMessage: "..." } }\n```\n\n### 3. Provide Context\n\n```typescript\n{\n  context: {\n    codeSnippet: "existing code",\n    language: "typescript",\n    framework: "Next.js",\n    fileContext: ["related files"]\n  }\n}\n```\n\n### 4. Maintain Conversations\n\n```typescript\n// Continue conversation\n{ conversationId: "existing-id", message: "follow-up question" }\n```\n\n### 5. Monitor Costs\n\n```typescript\n// Track costs per provider\nconst response = await devChat.chat(request);\nconsole.log(`Cost: $${response.cost}`);\n```\n\n---\n\n## Troubleshooting\n\n### Issue: Provider Not Found\n\n**Solution:** Check if provider is registered\n```bash\ncurl http://localhost:3000/api/dev-chat/providers\n```\n\n### Issue: Authentication Error\n\n**Solution:** Verify API keys in `.env`\n```env\nOPENAI_API_KEY="sk-..."\nANTHROPIC_API_KEY="sk-ant-..."\n```\n\n### Issue: Rate Limit\n\n**Solution:** Switch to different provider or wait\n```json\n{ "action": "switch", "providerName": "alternative-provider" }\n```\n\n### Issue: High Costs\n\n**Solution:** Use cheaper models\n```json\n{ "provider": "claude-haiku" }  // Most cost-effective\n```\n\n---\n\n## Future Enhancements\n\n- [ ] Add Google Gemini support\n- [ ] Add Llama model support\n- [ ] Function calling integration\n- [ ] Vision capabilities for code screenshots\n- [ ] Conversation export/import\n- [ ] Cost budgets and alerts\n- [ ] Custom system prompts\n- [ ] Multi-turn conversations with memory\n\n---\n\n## Support\n\nFor issues or questions:\n- GitHub Issues: https://github.com/cloudbyday90/HoloVitals/issues\n- Documentation: /docs\n- Email: support@holovitals.com\n</create-file>\n</function_calls>'}