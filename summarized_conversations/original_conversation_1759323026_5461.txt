{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="app/api/medical-standards/standardize/batch/route.ts">\n/**\n * Batch Lab Result Standardization API Endpoint\n * \n * Standardize multiple lab results at once\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { getMedicalStandardizationRepository } from \'@/lib/services/MedicalStandardizationRepository\';\n\nconst repository = getMedicalStandardizationRepository();\n\n/**\n * POST /api/medical-standards/standardize/batch\n * Standardize multiple lab results\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const { results } = body;\n\n    if (!Array.isArray(results) || results.length === 0) {\n      return NextResponse.json(\n        {\n          success: false,\n          error: \'results must be a non-empty array\',\n        },\n        { status: 400 }\n      );\n    }\n\n    // Validate each result\n    for (const result of results) {\n      if (!result.loincNumber || result.value === undefined || !result.unit) {\n        return NextResponse.json(\n          {\n            success: false,\n            error: \'Each result must have loincNumber, value, and unit\',\n          },\n          { status: 400 }\n        );\n      }\n    }\n\n    const standardized = await repository.batchStandardize(results);\n\n    return NextResponse.json({\n      success: true,\n      data: {\n        results: standardized,\n        total: standardized.length,\n        successful: standardized.length,\n        failed: 0,\n      },\n    });\n  } catch (error: any) {\n    console.error(\'Error batch standardizing lab results:\', error);\n    return NextResponse.json(\n      {\n        success: false,\n        error: error.message || \'Failed to batch standardize lab results\',\n      },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}