{'role': 'assistant', 'content': 'Perfect! Let me create a comprehensive UI development plan and start building the components for all 4 services:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/docs/UI_DEVELOPMENT_PLAN.md">\n# HoloVitals UI Development Plan\n\n## Overview\nBuild a modern, intuitive UI that integrates with all 4 backend services:\n1. LightweightChatbotService\n2. ContextOptimizerService\n3. AnalysisQueueService\n4. InstanceProvisionerService\n\n---\n\n## UI Architecture\n\n### Design Principles\n- **Clean & Minimal**: Open design, no cluttered navigation\n- **AI-First**: Chat interface as primary interaction\n- **Responsive**: Mobile-friendly design\n- **Accessible**: WCAG 2.1 AA compliant\n- **Fast**: Optimistic updates, streaming responses\n\n### Technology Stack\n- **Framework**: Next.js 14 with App Router\n- **Styling**: Tailwind CSS + Radix UI\n- **State Management**: React Context + SWR\n- **Real-time**: Server-Sent Events (SSE)\n- **Icons**: Lucide React\n\n---\n\n## Page Structure\n\n### 1. Landing Page (/) âœ… EXISTS\n- Hero section with value proposition\n- Feature highlights\n- How it works\n- CTA to dashboard\n\n### 2. Dashboard (/dashboard) ðŸ”¨ TO BUILD\n**Layout:**\n- Sidebar navigation (collapsible)\n- Main content area\n- Status bar (costs, queue, instances)\n\n**Sections:**\n- Overview/Home\n- Documents\n- Chat/Analysis\n- Queue Status\n- Cost Tracking\n- Settings\n\n### 3. Document Management (/dashboard/documents) ðŸ”¨ TO BUILD\n- Upload zone (drag & drop)\n- Document list with filters\n- Document preview\n- OCR status\n- Context optimization status\n\n### 4. AI Chat Interface (/dashboard/chat) ðŸ”¨ TO BUILD\n- Chat history sidebar\n- Main chat area with streaming\n- Context indicator\n- Cost per message\n- Model selector (GPT-4, Claude, Llama)\n\n### 5. Analysis Queue (/dashboard/queue) ðŸ”¨ TO BUILD\n- Active tasks list\n- Priority indicators\n- Progress bars (0-100%)\n- Task details\n- Cancel/retry actions\n\n### 6. Instance Management (/dashboard/instances) ðŸ”¨ TO BUILD\n- Active instances list\n- Instance details (type, region, cost)\n- Provision new instance\n- Terminate instances\n- Cost tracking\n\n### 7. Cost Dashboard (/dashboard/costs) ðŸ”¨ TO BUILD\n- Total costs overview\n- Cost breakdown by service\n- Cost trends over time\n- Savings visualization\n- Budget alerts\n\n---\n\n## Component Structure\n\n### Core Components\n\n#### 1. Layout Components\n```\ncomponents/layout/\nâ”œâ”€â”€ DashboardLayout.tsx       - Main dashboard wrapper\nâ”œâ”€â”€ Sidebar.tsx               - Navigation sidebar\nâ”œâ”€â”€ Header.tsx                - Top header with user menu\nâ”œâ”€â”€ StatusBar.tsx             - Bottom status bar\nâ””â”€â”€ MobileNav.tsx             - Mobile navigation\n```\n\n#### 2. Service Components\n```\ncomponents/services/\nâ”œâ”€â”€ chatbot/\nâ”‚   â”œâ”€â”€ ChatInterface.tsx     - Main chat UI\nâ”‚   â”œâ”€â”€ MessageList.tsx       - Chat messages\nâ”‚   â”œâ”€â”€ MessageInput.tsx      - Input with streaming\nâ”‚   â”œâ”€â”€ ModelSelector.tsx     - Choose AI model\nâ”‚   â””â”€â”€ CostIndicator.tsx     - Cost per message\nâ”œâ”€â”€ optimizer/\nâ”‚   â”œâ”€â”€ OptimizationStatus.tsx - Optimization progress\nâ”‚   â”œâ”€â”€ StrategySelector.tsx   - Choose strategy\nâ”‚   â””â”€â”€ SavingsDisplay.tsx     - Token savings\nâ”œâ”€â”€ queue/\nâ”‚   â”œâ”€â”€ TaskList.tsx          - Active tasks\nâ”‚   â”œâ”€â”€ TaskCard.tsx          - Individual task\nâ”‚   â”œâ”€â”€ ProgressBar.tsx       - Task progress\nâ”‚   â””â”€â”€ PriorityBadge.tsx     - Priority indicator\nâ””â”€â”€ instances/\n    â”œâ”€â”€ InstanceList.tsx      - Active instances\n    â”œâ”€â”€ InstanceCard.tsx      - Instance details\n    â”œâ”€â”€ ProvisionForm.tsx     - Create instance\n    â””â”€â”€ CostTracker.tsx       - Instance costs\n```\n\n#### 3. Document Components\n```\ncomponents/document/\nâ”œâ”€â”€ UploadZone.tsx âœ…         - Drag & drop upload\nâ”œâ”€â”€ DocumentCard.tsx âœ…       - Document preview\nâ”œâ”€â”€ DocumentList.tsx          - List of documents\nâ”œâ”€â”€ DocumentViewer.tsx        - Full document view\nâ””â”€â”€ OCRStatus.tsx             - OCR progress\n```\n\n#### 4. Shared UI Components\n```\ncomponents/ui/\nâ”œâ”€â”€ button.tsx âœ…\nâ”œâ”€â”€ card.tsx âœ…\nâ”œâ”€â”€ input.tsx\nâ”œâ”€â”€ select.tsx\nâ”œâ”€â”€ dialog.tsx\nâ”œâ”€â”€ badge.tsx\nâ”œâ”€â”€ progress.tsx\nâ”œâ”€â”€ tabs.tsx\nâ”œâ”€â”€ toast.tsx\nâ””â”€â”€ skeleton.tsx\n```\n\n---\n\n## Features to Implement\n\n### Phase 1: Core Dashboard (Priority 1) ðŸ”¨\n- [ ] Dashboard layout with sidebar\n- [ ] Document upload and list\n- [ ] Basic chat interface\n- [ ] Status indicators\n\n### Phase 2: Service Integration (Priority 2) ðŸ”¨\n- [ ] Chat with streaming responses\n- [ ] Context optimization UI\n- [ ] Queue management\n- [ ] Instance provisioning\n\n### Phase 3: Advanced Features (Priority 3) ðŸ”¨\n- [ ] Cost tracking dashboard\n- [ ] Real-time updates (SSE)\n- [ ] Advanced filters\n- [ ] Batch operations\n\n### Phase 4: Polish & Optimization (Priority 4) ðŸ”¨\n- [ ] Loading states\n- [ ] Error handling\n- [ ] Animations\n- [ ] Mobile optimization\n\n---\n\n## API Integration\n\n### Service 1: Chatbot\n```typescript\n// Send message\nPOST /api/chatbot\n{\n  userId: string,\n  conversationId?: string,\n  message: string,\n  model: \'gpt-4\' | \'claude-3.5-sonnet\' | \'llama-3.2-90b\',\n  stream: boolean\n}\n\n// Get conversation\nGET /api/chatbot/conversations/:id\n```\n\n### Service 2: Context Optimizer\n```typescript\n// Optimize content\nPOST /api/context-optimizer\n{\n  userId: string,\n  content: string,\n  contentType: string,\n  strategy: \'AGGRESSIVE\' | \'BALANCED\' | \'CONSERVATIVE\' | \'MINIMAL\'\n}\n\n// Get stats\nGET /api/context-optimizer/stats?userId=xxx\n```\n\n### Service 3: Analysis Queue\n```typescript\n// Create task\nPOST /api/analysis-queue\n{\n  userId: string,\n  type: string,\n  priority: \'URGENT\' | \'HIGH\' | \'NORMAL\' | \'LOW\',\n  data: any\n}\n\n// Get task\nGET /api/analysis-queue/:id\n\n// Update progress\nPATCH /api/analysis-queue/:id/progress\n{\n  progress: number,\n  status: string\n}\n```\n\n### Service 4: Instance Provisioner\n```typescript\n// Provision instance\nPOST /api/instances\n{\n  userId: string,\n  taskId: string,\n  config: {\n    provider: \'AZURE\' | \'AWS\',\n    instanceType: string,\n    region: string,\n    diskSizeGB: number,\n    autoTerminateMinutes: number\n  }\n}\n\n// Get instance\nGET /api/instances/:id\n\n// Terminate\nDELETE /api/instances/:id\n```\n\n---\n\n## State Management\n\n### Context Providers\n```typescript\n// User context\nUserProvider - Current user, auth state\n\n// Chat context\nChatProvider - Active conversations, messages\n\n// Queue context\nQueueProvider - Active tasks, updates\n\n// Instance context\nInstanceProvider - Active instances, costs\n\n// Cost context\nCostProvider - Total costs, breakdown\n```\n\n### SWR Hooks\n```typescript\n// Data fetching\nuseChatConversations()\nuseDocuments()\nuseQueueTasks()\nuseInstances()\nuseCostStats()\n```\n\n---\n\n## Real-time Updates\n\n### Server-Sent Events (SSE)\n```typescript\n// Queue updates\n/api/analysis-queue/stream?userId=xxx\n\n// Instance updates\n/api/instances/stream?userId=xxx\n\n// Cost updates\n/api/costs/stream?userId=xxx\n```\n\n### WebSocket (Future)\n- Real-time chat\n- Live progress updates\n- Collaborative features\n\n---\n\n## Responsive Design\n\n### Breakpoints\n- Mobile: < 640px\n- Tablet: 640px - 1024px\n- Desktop: > 1024px\n\n### Mobile Optimizations\n- Collapsible sidebar\n- Bottom navigation\n- Touch-friendly buttons\n- Swipe gestures\n\n---\n\n## Performance Optimizations\n\n### Code Splitting\n- Route-based splitting\n- Component lazy loading\n- Dynamic imports\n\n### Caching\n- SWR for data fetching\n- Image optimization\n- Static generation where possible\n\n### Bundle Size\n- Tree shaking\n- Minimize dependencies\n- Code splitting\n\n---\n\n## Accessibility\n\n### WCAG 2.1 AA Compliance\n- Keyboard navigation\n- Screen reader support\n- Color contrast\n- Focus indicators\n- ARIA labels\n\n---\n\n## Testing Strategy\n\n### Unit Tests\n- Component rendering\n- User interactions\n- State management\n\n### Integration Tests\n- API integration\n- Real-time updates\n- Error handling\n\n### E2E Tests\n- User flows\n- Critical paths\n- Cross-browser\n\n---\n\n## Implementation Order\n\n### Week 1: Core Dashboard\n1. Dashboard layout\n2. Sidebar navigation\n3. Document upload\n4. Document list\n\n### Week 2: Chat Interface\n1. Chat UI\n2. Message streaming\n3. Model selector\n4. Cost tracking\n\n### Week 3: Queue & Instances\n1. Queue management\n2. Task cards\n3. Instance provisioning\n4. Instance list\n\n### Week 4: Polish & Deploy\n1. Cost dashboard\n2. Real-time updates\n3. Error handling\n4. Testing & deployment\n\n---\n\n## Success Metrics\n\n### Performance\n- First Contentful Paint < 1.5s\n- Time to Interactive < 3s\n- Lighthouse score > 90\n\n### User Experience\n- Task completion rate > 90%\n- Error rate < 1%\n- User satisfaction > 4.5/5\n\n### Business\n- User engagement > 80%\n- Feature adoption > 70%\n- Cost savings visible\n\n---\n\n**Status:** Ready to implement  \n**Next Step:** Build dashboard layout and core components\n</create-file>\n</function_calls>'}