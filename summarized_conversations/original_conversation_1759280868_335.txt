{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="lib/middleware/auth.ts">\n/**\n * Authentication and Authorization Middleware\n * Protects routes and API endpoints based on user roles and permissions\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { getServerSession } from \'next-auth\';\nimport { accessControl } from \'../services/AccessControlService\';\nimport { UserRole, Permission, ResourceType } from \'../types/rbac\';\n\n// ============================================================================\n// SESSION HELPERS\n// ============================================================================\n\n/**\n * Get current user session\n */\nexport async function getCurrentUser(req: NextRequest) {\n  const session = await getServerSession();\n  \n  if (!session || !session.user) {\n    return null;\n  }\n\n  return {\n    id: session.user.id,\n    email: session.user.email,\n    role: session.user.role as UserRole,\n  };\n}\n\n// ============================================================================\n// AUTHENTICATION MIDDLEWARE\n// ============================================================================\n\n/**\n * Require authentication\n */\nexport async function requireAuth(req: NextRequest) {\n  const user = await getCurrentUser(req);\n\n  if (!user) {\n    return NextResponse.json(\n      { error: \'Unauthorized - Authentication required\' },\n      { status: 401 }\n    );\n  }\n\n  return user;\n}\n\n// ============================================================================\n// AUTHORIZATION MIDDLEWARE\n// ============================================================================\n\n/**\n * Require specific role\n */\nexport async function requireRole(req: NextRequest, requiredRole: UserRole) {\n  const user = await requireAuth(req);\n  \n  if (user instanceof NextResponse) {\n    return user; // Return error response\n  }\n\n  if (!accessControl.hasRoleLevel(user.role, requiredRole)) {\n    await accessControl.logAccess(\n      {\n        userId: user.id,\n        role: user.role,\n        permissions: [],\n      },\n      `ACCESS_DENIED_ROLE`,\n      {\n        allowed: false,\n        reason: `Required role: ${requiredRole}, User role: ${user.role}`,\n        requiredRole,\n      },\n      {\n        ipAddress: req.ip,\n        userAgent: req.headers.get(\'user-agent\') || undefined,\n      }\n    );\n\n    return NextResponse.json(\n      {\n        error: \'Forbidden - Insufficient role\',\n        required: requiredRole,\n        current: user.role,\n      },\n      { status: 403 }\n    );\n  }\n\n  return user;\n}\n\n/**\n * Require owner role\n */\nexport async function requireOwner(req: NextRequest) {\n  return requireRole(req, UserRole.OWNER);\n}\n\n/**\n * Require admin or higher\n */\nexport async function requireAdmin(req: NextRequest) {\n  return requireRole(req, UserRole.ADMIN);\n}\n\n/**\n * Require specific permission\n */\nexport async function requirePermission(\n  req: NextRequest,\n  permission: Permission\n) {\n  const user = await requireAuth(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  if (!accessControl.hasPermission(user.role, permission)) {\n    await accessControl.logAccess(\n      {\n        userId: user.id,\n        role: user.role,\n        permissions: [permission],\n      },\n      `ACCESS_DENIED_PERMISSION`,\n      {\n        allowed: false,\n        reason: `Required permission: ${permission}`,\n        requiredPermission: permission,\n      },\n      {\n        ipAddress: req.ip,\n        userAgent: req.headers.get(\'user-agent\') || undefined,\n      }\n    );\n\n    return NextResponse.json(\n      {\n        error: \'Forbidden - Insufficient permissions\',\n        required: permission,\n      },\n      { status: 403 }\n    );\n  }\n\n  return user;\n}\n\n/**\n * Require any of the specified permissions\n */\nexport async function requireAnyPermission(\n  req: NextRequest,\n  permissions: Permission[]\n) {\n  const user = await requireAuth(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  if (!accessControl.hasAnyPermission(user.role, permissions)) {\n    await accessControl.logAccess(\n      {\n        userId: user.id,\n        role: user.role,\n        permissions,\n      },\n      `ACCESS_DENIED_PERMISSIONS`,\n      {\n        allowed: false,\n        reason: `Required one of: ${permissions.join(\', \')}`,\n      },\n      {\n        ipAddress: req.ip,\n        userAgent: req.headers.get(\'user-agent\') || undefined,\n      }\n    );\n\n    return NextResponse.json(\n      {\n        error: \'Forbidden - Insufficient permissions\',\n        required: permissions,\n      },\n      { status: 403 }\n    );\n  }\n\n  return user;\n}\n\n/**\n * Require all of the specified permissions\n */\nexport async function requireAllPermissions(\n  req: NextRequest,\n  permissions: Permission[]\n) {\n  const user = await requireAuth(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  if (!accessControl.hasAllPermissions(user.role, permissions)) {\n    await accessControl.logAccess(\n      {\n        userId: user.id,\n        role: user.role,\n        permissions,\n      },\n      `ACCESS_DENIED_PERMISSIONS`,\n      {\n        allowed: false,\n        reason: `Required all of: ${permissions.join(\', \')}`,\n      },\n      {\n        ipAddress: req.ip,\n        userAgent: req.headers.get(\'user-agent\') || undefined,\n      }\n    );\n\n    return NextResponse.json(\n      {\n        error: \'Forbidden - Insufficient permissions\',\n        required: permissions,\n      },\n      { status: 403 }\n    );\n  }\n\n  return user;\n}\n\n// ============================================================================\n// RESOURCE ACCESS MIDDLEWARE\n// ============================================================================\n\n/**\n * Require resource access\n */\nexport async function requireResourceAccess(\n  req: NextRequest,\n  resourceType: ResourceType,\n  resourceId: string,\n  requiredPermissions: Permission[]\n) {\n  const user = await requireAuth(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  const decision = await accessControl.canAccessResource({\n    userId: user.id,\n    role: user.role,\n    permissions: requiredPermissions,\n    resourceType,\n    resourceId,\n  });\n\n  if (!decision.allowed) {\n    await accessControl.logAccess(\n      {\n        userId: user.id,\n        role: user.role,\n        permissions: requiredPermissions,\n        resourceType,\n        resourceId,\n      },\n      `ACCESS_DENIED_RESOURCE`,\n      decision,\n      {\n        ipAddress: req.ip,\n        userAgent: req.headers.get(\'user-agent\') || undefined,\n      }\n    );\n\n    return NextResponse.json(\n      {\n        error: \'Forbidden - Cannot access resource\',\n        reason: decision.reason,\n      },\n      { status: 403 }\n    );\n  }\n\n  // Log successful access\n  await accessControl.logAccess(\n    {\n      userId: user.id,\n      role: user.role,\n      permissions: requiredPermissions,\n      resourceType,\n      resourceId,\n    },\n    `ACCESS_GRANTED_RESOURCE`,\n    decision,\n    {\n      ipAddress: req.ip,\n      userAgent: req.headers.get(\'user-agent\') || undefined,\n    }\n  );\n\n  return user;\n}\n\n// ============================================================================\n// FINANCIAL DATA PROTECTION\n// ============================================================================\n\n/**\n * Protect financial endpoints (OWNER only)\n */\nexport async function protectFinancialEndpoint(req: NextRequest) {\n  const user = await requireOwner(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  // Log financial data access\n  await accessControl.logAccess(\n    {\n      userId: user.id,\n      role: user.role,\n      permissions: [Permission.VIEW_FINANCIALS],\n      resourceType: ResourceType.FINANCIAL,\n    },\n    \'FINANCIAL_DATA_ACCESS\',\n    { allowed: true, reason: \'Owner accessing financial data\' },\n    {\n      ipAddress: req.ip,\n      userAgent: req.headers.get(\'user-agent\') || undefined,\n    }\n  );\n\n  return user;\n}\n\n/**\n * Protect cost endpoints (OWNER only)\n */\nexport async function protectCostEndpoint(req: NextRequest) {\n  const user = await requireOwner(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  // Log cost data access\n  await accessControl.logAccess(\n    {\n      userId: user.id,\n      role: user.role,\n      permissions: [Permission.VIEW_COSTS],\n      resourceType: ResourceType.COST,\n    },\n    \'COST_DATA_ACCESS\',\n    { allowed: true, reason: \'Owner accessing cost data\' },\n    {\n      ipAddress: req.ip,\n      userAgent: req.headers.get(\'user-agent\') || undefined,\n    }\n  );\n\n  return user;\n}\n\n// ============================================================================\n// ROUTE PROTECTION HELPER\n// ============================================================================\n\n/**\n * Protect route based on path\n */\nexport async function protectRoute(req: NextRequest) {\n  const path = req.nextUrl.pathname;\n\n  // Check if route is protected\n  if (!accessControl.isProtectedRoute(path)) {\n    return null; // Not a protected route\n  }\n\n  const user = await requireAuth(req);\n  \n  if (user instanceof NextResponse) {\n    return user;\n  }\n\n  // Get required permissions for this route\n  const requiredPermissions = accessControl.getRoutePermissions(path);\n\n  // Check if user has required permissions\n  if (requiredPermissions.length > 0) {\n    const hasPermissions = accessControl.hasAllPermissions(\n      user.role,\n      requiredPermissions\n    );\n\n    if (!hasPermissions) {\n      await accessControl.logAccess(\n        {\n          userId: user.id,\n          role: user.role,\n          permissions: requiredPermissions,\n        },\n        `ROUTE_ACCESS_DENIED`,\n        {\n          allowed: false,\n          reason: `Route requires: ${requiredPermissions.join(\', \')}`,\n        },\n        {\n          ipAddress: req.ip,\n          userAgent: req.headers.get(\'user-agent\') || undefined,\n        }\n      );\n\n      return NextResponse.json(\n        {\n          error: \'Forbidden - Insufficient permissions for this route\',\n          required: requiredPermissions,\n        },\n        { status: 403 }\n      );\n    }\n  }\n\n  // Log successful route access\n  await accessControl.logAccess(\n    {\n      userId: user.id,\n      role: user.role,\n      permissions: requiredPermissions,\n    },\n    `ROUTE_ACCESS_GRANTED`,\n    { allowed: true, reason: \'User has required permissions\' },\n    {\n      ipAddress: req.ip,\n      userAgent: req.headers.get(\'user-agent\') || undefined,\n    }\n  );\n\n  return user;\n}\n\n// ============================================================================\n// HELPER FUNCTIONS\n// ============================================================================\n\n/**\n * Create unauthorized response\n */\nexport function unauthorizedResponse(message: string = \'Unauthorized\') {\n  return NextResponse.json(\n    { error: message },\n    { status: 401 }\n  );\n}\n\n/**\n * Create forbidden response\n */\nexport function forbiddenResponse(message: string = \'Forbidden\') {\n  return NextResponse.json(\n    { error: message },\n    { status: 403 }\n  );\n}\n\n/**\n * Create success response with user context\n */\nexport function successResponse(data: any, user: any) {\n  return NextResponse.json({\n    ...data,\n    _meta: {\n      userId: user.id,\n      role: user.role,\n      timestamp: new Date().toISOString(),\n    },\n  });\n}\n</create-file>\n</function_calls>'}