{'role': 'assistant', 'content': 'Now let me create the updated database schema to support the new AI architecture:\n\n<function_calls>\n<create-file file_path="prisma/schema-ai-extensions.prisma">\n// AI Architecture Database Schema Extensions\n// Add these models to your existing schema.prisma file\n\n// ============================================================================\n// CHATBOT CONVERSATIONS\n// ============================================================================\n\nmodel ChatConversation {\n  id        String   @id @default(cuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  title     String?  // Optional conversation title\n  startedAt DateTime @default(now())\n  lastMessageAt DateTime @default(now())\n  \n  messages  ChatMessage[]\n  \n  @@index([userId])\n  @@index([lastMessageAt])\n}\n\nmodel ChatMessage {\n  id             String   @id @default(cuid())\n  conversationId String\n  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)\n  \n  role           String   // \'user\' | \'assistant\' | \'system\'\n  content        String   @db.Text\n  timestamp      DateTime @default(now())\n  \n  // Metadata\n  type           String   @default("quick") // \'quick\' | \'analysis\' | \'notification\'\n  confidence     Float?   // AI confidence score (0-1)\n  \n  // Escalation tracking\n  needsEscalation Boolean @default(false)\n  escalationReason String? @db.Text\n  escalatedToTaskId String? // Reference to AnalysisQueue task\n  \n  // Related entities\n  documentId     String?\n  analysisId     String?\n  \n  metadata       Json?    // Additional metadata\n  \n  @@index([conversationId])\n  @@index([timestamp])\n}\n\n// ============================================================================\n// ANALYSIS QUEUE SYSTEM\n// ============================================================================\n\nmodel AnalysisQueue {\n  id        String   @id @default(cuid())\n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  // Task details\n  type      String   // \'document_analysis\' | \'complex_query\' | \'comparison\' | \'trend_analysis\'\n  priority  Int      @default(3) // 1=URGENT, 2=HIGH, 3=NORMAL, 4=LOW\n  \n  // Content\n  prompt    String   @db.Text\n  documents Json     // Array of document IDs or content\n  \n  // Context analysis\n  totalTokens      Int\n  contextWindow    Int\n  needsSplitting   Boolean @default(false)\n  splitStrategy    String? // \'sequential\' | \'parallel\' | \'hierarchical\'\n  estimatedCost    Float\n  recommendedModel String\n  \n  // Status tracking\n  status    String   @default("queued") // \'queued\' | \'processing\' | \'completed\' | \'failed\'\n  \n  // Timestamps\n  createdAt   DateTime @default(now())\n  startedAt   DateTime?\n  completedAt DateTime?\n  \n  // Results\n  result    Json?\n  error     String?  @db.Text\n  \n  // Instance tracking\n  instanceId String?\n  instance   CloudInstance? @relation(fields: [instanceId], references: [id])\n  \n  // Cost tracking\n  actualCost Float?\n  \n  @@index([userId])\n  @@index([status])\n  @@index([priority, createdAt])\n  @@index([createdAt])\n}\n\n// ============================================================================\n// CLOUD INSTANCE TRACKING\n// ============================================================================\n\nmodel CloudInstance {\n  id           String   @id @default(cuid())\n  \n  // Provider details\n  provider     String   // \'azure\' | \'aws\'\n  region       String\n  instanceType String\n  instanceId   String   @unique // Provider-specific instance ID\n  \n  // Model details\n  model        String   // \'gpt-4-turbo\' | \'claude-3-opus\' | etc.\n  \n  // Status\n  status       String   @default("provisioning") // \'provisioning\' | \'ready\' | \'executing\' | \'deprovisioning\' | \'terminated\'\n  \n  // Timestamps\n  createdAt    DateTime @default(now())\n  readyAt      DateTime?\n  terminatedAt DateTime?\n  \n  // Cost tracking\n  costPerMinute Float\n  totalCost     Float   @default(0)\n  \n  // Relationships\n  tasks        AnalysisQueue[]\n  \n  // Metadata\n  metadata     Json?\n  \n  @@index([status])\n  @@index([createdAt])\n  @@index([provider, region])\n}\n\n// ============================================================================\n// COST TRACKING\n// ============================================================================\n\nmodel InstanceCost {\n  id           String   @id @default(cuid())\n  \n  // Instance details\n  instanceId   String\n  provider     String\n  instanceType String\n  model        String\n  \n  // Time tracking\n  createdAt    DateTime\n  terminatedAt DateTime\n  duration     Float    // minutes\n  \n  // Cost\n  costPerMinute Float\n  totalCost     Float\n  \n  // Usage details\n  tasksCompleted Int    @default(0)\n  tokensProcessed Int   @default(0)\n  \n  // Metadata\n  metadata     Json?\n  \n  @@index([createdAt])\n  @@index([provider])\n  @@index([model])\n}\n\nmodel ChatbotCost {\n  id        String   @id @default(cuid())\n  \n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  // Interaction details\n  messageId String\n  timestamp DateTime @default(now())\n  \n  // Token usage\n  inputTokens  Int\n  outputTokens Int\n  totalTokens  Int\n  \n  // Cost\n  cost      Float\n  \n  // Model used\n  model     String   @default("gpt-3.5-turbo")\n  \n  @@index([userId])\n  @@index([timestamp])\n}\n\nmodel AnalysisCost {\n  id        String   @id @default(cuid())\n  \n  userId    String\n  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)\n  \n  // Analysis details\n  taskId    String\n  timestamp DateTime @default(now())\n  \n  // Token usage\n  inputTokens  Int\n  outputTokens Int\n  totalTokens  Int\n  \n  // Cost breakdown\n  modelCost      Float  // Cost of LLM inference\n  infrastructureCost Float  // Cost of cloud instance\n  totalCost      Float\n  \n  // Model and instance used\n  model        String\n  instanceType String?\n  \n  // Duration\n  duration     Float  // minutes\n  \n  @@index([userId])\n  @@index([timestamp])\n}\n\n// ============================================================================\n// CONTEXT OPTIMIZATION\n// ============================================================================\n\nmodel PromptOptimization {\n  id        String   @id @default(cuid())\n  \n  // Original prompt\n  originalPrompt String @db.Text\n  originalTokens Int\n  \n  // Optimized prompt\n  optimizedPrompt String @db.Text\n  optimizedTokens Int\n  \n  // Optimization details\n  strategy       String  // \'compression\' | \'splitting\' | \'summarization\'\n  tokenReduction Int     // Number of tokens saved\n  reductionPercent Float // Percentage reduction\n  \n  // Performance\n  executionTime  Float?  // seconds\n  successRate    Float?  // 0-1\n  \n  // Timestamps\n  createdAt DateTime @default(now())\n  \n  // Metadata\n  metadata  Json?\n  \n  @@index([createdAt])\n}\n\nmodel PromptSplit {\n  id        String   @id @default(cuid())\n  \n  taskId    String   // Reference to AnalysisQueue task\n  \n  // Split details\n  splitId   String   // Unique ID for this split\n  content   String   @db.Text\n  tokens    Int\n  order     Int\n  \n  // Dependencies\n  dependencies Json   // Array of split IDs this depends on\n  \n  // Status\n  status    String   @default("pending") // \'pending\' | \'processing\' | \'completed\' | \'failed\'\n  \n  // Result\n  result    Json?\n  error     String?  @db.Text\n  \n  // Timestamps\n  createdAt   DateTime @default(now())\n  completedAt DateTime?\n  \n  @@index([taskId])\n  @@index([order])\n}\n\n// ============================================================================\n// MODEL PERFORMANCE TRACKING\n// ============================================================================\n\nmodel ModelPerformance {\n  id        String   @id @default(cuid())\n  \n  // Model details\n  model     String\n  provider  String\n  \n  // Performance metrics\n  avgResponseTime Float  // seconds\n  avgTokensPerSecond Float\n  successRate Float      // 0-1\n  errorRate   Float      // 0-1\n  \n  // Cost metrics\n  avgCostPerRequest Float\n  avgCostPerToken   Float\n  \n  // Usage stats\n  totalRequests Int\n  totalTokens   Int\n  totalCost     Float\n  \n  // Time period\n  periodStart DateTime\n  periodEnd   DateTime\n  \n  // Metadata\n  metadata    Json?\n  \n  @@index([model])\n  @@index([periodStart])\n}\n\n// ============================================================================\n// SYSTEM HEALTH MONITORING\n// ============================================================================\n\nmodel SystemHealth {\n  id        String   @id @default(cuid())\n  \n  // Component\n  component String   // \'chatbot\' | \'queue\' | \'provisioner\' | \'database\' | etc.\n  \n  // Status\n  status    String   // \'healthy\' | \'degraded\' | \'down\'\n  \n  // Metrics\n  responseTime Float? // milliseconds\n  errorRate    Float? // 0-1\n  throughput   Float? // requests per second\n  \n  // Resource usage\n  cpuUsage    Float?  // 0-100\n  memoryUsage Float?  // 0-100\n  diskUsage   Float?  // 0-100\n  \n  // Timestamp\n  timestamp DateTime @default(now())\n  \n  // Details\n  message   String?  @db.Text\n  metadata  Json?\n  \n  @@index([component])\n  @@index([timestamp])\n  @@index([status])\n}\n\n// ============================================================================\n// UPDATES TO EXISTING MODELS\n// ============================================================================\n\n// Add these relations to your existing User model:\n// chatConversations ChatConversation[]\n// analysisQueue     AnalysisQueue[]\n// chatbotCosts      ChatbotCost[]\n// analysisCosts     AnalysisCost[]\n</create-file>\n</function_calls>'}