{'role': 'assistant', 'content': 'Now let\'s create the API endpoint for the development chat:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/dev-chat/route.ts">\n/**\n * AI Development Chat API Endpoint\n * \n * Backend interface for AI-powered development assistance.\n * Supports multiple AI providers (OpenAI, Claude) with easy switching.\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { AIDevChatService, DevChatRequest } from \'@/lib/services/AIDevChatService\';\nimport { initializeProvidersFromEnv } from \'@/lib/providers/ProviderManager\';\n\n// Initialize providers on module load\ninitializeProvidersFromEnv();\n\n// Initialize dev chat service\nconst devChatService = new AIDevChatService();\n\n/**\n * POST /api/dev-chat\n * Send a message to the AI development assistant\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body: DevChatRequest = await request.json();\n\n    // Validate request\n    if (!body.userId) {\n      return NextResponse.json(\n        { error: \'User ID is required\' },\n        { status: 400 }\n      );\n    }\n\n    if (!body.message || body.message.trim().length === 0) {\n      return NextResponse.json(\n        { error: \'Message is required\' },\n        { status: 400 }\n      );\n    }\n\n    // Check if streaming is requested\n    const stream = request.headers.get(\'accept\') === \'text/event-stream\';\n\n    if (stream) {\n      // Return streaming response\n      const encoder = new TextEncoder();\n      const stream = new ReadableStream({\n        async start(controller) {\n          try {\n            for await (const chunk of devChatService.streamChat(body)) {\n              const data = `data: ${JSON.stringify({ content: chunk })}\\n\\n`;\n              controller.enqueue(encoder.encode(data));\n            }\n            controller.enqueue(encoder.encode(\'data: [DONE]\\n\\n\'));\n            controller.close();\n          } catch (error: any) {\n            const errorData = `data: ${JSON.stringify({ error: error.message })}\\n\\n`;\n            controller.enqueue(encoder.encode(errorData));\n            controller.close();\n          }\n        }\n      });\n\n      return new Response(stream, {\n        headers: {\n          \'Content-Type\': \'text/event-stream\',\n          \'Cache-Control\': \'no-cache\',\n          \'Connection\': \'keep-alive\'\n        }\n      });\n    }\n\n    // Regular response\n    const response = await devChatService.chat(body);\n\n    return NextResponse.json(response, { status: 200 });\n  } catch (error: any) {\n    console.error(\'Dev chat API error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/dev-chat?conversationId=xxx\n * Get conversation history or list conversations\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const conversationId = searchParams.get(\'conversationId\');\n    const userId = searchParams.get(\'userId\');\n\n    if (conversationId) {\n      // Get specific conversation\n      const conversation = await devChatService.getConversationHistory(conversationId);\n      \n      if (!conversation) {\n        return NextResponse.json(\n          { error: \'Conversation not found\' },\n          { status: 404 }\n        );\n      }\n\n      return NextResponse.json(conversation, { status: 200 });\n    } else if (userId) {\n      // Get all conversations for user\n      const conversations = await devChatService.getUserConversations(userId);\n      return NextResponse.json(conversations, { status: 200 });\n    } else {\n      return NextResponse.json(\n        { error: \'conversationId or userId is required\' },\n        { status: 400 }\n      );\n    }\n  } catch (error: any) {\n    console.error(\'Dev chat GET error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/dev-chat?conversationId=xxx\n * Delete a conversation\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const conversationId = searchParams.get(\'conversationId\');\n\n    if (!conversationId) {\n      return NextResponse.json(\n        { error: \'conversationId is required\' },\n        { status: 400 }\n      );\n    }\n\n    await devChatService.deleteConversation(conversationId);\n\n    return NextResponse.json(\n      { message: \'Conversation deleted successfully\' },\n      { status: 200 }\n    );\n  } catch (error: any) {\n    console.error(\'Dev chat DELETE error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}