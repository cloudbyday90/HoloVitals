{'role': 'user', 'content': '<tool_result> <execute-command> ToolResult(success=True, output=\'{\\n  "output": "   // HoloVitals Complete Database Schema\\\\n   // Includes: Base platform + AI Architecture + All Repository Systems\\\\n   \\\\n   generator client {\\\\n     provider = \\\\"prisma-client-js\\\\"\\\\n   }\\\\n   \\\\n   datasource db {\\\\n     provider          = \\\\"postgresql\\\\"\\\\n     url               = env(\\\\"DATABASE_URL\\\\")\\\\n     shadowDatabaseUrl = env(\\\\"SHADOW_DATABASE_URL\\\\")\\\\n   }\\\\n   \\\\n   // ============================================================================\\\\n   // USER MANAGEMENT & AUTHENTICATION\\\\n   // ============================================================================\\\\n   \\\\n   model User {\\\\n     id                    String    @id @default(uuid())\\\\n     email                 String    @unique\\\\n     passwordHash          String    @map(\\\\"password_hash\\\\")\\\\n     role                  String    @default(\\\\"PATIENT\\\\") // OWNER, ADMIN, DOCTOR, PATIENT, SUPPORT, ANALYST\\\\n     mfaEnabled            Boolean   @default(false) @map(\\\\"mfa_enabled\\\\")\\\\n     mfaSecret             String?   @map(\\\\"mfa_secret\\\\")\\\\n     mfaBackupCodes        String?   @map(\\\\"mfa_backup_codes\\\\")\\\\n     failedLoginAttempts   Int       @default(0) @map(\\\\"failed_login_attempts\\\\")\\\\n     lastFailedLogin       DateTime? @map(\\\\"last_failed_login\\\\")\\\\n     createdAt             DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     updatedAt             DateTime  @updatedAt @map(\\\\"updated_at\\\\")\\\\n     \\\\n     patients              Patient[]\\\\n     documents             Document[]\\\\n     analysisSessions      AnalysisSession[]\\\\n     sessions              UserSession[]\\\\n     consentRequestsAsPatient ConsentGrant[] @relation(\\\\"PatientConsents\\\\")\\\\n     consentRequestsAsSpecialist ConsentGrant[] @relation(\\\\"SpecialistConsents\\\\")\\\\n     auditLogs             AuditLog[]\\\\n     accessLogs            AccessLog[]\\\\n     errorLogs             ErrorLog[]\\\\n     notifications         Notification[]\\\\n     \\\\n     // AI Architecture Relations\\\\n     chatConversations     ChatConversation[]\\\\n     analysisQueue         AnalysisQueue[]\\\\n     chatbotCosts          ChatbotCost[]\\\\n     analysisCosts         AnalysisCost[]\\\\n     contextOptimizations  ContextOptimization[]\\\\n     analysisTasks         AnalysisTask[]\\\\n       cloudInstances        CloudInstance[]\\\\n     \\\\n     @@map(\\\\"users\\\\")\\\\n   }\\\\n   \\\\n   model Patient {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     firstName     String?   @map(\\\\"first_name\\\\")\\\\n     lastName      String?   @map(\\\\"last_name\\\\")\\\\n     dateOfBirth   DateTime? @map(\\\\"date_of_birth\\\\")\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     documents     Document[]\\\\n     analysisSessions AnalysisSession[]\\\\n     \\\\n     @@map(\\\\"patients\\\\")\\\\n   }\\\\n   \\\\n   // ============================================================================\\\\n   // DOCUMENT MANAGEMENT\\\\n   // ============================================================================\\\\n   \\\\n   model Document {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     patientId     String?   @map(\\\\"patient_id\\\\")\\\\n     filePath      String    @map(\\\\"file_path\\\\")\\\\n     fileName      String    @map(\\\\"file_name\\\\")\\\\n     fileSize      Int?      @map(\\\\"file_size\\\\")\\\\n     mimeType      String?   @map(\\\\"mime_type\\\\")\\\\n     documentType  String?   @map(\\\\"document_type\\\\")\\\\n     uploadDate    DateTime  @default(now()) @map(\\\\"upload_date\\\\")\\\\n     documentDate  DateTime? @map(\\\\"document_date\\\\")\\\\n     status        String    @default(\\\\"pending\\\\")\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     updatedAt     DateTime  @updatedAt @map(\\\\"updated_at\\\\")\\\\n     \\\\n     user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\\\\n     ocrResults    OcrResult[]\\\\n     extractedData ExtractedData[]\\\\n     sourceLinks   DocumentLink[] @relation(\\\\"SourceDocument\\\\")\\\\n     targetLinks   DocumentLink[] @relation(\\\\"TargetDocument\\\\")\\\\n     embeddings    DocumentEmbedding[]\\\\n     \\\\n     @@map(\\\\"documents\\\\")\\\\n   }\\\\n   \\\\n   model OcrResult {\\\\n     id              String    @id @default(uuid())\\\\n",\\n  "exit_code": 0,\\n  "cwd": "/workspace"\\n}\') </execute-command> </tool_result>'}