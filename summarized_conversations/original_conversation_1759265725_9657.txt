{'role': 'assistant', 'content': 'Now let\'s create an API endpoint for managing providers:\n\n<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/dev-chat/providers/route.ts">\n/**\n * AI Provider Management API\n * \n * Manage AI providers, switch between them, and configure settings.\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { getProviderManager } from \'@/lib/providers/ProviderManager\';\nimport { AIProviderConfig } from \'@/lib/types/ai-provider\';\n\n/**\n * GET /api/dev-chat/providers\n * List all available providers\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const providerManager = getProviderManager();\n    const providers = providerManager.listProviders();\n    const activeProvider = providerManager.getActiveProviderInfo();\n\n    return NextResponse.json({\n      providers,\n      activeProvider\n    }, { status: 200 });\n  } catch (error: any) {\n    console.error(\'Provider list error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * POST /api/dev-chat/providers\n * Register a new provider or switch active provider\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n    const providerManager = getProviderManager();\n\n    // Check if this is a switch request\n    if (body.action === \'switch\' && body.providerName) {\n      providerManager.switchProvider(body.providerName);\n      \n      return NextResponse.json({\n        message: \'Provider switched successfully\',\n        activeProvider: providerManager.getActiveProviderInfo()\n      }, { status: 200 });\n    }\n\n    // Check if this is a register request\n    if (body.action === \'register\' && body.name && body.config) {\n      const config: AIProviderConfig = body.config;\n      \n      // Validate config\n      if (!config.provider || !config.apiKey || !config.model) {\n        return NextResponse.json(\n          { error: \'Invalid provider configuration\' },\n          { status: 400 }\n        );\n      }\n\n      providerManager.registerProvider(body.name, config);\n      \n      return NextResponse.json({\n        message: \'Provider registered successfully\',\n        provider: providerManager.getProviderInfo(body.name)\n      }, { status: 201 });\n    }\n\n    return NextResponse.json(\n      { error: \'Invalid action. Use "switch" or "register"\' },\n      { status: 400 }\n    );\n  } catch (error: any) {\n    console.error(\'Provider management error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * PATCH /api/dev-chat/providers?name=xxx\n * Update provider configuration\n */\nexport async function PATCH(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const name = searchParams.get(\'name\');\n\n    if (!name) {\n      return NextResponse.json(\n        { error: \'Provider name is required\' },\n        { status: 400 }\n      );\n    }\n\n    const body = await request.json();\n    const providerManager = getProviderManager();\n\n    providerManager.updateProviderConfig(name, body);\n\n    return NextResponse.json({\n      message: \'Provider configuration updated\',\n      provider: providerManager.getProviderInfo(name)\n    }, { status: 200 });\n  } catch (error: any) {\n    console.error(\'Provider update error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * DELETE /api/dev-chat/providers?name=xxx\n * Remove a provider\n */\nexport async function DELETE(request: NextRequest) {\n  try {\n    const searchParams = request.nextUrl.searchParams;\n    const name = searchParams.get(\'name\');\n\n    if (!name) {\n      return NextResponse.json(\n        { error: \'Provider name is required\' },\n        { status: 400 }\n      );\n    }\n\n    const providerManager = getProviderManager();\n    providerManager.removeProvider(name);\n\n    return NextResponse.json({\n      message: \'Provider removed successfully\'\n    }, { status: 200 });\n  } catch (error: any) {\n    console.error(\'Provider removal error:\', error);\n    return NextResponse.json(\n      { error: error.message || \'Internal server error\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}