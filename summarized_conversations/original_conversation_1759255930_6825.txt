{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="docs/EMERGENCY_RUNBOOKS.md">\n# Emergency Runbooks - HoloVitals\n\n## Overview\n\nThis document contains detailed runbooks for responding to critical incidents and system outages. Each runbook provides step-by-step procedures for diagnosis, resolution, and recovery.\n\n---\n\n## Table of Contents\n\n1. [Complete System Outage](#1-complete-system-outage)\n2. [Database Connection Failure](#2-database-connection-failure)\n3. [AI Service Unavailable](#3-ai-service-unavailable)\n4. [Authentication System Down](#4-authentication-system-down)\n5. [Data Corruption Detected](#5-data-corruption-detected)\n6. [Security Breach Response](#6-security-breach-response)\n7. [HIPAA Compliance Violation](#7-hipaa-compliance-violation)\n8. [Performance Degradation](#8-performance-degradation)\n\n---\n\n## 1. Complete System Outage\n\n**Severity:** SEV1 - CRITICAL  \n**Response Time:** Immediate  \n**Escalation:** CTO, Technical Lead, On-call Engineer\n\n### Detection Criteria\n- All API endpoints returning 5xx errors\n- Health checks failing across all services\n- User reports of complete inability to access system\n- Monitoring alerts showing 0% availability\n\n### Immediate Actions (First 5 Minutes)\n\n1. **Acknowledge Incident**\n   ```bash\n   # Create incident\n   curl -X POST https://api.holovitals.com/incidents \\\n     -H "Authorization: Bearer $TOKEN" \\\n     -d \'{\n       "severity": "SEV1",\n       "title": "Complete System Outage",\n       "description": "All services unavailable",\n       "detectedBy": "monitoring"\n     }\'\n   ```\n\n2. **Notify Team**\n   - Page on-call engineer (SMS + Phone)\n   - Alert technical lead (SMS + Slack)\n   - Notify CTO (SMS)\n   - Post in #incidents Slack channel\n\n3. **Check System Status**\n   ```bash\n   # Check overall system health\n   curl https://api.holovitals.com/health/system\n   \n   # Check individual services\n   curl https://api.holovitals.com/health/services\n   ```\n\n### Diagnosis Steps (5-10 Minutes)\n\n1. **Check Infrastructure**\n   ```bash\n   # Check server status\n   ssh admin@production-server\n   systemctl status holovitals-api\n   systemctl status holovitals-worker\n   \n   # Check resource usage\n   top\n   df -h\n   free -m\n   ```\n\n2. **Check Database**\n   ```bash\n   # Test database connection\n   psql -h db.holovitals.com -U admin -d holovitals -c "SELECT 1;"\n   \n   # Check database status\n   pg_isready -h db.holovitals.com\n   ```\n\n3. **Check Recent Changes**\n   ```bash\n   # Get recent deployments\n   curl https://api.holovitals.com/deployments?limit=5\n   \n   # Get recent changes\n   curl https://api.holovitals.com/changes?status=COMPLETED&limit=5\n   ```\n\n4. **Review Error Logs**\n   ```bash\n   # Check application logs\n   tail -n 100 /var/log/holovitals/app.log\n   \n   # Check system logs\n   journalctl -u holovitals-api -n 100\n   ```\n\n### Resolution Procedures\n\n#### Option 1: Emergency Rollback (Fastest - 2 minutes)\n\n```bash\n# Trigger emergency rollback via API\ncurl -X POST https://api.holovitals.com/recovery/emergency-rollback \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{\n    "triggeredBy": "oncall-engineer",\n    "reason": "Complete system outage - rolling back to last known good state"\n  }\'\n\n# Monitor rollback progress\ncurl https://api.holovitals.com/recovery/status\n```\n\n#### Option 2: Service Restart (If rollback unavailable - 5 minutes)\n\n```bash\n# Restart all services\nssh admin@production-server\nsudo systemctl restart holovitals-api\nsudo systemctl restart holovitals-worker\nsudo systemctl restart holovitals-scheduler\n\n# Verify services started\nsystemctl status holovitals-*\n\n# Check health\ncurl https://api.holovitals.com/health\n```\n\n#### Option 3: Full System Restore (Last resort - 15 minutes)\n\n```bash\n# Get latest snapshot\ncurl https://api.holovitals.com/snapshots?environment=PRODUCTION&limit=1\n\n# Trigger full restore\ncurl -X POST https://api.holovitals.com/recovery/restore \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{\n    "snapshotId": "snapshot_id_here",\n    "type": "FULL_RESTORE",\n    "triggeredBy": "oncall-engineer",\n    "triggerReason": "Complete system outage - full restore required",\n    "isEmergency": true\n  }\'\n\n# Monitor restore progress\nwatch -n 5 \'curl https://api.holovitals.com/recovery/status\'\n```\n\n### Validation Steps\n\n1. **Verify System Health**\n   ```bash\n   # Check all services\n   curl https://api.holovitals.com/health/system\n   \n   # Expected: {"status": "HEALTHY", "services": [...]}\n   ```\n\n2. **Test Critical Endpoints**\n   ```bash\n   # Test authentication\n   curl -X POST https://api.holovitals.com/auth/login \\\n     -d \'{"email": "test@example.com", "password": "test"}\'\n   \n   # Test patient data access\n   curl https://api.holovitals.com/patients/test-patient-id \\\n     -H "Authorization: Bearer $TOKEN"\n   \n   # Test AI analysis\n   curl https://api.holovitals.com/ai/analyze \\\n     -H "Authorization: Bearer $TOKEN" \\\n     -d \'{"documentId": "test-doc-id"}\'\n   ```\n\n3. **Monitor for 30 Minutes**\n   ```bash\n   # Watch error rates\n   watch -n 10 \'curl https://api.holovitals.com/metrics/errors\'\n   \n   # Watch response times\n   watch -n 10 \'curl https://api.holovitals.com/metrics/performance\'\n   ```\n\n### Communication Plan\n\n**Internal Communication:**\n- Update #incidents channel every 5 minutes\n- Update incident ticket with progress\n- Notify team when resolved\n\n**External Communication:**\n- Update status page: "Investigating major outage"\n- After 15 minutes: "We are experiencing a system-wide outage. Our team is working to restore service."\n- When resolved: "Service has been restored. We apologize for the inconvenience."\n\n### Post-Incident Actions\n\n1. **Document Timeline**\n   - Time of detection\n   - Time of acknowledgment\n   - Actions taken\n   - Time of resolution\n   - Total downtime\n\n2. **Create Post-Mortem**\n   - Root cause analysis\n   - Timeline of events\n   - What went well\n   - What could be improved\n   - Action items\n\n3. **Update Runbook**\n   - Add any new learnings\n   - Update procedures if needed\n   - Add preventive measures\n\n---\n\n## 2. Database Connection Failure\n\n**Severity:** SEV1 - CRITICAL  \n**Response Time:** Immediate  \n**Escalation:** Database Admin, Technical Lead\n\n### Detection Criteria\n- Database connection errors in logs\n- "Cannot connect to database" errors\n- Connection pool exhausted\n- Timeout errors on database queries\n\n### Immediate Actions\n\n1. **Check Database Status**\n   ```bash\n   # Test connection\n   psql -h db.holovitals.com -U admin -d holovitals -c "SELECT 1;"\n   \n   # Check if database is running\n   pg_isready -h db.holovitals.com\n   ```\n\n2. **Check Connection Pool**\n   ```bash\n   # Check active connections\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT count(*) FROM pg_stat_activity;"\n   \n   # Check max connections\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SHOW max_connections;"\n   ```\n\n### Resolution Procedures\n\n#### If Database is Down:\n\n```bash\n# Restart database\nssh admin@db-server\nsudo systemctl restart postgresql\n\n# Verify startup\nsudo systemctl status postgresql\n```\n\n#### If Connection Pool Exhausted:\n\n```bash\n# Increase connection pool size\n# Edit application config\nvim /etc/holovitals/config.yml\n\n# Update:\ndatabase:\n  pool_size: 50  # Increase from 20\n  \n# Restart application\nsudo systemctl restart holovitals-api\n```\n\n#### If Network Issue:\n\n```bash\n# Check network connectivity\nping db.holovitals.com\n\n# Check firewall rules\nsudo iptables -L\n\n# Test port connectivity\ntelnet db.holovitals.com 5432\n```\n\n### Validation\n\n```bash\n# Test database queries\npsql -h db.holovitals.com -U admin -d holovitals -c \\\n  "SELECT * FROM users LIMIT 1;"\n\n# Check application logs\ntail -f /var/log/holovitals/app.log | grep "database"\n```\n\n---\n\n## 3. AI Service Unavailable\n\n**Severity:** SEV2 - HIGH  \n**Response Time:** < 15 minutes  \n**Escalation:** AI Team Lead\n\n### Detection Criteria\n- AI analysis requests timing out\n- OpenAI API errors\n- AI service health check failing\n- Document analysis failures\n\n### Immediate Actions\n\n1. **Check AI Service Status**\n   ```bash\n   # Check service health\n   curl https://api.holovitals.com/health/ai-service\n   \n   # Check OpenAI API status\n   curl https://status.openai.com/api/v2/status.json\n   ```\n\n2. **Check API Keys**\n   ```bash\n   # Verify API key is set\n   echo $OPENAI_API_KEY\n   \n   # Test API key\n   curl https://api.openai.com/v1/models \\\n     -H "Authorization: Bearer $OPENAI_API_KEY"\n   ```\n\n### Resolution Procedures\n\n#### If OpenAI API is Down:\n\n```bash\n# Switch to fallback AI service\n# Update configuration\ncurl -X POST https://api.holovitals.com/config/ai \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{\n    "provider": "fallback",\n    "enabled": true\n  }\'\n```\n\n#### If Rate Limited:\n\n```bash\n# Check rate limit status\ncurl https://api.openai.com/v1/usage \\\n  -H "Authorization: Bearer $OPENAI_API_KEY"\n\n# Implement request queuing\ncurl -X POST https://api.holovitals.com/config/ai \\\n  -d \'{\n    "rate_limit": {\n      "enabled": true,\n      "requests_per_minute": 50\n    }\n  }\'\n```\n\n#### If Service Crashed:\n\n```bash\n# Restart AI service\nssh admin@production-server\nsudo systemctl restart holovitals-ai-worker\n\n# Check logs\njournalctl -u holovitals-ai-worker -n 100\n```\n\n### Validation\n\n```bash\n# Test AI analysis\ncurl -X POST https://api.holovitals.com/ai/analyze \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{\n    "documentId": "test-doc-id",\n    "analysisType": "medical"\n  }\'\n```\n\n---\n\n## 4. Authentication System Down\n\n**Severity:** SEV1 - CRITICAL  \n**Response Time:** Immediate  \n**Escalation:** Security Team, Technical Lead\n\n### Detection Criteria\n- Users cannot log in\n- Authentication API returning errors\n- JWT validation failures\n- MFA service unavailable\n\n### Immediate Actions\n\n1. **Check Auth Service**\n   ```bash\n   # Check service status\n   curl https://api.holovitals.com/health/auth\n   \n   # Test login endpoint\n   curl -X POST https://api.holovitals.com/auth/login \\\n     -d \'{"email": "test@example.com", "password": "test"}\'\n   ```\n\n2. **Check Dependencies**\n   ```bash\n   # Check database connection\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT * FROM users LIMIT 1;"\n   \n   # Check Redis (session store)\n   redis-cli -h cache.holovitals.com ping\n   ```\n\n### Resolution Procedures\n\n#### If Service Crashed:\n\n```bash\n# Restart auth service\nsudo systemctl restart holovitals-auth\n\n# Check logs\njournalctl -u holovitals-auth -n 100\n```\n\n#### If Database Issue:\n\n```bash\n# Check users table\npsql -h db.holovitals.com -U admin -d holovitals -c \\\n  "SELECT count(*) FROM users;"\n\n# Rebuild indexes if needed\npsql -h db.holovitals.com -U admin -d holovitals -c \\\n  "REINDEX TABLE users;"\n```\n\n#### If Session Store Issue:\n\n```bash\n# Restart Redis\nssh admin@cache-server\nsudo systemctl restart redis\n\n# Clear corrupted sessions\nredis-cli -h cache.holovitals.com FLUSHDB\n```\n\n### Validation\n\n```bash\n# Test full authentication flow\n# 1. Login\nTOKEN=$(curl -X POST https://api.holovitals.com/auth/login \\\n  -d \'{"email": "test@example.com", "password": "test"}\' \\\n  | jq -r \'.token\')\n\n# 2. Verify token\ncurl https://api.holovitals.com/auth/verify \\\n  -H "Authorization: Bearer $TOKEN"\n\n# 3. Test MFA\ncurl -X POST https://api.holovitals.com/auth/mfa/verify \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{"code": "123456"}\'\n```\n\n---\n\n## 5. Data Corruption Detected\n\n**Severity:** SEV1 - CRITICAL  \n**Response Time:** Immediate  \n**Escalation:** CTO, Compliance Officer, Database Admin\n\n### Detection Criteria\n- Data integrity checks failing\n- Inconsistent data across tables\n- Foreign key violations\n- Checksum mismatches\n\n### Immediate Actions\n\n1. **Stop All Write Operations**\n   ```bash\n   # Enable read-only mode\n   curl -X POST https://api.holovitals.com/config/maintenance \\\n     -H "Authorization: Bearer $TOKEN" \\\n     -d \'{\n       "mode": "read_only",\n       "reason": "Data corruption investigation"\n     }\'\n   ```\n\n2. **Create Emergency Snapshot**\n   ```bash\n   # Snapshot current state\n   curl -X POST https://api.holovitals.com/snapshots \\\n     -H "Authorization: Bearer $TOKEN" \\\n     -d \'{\n       "type": "FULL_SYSTEM",\n       "name": "Emergency - Data Corruption",\n       "reason": "Preserve state before corruption fix"\n     }\'\n   ```\n\n3. **Assess Damage**\n   ```bash\n   # Run integrity checks\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT * FROM check_data_integrity();"\n   \n   # Check affected tables\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT tablename FROM pg_tables WHERE schemaname = \'public\';"\n   ```\n\n### Resolution Procedures\n\n#### If Recent Corruption:\n\n```bash\n# Restore from latest snapshot\ncurl -X POST https://api.holovitals.com/recovery/restore \\\n  -H "Authorization: Bearer $TOKEN" \\\n  -d \'{\n    "snapshotId": "latest_good_snapshot_id",\n    "type": "DATABASE_RESTORE",\n    "triggeredBy": "dba",\n    "triggerReason": "Data corruption - restoring to last known good state"\n  }\'\n```\n\n#### If Specific Table Corrupted:\n\n```bash\n# Restore specific table\npg_restore -h db.holovitals.com -U admin -d holovitals \\\n  -t affected_table /backups/latest.dump\n\n# Rebuild indexes\npsql -h db.holovitals.com -U admin -d holovitals -c \\\n  "REINDEX TABLE affected_table;"\n```\n\n### Validation\n\n```bash\n# Run full integrity check\npsql -h db.holovitals.com -U admin -d holovitals -c \\\n  "SELECT * FROM check_data_integrity();"\n\n# Verify data consistency\npsql -h db.holovitals.com -U admin -d holovitals -c \\\n  "SELECT * FROM verify_referential_integrity();"\n```\n\n### Post-Incident\n\n1. **Notify Compliance**\n   - Document affected data\n   - Identify affected patients\n   - Prepare breach notification if needed\n\n2. **Root Cause Analysis**\n   - Identify corruption source\n   - Implement preventive measures\n   - Update data validation\n\n---\n\n## 6. Security Breach Response\n\n**Severity:** SEV1 - CRITICAL  \n**Response Time:** Immediate  \n**Escalation:** CISO, CTO, Legal, Compliance\n\n### Detection Criteria\n- Unauthorized access detected\n- Suspicious activity patterns\n- Security alerts triggered\n- Data exfiltration detected\n\n### Immediate Actions\n\n1. **Contain Breach**\n   ```bash\n   # Block suspicious IPs\n   curl -X POST https://api.holovitals.com/security/block-ip \\\n     -H "Authorization: Bearer $TOKEN" \\\n     -d \'{\n       "ips": ["suspicious.ip.address"],\n       "reason": "Security breach containment"\n     }\'\n   \n   # Revoke all active sessions\n   curl -X POST https://api.holovitals.com/auth/revoke-all-sessions \\\n     -H "Authorization: Bearer $TOKEN"\n   ```\n\n2. **Preserve Evidence**\n   ```bash\n   # Create forensic snapshot\n   curl -X POST https://api.holovitals.com/snapshots \\\n     -d \'{\n       "type": "FULL_SYSTEM",\n       "name": "Forensic - Security Breach",\n       "reason": "Preserve evidence for investigation"\n     }\'\n   \n   # Export access logs\n   curl https://api.holovitals.com/logs/access?format=json > access_logs.json\n   ```\n\n3. **Notify Authorities**\n   - Contact CISO immediately\n   - Notify legal team\n   - Contact law enforcement if needed\n   - Prepare for HIPAA breach notification\n\n### Investigation Steps\n\n1. **Identify Breach Scope**\n   ```bash\n   # Check access logs\n   grep "suspicious_ip" /var/log/holovitals/access.log\n   \n   # Check affected accounts\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT * FROM access_logs WHERE ip = \'suspicious_ip\';"\n   ```\n\n2. **Assess Data Exposure**\n   ```bash\n   # Check accessed resources\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT DISTINCT resource_id FROM access_logs \n      WHERE ip = \'suspicious_ip\' AND action = \'READ\';"\n   ```\n\n### Resolution\n\n1. **Patch Vulnerability**\n2. **Reset Credentials**\n3. **Implement Additional Security**\n4. **Monitor for Continued Activity**\n\n---\n\n## 7. HIPAA Compliance Violation\n\n**Severity:** SEV1 - CRITICAL  \n**Response Time:** Immediate  \n**Escalation:** Compliance Officer, Legal, CTO\n\n### Detection Criteria\n- Unauthorized PHI access\n- PHI transmitted insecurely\n- Audit log tampering\n- Consent violations\n\n### Immediate Actions\n\n1. **Stop Violation**\n2. **Document Incident**\n3. **Notify Compliance Officer**\n4. **Preserve Evidence**\n\n### Investigation\n\n1. **Identify Affected Patients**\n2. **Assess Breach Scope**\n3. **Determine Notification Requirements**\n\n### Resolution\n\n1. **Implement Corrective Measures**\n2. **Notify Affected Individuals (if required)**\n3. **Report to HHS (if required)**\n4. **Update Policies and Procedures**\n\n---\n\n## 8. Performance Degradation\n\n**Severity:** SEV2 - HIGH  \n**Response Time:** < 15 minutes  \n**Escalation:** Performance Team\n\n### Detection Criteria\n- Response times > 2 seconds\n- High CPU/memory usage\n- Database query slowdowns\n- User complaints\n\n### Immediate Actions\n\n1. **Identify Bottleneck**\n   ```bash\n   # Check system resources\n   top\n   \n   # Check database performance\n   psql -h db.holovitals.com -U admin -d holovitals -c \\\n     "SELECT * FROM pg_stat_activity WHERE state = \'active\';"\n   ```\n\n2. **Quick Fixes**\n   ```bash\n   # Clear cache\n   redis-cli -h cache.holovitals.com FLUSHALL\n   \n   # Restart workers\n   sudo systemctl restart holovitals-worker\n   ```\n\n### Resolution\n\n1. **Optimize Queries**\n2. **Scale Resources**\n3. **Implement Caching**\n4. **Load Balance**\n\n---\n\n## Emergency Contacts\n\n- **On-Call Engineer:** +1-XXX-XXX-XXXX\n- **Technical Lead:** +1-XXX-XXX-XXXX\n- **CTO:** +1-XXX-XXX-XXXX\n- **CISO:** +1-XXX-XXX-XXXX\n- **Compliance Officer:** +1-XXX-XXX-XXXX\n\n## Escalation Matrix\n\n| Severity | Response Time | Escalation Path |\n|----------|--------------|-----------------|\n| SEV1 | Immediate | On-call → Tech Lead → CTO |\n| SEV2 | < 15 min | On-call → Tech Lead |\n| SEV3 | < 1 hour | On-call |\n| SEV4 | < 4 hours | Team Lead |\n\n---\n\n**Last Updated:** 2025-01-15  \n**Version:** 1.0  \n**Owner:** DevOps Team\n</create-file>\n</function_calls>'}