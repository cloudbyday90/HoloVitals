{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="app/api/instances/route.ts">\n/**\n * Instance Provisioner API Routes\n * \n * Endpoints:\n * - POST /api/instances - Provision new instance\n * - GET /api/instances - List instances\n * - GET /api/instances/stats - Get statistics\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport InstanceProvisionerService, {\n  CloudProvider,\n  InstanceType,\n  InstanceStatus,\n  ProvisionRequest\n} from \'@/lib/services/InstanceProvisionerService\';\n\nconst service = InstanceProvisionerService.getInstance();\n\n/**\n * POST /api/instances\n * Provision a new cloud instance\n */\nexport async function POST(request: NextRequest) {\n  try {\n    const body = await request.json();\n\n    // Validate required fields\n    if (!body.userId) {\n      return NextResponse.json(\n        { error: \'userId is required\' },\n        { status: 400 }\n      );\n    }\n\n    if (!body.taskId) {\n      return NextResponse.json(\n        { error: \'taskId is required\' },\n        { status: 400 }\n      );\n    }\n\n    if (!body.config) {\n      return NextResponse.json(\n        { error: \'config is required\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate config\n    const { provider, instanceType, region, diskSizeGB, autoTerminateMinutes } = body.config;\n\n    if (!Object.values(CloudProvider).includes(provider)) {\n      return NextResponse.json(\n        { error: \'Invalid provider\' },\n        { status: 400 }\n      );\n    }\n\n    if (!Object.values(InstanceType).includes(instanceType)) {\n      return NextResponse.json(\n        { error: \'Invalid instance type\' },\n        { status: 400 }\n      );\n    }\n\n    if (!region) {\n      return NextResponse.json(\n        { error: \'region is required\' },\n        { status: 400 }\n      );\n    }\n\n    if (!diskSizeGB || diskSizeGB < 30) {\n      return NextResponse.json(\n        { error: \'diskSizeGB must be at least 30\' },\n        { status: 400 }\n      );\n    }\n\n    if (!autoTerminateMinutes || autoTerminateMinutes < 5) {\n      return NextResponse.json(\n        { error: \'autoTerminateMinutes must be at least 5\' },\n        { status: 400 }\n      );\n    }\n\n    // Create provision request\n    const provisionRequest: ProvisionRequest = {\n      userId: body.userId,\n      taskId: body.taskId,\n      config: {\n        provider,\n        instanceType,\n        region,\n        diskSizeGB,\n        autoTerminateMinutes,\n        tags: body.config.tags\n      },\n      purpose: body.purpose || \'AI Analysis\'\n    };\n\n    // Provision instance\n    const instance = await service.provisionInstance(provisionRequest);\n\n    return NextResponse.json({\n      success: true,\n      instance\n    });\n  } catch (error) {\n    console.error(\'Error provisioning instance:\', error);\n    return NextResponse.json(\n      { \n        error: \'Failed to provision instance\',\n        details: error instanceof Error ? error.message : \'Unknown error\'\n      },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * GET /api/instances\n * List instances for a user\n * \n * Query params:\n * - userId: User ID (required)\n * - status: Filter by status (optional)\n */\nexport async function GET(request: NextRequest) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const userId = searchParams.get(\'userId\');\n    const status = searchParams.get(\'status\') as InstanceStatus | null;\n\n    if (!userId) {\n      return NextResponse.json(\n        { error: \'userId is required\' },\n        { status: 400 }\n      );\n    }\n\n    // Validate status if provided\n    if (status && !Object.values(InstanceStatus).includes(status)) {\n      return NextResponse.json(\n        { error: \'Invalid status\' },\n        { status: 400 }\n      );\n    }\n\n    const instances = await service.listInstances(userId, status || undefined);\n\n    return NextResponse.json({\n      success: true,\n      instances,\n      count: instances.length\n    });\n  } catch (error) {\n    console.error(\'Error listing instances:\', error);\n    return NextResponse.json(\n      { \n        error: \'Failed to list instances\',\n        details: error instanceof Error ? error.message : \'Unknown error\'\n      },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}