{'role': 'assistant', 'content': '<function_calls>\n<full-file-rewrite file_path="medical-analysis-platform/README.md">\n# Medical Document Analysis Platform\n\nA sophisticated medical document analysis platform that uses OCR and AI to process medical documents (after-care summaries, bloodwork panels, imaging results) and provides intelligent analysis by cross-referencing existing documents and maintaining context.\n\n## Features\n\n### 🔍 Advanced OCR Processing\n- Extract text from PDFs and images\n- Identify document types automatically\n- Parse structured data (test results, dates, values)\n- Support for multiple medical document formats\n\n### 🤖 AI-Powered Analysis\n- Natural language queries about medical documents\n- Context-aware responses using document history\n- Cross-referencing between related documents\n- Trend analysis across multiple test results\n\n### 📊 Context Management\n- Maintain patient document timeline\n- Automatic document linking\n- Historical data preservation\n- Smart document categorization\n\n### 🔒 Security & Privacy\n- Secure file storage\n- Data encryption\n- HIPAA-compliant practices\n- Access control and audit logging\n\n## Technology Stack\n\n### Frontend\n- **Next.js 14+** - React framework with App Router\n- **TypeScript** - Type-safe development\n- **Tailwind CSS** - Utility-first styling\n- **Radix UI** - Accessible component primitives\n- **Lucide React** - Icon library\n\n### Backend\n- **Next.js API Routes** - Serverless API endpoints\n- **Prisma** - Type-safe database ORM\n- **PostgreSQL** - Relational database\n- **OpenAI API** - AI analysis capabilities\n\n### Document Processing\n- **pdf-parse** - PDF text extraction\n- **Tesseract.js** - OCR for images\n- **LangChain** - AI context management\n\n## Getting Started\n\n### Prerequisites\n- Node.js 18+ \n- PostgreSQL database\n- OpenAI API key\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd medical-analysis-platform\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Set up environment variables:\n```bash\ncp .env.example .env\n```\n\nEdit `.env` and add your configuration:\n- `DATABASE_URL` - PostgreSQL connection string\n- `OPENAI_API_KEY` - Your OpenAI API key\n\n4. Set up the database:\n```bash\nnpx prisma generate\nnpx prisma db push\n```\n\n5. Run the development server:\n```bash\nnpm run dev\n```\n\n6. Open [http://localhost:3000](http://localhost:3000) in your browser.\n\n## Project Structure\n\n```\nmedical-analysis-platform/\n├── app/                          # Next.js app directory\n│   ├── api/                      # API routes\n│   │   ├── documents/            # Document management endpoints\n│   │   └── analyze/              # Analysis endpoints\n│   ├── dashboard/                # Dashboard pages\n│   │   └── analyze/[id]/         # Document analysis page\n│   ├── page.tsx                  # Landing page\n│   └── layout.tsx                # Root layout\n├── components/                   # React components\n│   ├── ui/                       # Base UI components\n│   ├── document/                 # Document-related components\n│   └── analysis/                 # Analysis components\n├── lib/                          # Utility libraries\n│   ├── services/                 # Business logic services\n│   │   ├── ocr.service.ts        # OCR processing\n│   │   ├── ai.service.ts         # AI analysis\n│   │   └── context.service.ts    # Context management\n│   ├── types/                    # TypeScript type definitions\n│   └── utils/                    # Utility functions\n├── prisma/                       # Database schema and migrations\n│   └── schema.prisma             # Prisma schema\n└── public/                       # Static assets\n```\n\n## Key Components\n\n### OCR Service (`lib/services/ocr.service.ts`)\nHandles document text extraction and structured data parsing:\n- PDF text extraction\n- Image OCR processing\n- Document type classification\n- Bloodwork result parsing\n- Date and key-value extraction\n\n### AI Service (`lib/services/ai.service.ts`)\nManages AI-powered analysis:\n- Context-aware query processing\n- Trend analysis\n- Insight generation\n- Cross-document referencing\n\n### Context Builder (`lib/services/context.service.ts`)\nMaintains document context:\n- Related document discovery\n- Historical data retrieval\n- Temporal relationship mapping\n- Semantic similarity search\n\n## Database Schema\n\nThe platform uses PostgreSQL with the following main tables:\n\n- **users** - User accounts\n- **patients** - Patient profiles\n- **documents** - Uploaded documents\n- **ocr_results** - Extracted text from documents\n- **extracted_data** - Structured data from documents\n- **document_links** - Relationships between documents\n- **analysis_sessions** - AI analysis sessions\n- **ai_interactions** - Query/response history\n- **document_embeddings** - Vector embeddings for semantic search\n\n## API Endpoints\n\n### Document Management\n- `POST /api/documents/upload` - Upload a new document\n- `GET /api/documents` - List user\'s documents\n- `GET /api/documents/[id]` - Get document details\n- `DELETE /api/documents/[id]` - Delete a document\n\n### Analysis\n- `POST /api/analyze` - Analyze a document with AI\n- `POST /api/analyze/trends` - Generate trend analysis\n- `GET /api/analyze/insights` - Get patient insights\n\n## Usage Examples\n\n### Uploading a Document\n```typescript\nconst formData = new FormData();\nformData.append(\'file\', file);\n\nconst response = await fetch(\'/api/documents/upload\', {\n  method: \'POST\',\n  body: formData\n});\n\nconst result = await response.json();\n```\n\n### Analyzing a Document\n```typescript\nconst response = await fetch(\'/api/analyze\', {\n  method: \'POST\',\n  headers: { \'Content-Type\': \'application/json\' },\n  body: JSON.stringify({\n    documentId: \'doc-id\',\n    query: \'What are the abnormal values?\',\n    userId: \'user-id\'\n  })\n});\n\nconst analysis = await response.json();\n```\n\n## Development\n\n### Running Tests\n```bash\nnpm test\n```\n\n### Building for Production\n```bash\nnpm run build\nnpm start\n```\n\n### Database Migrations\n```bash\nnpx prisma migrate dev --name migration_name\n```\n\n## Security Considerations\n\n1. **Data Encryption**: All sensitive data is encrypted at rest and in transit\n2. **Access Control**: Role-based access control for documents\n3. **HIPAA Compliance**: Following HIPAA guidelines for PHI handling\n4. **Audit Logging**: All access and modifications are logged\n5. **Secure Storage**: Files stored with encryption and access controls\n\n## Medical Disclaimer\n\n⚠️ **Important**: This platform is for informational purposes only and should not replace professional medical advice, diagnosis, or treatment. Always consult with qualified healthcare providers for medical decisions.\n\n## Contributing\n\nContributions are welcome! Please read our contributing guidelines before submitting pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Support\n\nFor support, please open an issue in the GitHub repository or contact the development team.\n\n## Roadmap\n\n### Phase 1 (Current)\n- ✅ Basic document upload and storage\n- ✅ OCR text extraction\n- ✅ Document viewer\n- ✅ AI query interface\n- ✅ Context management\n\n### Phase 2 (Planned)\n- [ ] User authentication and authorization\n- [ ] Advanced trend visualization\n- [ ] Multi-patient support\n- [ ] Document version history\n- [ ] Export and sharing features\n\n### Phase 3 (Future)\n- [ ] Mobile application\n- [ ] Real-time collaboration\n- [ ] Integration with EHR systems\n- [ ] Advanced predictive analytics\n- [ ] Telemedicine integration\n\n## Acknowledgments\n\n- Built with Next.js and React\n- Powered by OpenAI GPT-4\n- OCR by Tesseract.js\n- UI components by Radix UI\n</full-file-rewrite>\n</function_calls>'}