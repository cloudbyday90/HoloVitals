{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/lib/consent/ConsentManagementService.ts">\n/**\n * Consent Management Service for HoloVitals\n * \n * Manages patient consent for specialist access to PHI/PII data.\n * Features:\n * - Explicit patient consent required\n * - Time-based access (expires automatically)\n * - Granular permissions (read-only, specific data types)\n * - Audit logging of all access\n * - Revocation capability\n * - No data export allowed\n */\n\nimport { PrismaClient } from \'@prisma/client\';\nimport { auditLogger } from \'../audit/AuditLogger\';\n\nconst prisma = new PrismaClient();\n\nexport interface ConsentRequest {\n  patientId: string;\n  specialistId: string;\n  reason: string;\n  requestedPermissions: Permission[];\n  requestedDuration: number; // in hours\n  urgency: \'routine\' | \'urgent\' | \'emergency\';\n}\n\nexport interface ConsentGrant {\n  id: string;\n  patientId: string;\n  specialistId: string;\n  permissions: Permission[];\n  reason: string;\n  grantedAt: Date;\n  expiresAt: Date;\n  status: ConsentStatus;\n  restrictions: AccessRestriction[];\n}\n\nexport type ConsentStatus = \n  | \'pending\'      // Awaiting patient approval\n  | \'approved\'     // Patient approved\n  | \'active\'       // Currently active\n  | \'expired\'      // Time expired\n  | \'revoked\'      // Patient revoked\n  | \'denied\';      // Patient denied\n\nexport interface Permission {\n  resource: ResourceType;\n  action: Action;\n  scope?: string; // Optional: specific document IDs, date ranges, etc.\n}\n\nexport type ResourceType = \n  | \'documents\'\n  | \'test_results\'\n  | \'medications\'\n  | \'allergies\'\n  | \'conditions\'\n  | \'imaging\'\n  | \'clinical_notes\'\n  | \'all_phi\'; // Full PHI access\n\nexport type Action = \n  | \'read\'         // View only\n  | \'annotate\'     // Add notes/comments\n  | \'correct\';     // Fix data errors\n\nexport interface AccessRestriction {\n  type: RestrictionType;\n  value: any;\n  description: string;\n}\n\nexport type RestrictionType = \n  | \'no_export\'           // Cannot export data\n  | \'no_copy\'             // Cannot copy data\n  | \'no_print\'            // Cannot print\n  | \'session_only\'        // Access only during active session\n  | \'ip_restricted\'       // Specific IP addresses only\n  | \'device_restricted\'   // Specific devices only\n  | \'view_only\';          // Read-only, no modifications\n\nexport interface AccessLog {\n  id: string;\n  consentId: string;\n  specialistId: string;\n  action: string;\n  resource: string;\n  timestamp: Date;\n  ipAddress?: string;\n  userAgent?: string;\n  success: boolean;\n  details?: any;\n}\n\nexport interface ConsentNotification {\n  patientId: string;\n  type: \'request\' | \'expiring\' | \'expired\' | \'accessed\';\n  message: string;\n  timestamp: Date;\n  requiresAction: boolean;\n}\n\nexport class ConsentManagementService {\n  private readonly MAX_CONSENT_DURATION = 72; // 72 hours maximum\n  private readonly WARNING_BEFORE_EXPIRY = 2; // 2 hours warning\n\n  /**\n   * Request consent from patient\n   */\n  async requestConsent(request: ConsentRequest): Promise<string> {\n    // Validate request\n    this.validateConsentRequest(request);\n\n    // Check if specialist exists and is verified\n    await this.verifySpecialist(request.specialistId);\n\n    // Calculate expiration\n    const expiresAt = new Date(Date.now() + request.requestedDuration * 60 * 60 * 1000);\n\n    // Create consent request\n    const consentId = this.generateConsentId();\n    \n    await prisma.$executeRaw`\n      INSERT INTO consent_grants (\n        id, patient_id, specialist_id, permissions, reason, \n        requested_duration, urgency, status, expires_at, created_at\n      ) VALUES (\n        ${consentId}, ${request.patientId}, ${request.specialistId},\n        ${JSON.stringify(request.requestedPermissions)}, ${request.reason},\n        ${request.requestedDuration}, ${request.urgency}, \'pending\',\n        ${expiresAt}, NOW()\n      )\n    `;\n\n    // Log the request\n    await auditLogger.log({\n      userId: request.specialistId,\n      action: \'consent_requested\',\n      resource: \'patient_data\',\n      resourceId: request.patientId,\n      details: {\n        consentId,\n        permissions: request.requestedPermissions,\n        reason: request.reason,\n        duration: request.requestedDuration\n      },\n      severity: \'medium\'\n    });\n\n    // Notify patient\n    await this.notifyPatient({\n      patientId: request.patientId,\n      type: \'request\',\n      message: `Specialist has requested access to your medical data. Reason: ${request.reason}`,\n      timestamp: new Date(),\n      requiresAction: true\n    });\n\n    return consentId;\n  }\n\n  /**\n   * Patient approves consent request\n   */\n  async approveConsent(\n    consentId: string, \n    patientId: string,\n    customRestrictions?: AccessRestriction[]\n  ): Promise<ConsentGrant> {\n    // Get consent request\n    const consent = await this.getConsent(consentId);\n\n    if (!consent) {\n      throw new Error(\'Consent request not found\');\n    }\n\n    if (consent.patientId !== patientId) {\n      throw new Error(\'Unauthorized: Not your consent request\');\n    }\n\n    if (consent.status !== \'pending\') {\n      throw new Error(\'Consent request is not pending\');\n    }\n\n    // Default restrictions (always applied)\n    const defaultRestrictions: AccessRestriction[] = [\n      {\n        type: \'no_export\',\n        value: true,\n        description: \'Data cannot be exported from the system\'\n      },\n      {\n        type: \'no_copy\',\n        value: true,\n        description: \'Data cannot be copied to clipboard\'\n      },\n      {\n        type: \'session_only\',\n        value: true,\n        description: \'Access only during active session\'\n      }\n    ];\n\n    const allRestrictions = [...defaultRestrictions, ...(customRestrictions || [])];\n\n    // Update consent\n    await prisma.$executeRaw`\n      UPDATE consent_grants \n      SET status = \'approved\',\n          granted_at = NOW(),\n          restrictions = ${JSON.stringify(allRestrictions)},\n          updated_at = NOW()\n      WHERE id = ${consentId}\n    `;\n\n    // Log approval\n    await auditLogger.log({\n      userId: patientId,\n      action: \'consent_approved\',\n      resource: \'consent_grant\',\n      resourceId: consentId,\n      details: {\n        specialistId: consent.specialistId,\n        permissions: consent.permissions,\n        restrictions: allRestrictions\n      },\n      severity: \'high\'\n    });\n\n    // Notify specialist\n    await this.notifySpecialist(consent.specialistId, {\n      type: \'approved\',\n      message: \'Patient has approved your access request\',\n      consentId\n    });\n\n    return await this.getConsent(consentId) as ConsentGrant;\n  }\n\n  /**\n   * Patient denies consent request\n   */\n  async denyConsent(consentId: string, patientId: string, reason?: string): Promise<void> {\n    const consent = await this.getConsent(consentId);\n\n    if (!consent) {\n      throw new Error(\'Consent request not found\');\n    }\n\n    if (consent.patientId !== patientId) {\n      throw new Error(\'Unauthorized: Not your consent request\');\n    }\n\n    if (consent.status !== \'pending\') {\n      throw new Error(\'Consent request is not pending\');\n    }\n\n    // Update consent\n    await prisma.$executeRaw`\n      UPDATE consent_grants \n      SET status = \'denied\',\n          denial_reason = ${reason},\n          updated_at = NOW()\n      WHERE id = ${consentId}\n    `;\n\n    // Log denial\n    await auditLogger.log({\n      userId: patientId,\n      action: \'consent_denied\',\n      resource: \'consent_grant\',\n      resourceId: consentId,\n      details: {\n        specialistId: consent.specialistId,\n        reason\n      },\n      severity: \'medium\'\n    });\n\n    // Notify specialist\n    await this.notifySpecialist(consent.specialistId, {\n      type: \'denied\',\n      message: \'Patient has denied your access request\',\n      consentId\n    });\n  }\n\n  /**\n   * Patient revokes active consent\n   */\n  async revokeConsent(consentId: string, patientId: string, reason?: string): Promise<void> {\n    const consent = await this.getConsent(consentId);\n\n    if (!consent) {\n      throw new Error(\'Consent not found\');\n    }\n\n    if (consent.patientId !== patientId) {\n      throw new Error(\'Unauthorized: Not your consent\');\n    }\n\n    if (consent.status !== \'approved\' && consent.status !== \'active\') {\n      throw new Error(\'Consent is not active\');\n    }\n\n    // Revoke consent\n    await prisma.$executeRaw`\n      UPDATE consent_grants \n      SET status = \'revoked\',\n          revoked_at = NOW(),\n          revocation_reason = ${reason},\n          updated_at = NOW()\n      WHERE id = ${consentId}\n    `;\n\n    // Log revocation\n    await auditLogger.log({\n      userId: patientId,\n      action: \'consent_revoked\',\n      resource: \'consent_grant\',\n      resourceId: consentId,\n      details: {\n        specialistId: consent.specialistId,\n        reason\n      },\n      severity: \'high\'\n    });\n\n    // Terminate any active sessions\n    await this.terminateSpecialistSessions(consent.specialistId, patientId);\n\n    // Notify specialist\n    await this.notifySpecialist(consent.specialistId, {\n      type: \'revoked\',\n      message: \'Patient has revoked your access\',\n      consentId\n    });\n  }\n\n  /**\n   * Check if specialist has permission to access resource\n   */\n  async checkPermission(\n    specialistId: string,\n    patientId: string,\n    resource: ResourceType,\n    action: Action\n  ): Promise<boolean> {\n    // Get active consents\n    const consents = await this.getActiveConsents(specialistId, patientId);\n\n    if (consents.length === 0) {\n      return false;\n    }\n\n    // Check if any consent grants the required permission\n    for (const consent of consents) {\n      for (const permission of consent.permissions) {\n        if (\n          (permission.resource === resource || permission.resource === \'all_phi\') &&\n          (permission.action === action || permission.action === \'read\' && action === \'read\')\n        ) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Log access to patient data\n   */\n  async logAccess(\n    consentId: string,\n    specialistId: string,\n    action: string,\n    resource: string,\n    ipAddress?: string,\n    userAgent?: string,\n    details?: any\n  ): Promise<void> {\n    const accessLogId = this.generateAccessLogId();\n\n    await prisma.$executeRaw`\n      INSERT INTO access_logs (\n        id, consent_id, specialist_id, action, resource,\n        ip_address, user_agent, details, timestamp, success\n      ) VALUES (\n        ${accessLogId}, ${consentId}, ${specialistId}, ${action}, ${resource},\n        ${ipAddress}, ${userAgent}, ${JSON.stringify(details)}, NOW(), true\n      )\n    `;\n\n    // Also log to audit system\n    await auditLogger.log({\n      userId: specialistId,\n      action: `specialist_${action}`,\n      resource,\n      resourceId: consentId,\n      details: {\n        consentId,\n        ipAddress,\n        userAgent,\n        ...details\n      },\n      severity: \'high\',\n      requiresReview: true\n    });\n\n    // Update consent last accessed\n    await prisma.$executeRaw`\n      UPDATE consent_grants \n      SET last_accessed = NOW(),\n          access_count = access_count + 1,\n          status = \'active\'\n      WHERE id = ${consentId}\n    `;\n  }\n\n  /**\n   * Get all consents for a patient\n   */\n  async getPatientConsents(patientId: string): Promise<ConsentGrant[]> {\n    const results = await prisma.$queryRaw<any[]>`\n      SELECT * FROM consent_grants \n      WHERE patient_id = ${patientId}\n      ORDER BY created_at DESC\n    `;\n\n    return results.map(this.mapToConsentGrant);\n  }\n\n  /**\n   * Get active consents for specialist accessing patient data\n   */\n  async getActiveConsents(specialistId: string, patientId: string): Promise<ConsentGrant[]> {\n    const results = await prisma.$queryRaw<any[]>`\n      SELECT * FROM consent_grants \n      WHERE specialist_id = ${specialistId}\n        AND patient_id = ${patientId}\n        AND status IN (\'approved\', \'active\')\n        AND expires_at > NOW()\n    `;\n\n    return results.map(this.mapToConsentGrant);\n  }\n\n  /**\n   * Get consent by ID\n   */\n  async getConsent(consentId: string): Promise<ConsentGrant | null> {\n    const results = await prisma.$queryRaw<any[]>`\n      SELECT * FROM consent_grants WHERE id = ${consentId}\n    `;\n\n    if (!results || results.length === 0) {\n      return null;\n    }\n\n    return this.mapToConsentGrant(results[0]);\n  }\n\n  /**\n   * Get access logs for a consent\n   */\n  async getAccessLogs(consentId: string): Promise<AccessLog[]> {\n    const results = await prisma.$queryRaw<any[]>`\n      SELECT * FROM access_logs \n      WHERE consent_id = ${consentId}\n      ORDER BY timestamp DESC\n    `;\n\n    return results.map(log => ({\n      id: log.id,\n      consentId: log.consent_id,\n      specialistId: log.specialist_id,\n      action: log.action,\n      resource: log.resource,\n      timestamp: log.timestamp,\n      ipAddress: log.ip_address,\n      userAgent: log.user_agent,\n      success: log.success,\n      details: log.details ? JSON.parse(log.details) : null\n    }));\n  }\n\n  /**\n   * Check and expire old consents\n   */\n  async expireOldConsents(): Promise<number> {\n    const result = await prisma.$executeRaw`\n      UPDATE consent_grants \n      SET status = \'expired\',\n          updated_at = NOW()\n      WHERE status IN (\'approved\', \'active\')\n        AND expires_at < NOW()\n    `;\n\n    // Notify patients of expired consents\n    const expiredConsents = await prisma.$queryRaw<any[]>`\n      SELECT patient_id, id FROM consent_grants \n      WHERE status = \'expired\' \n        AND updated_at > NOW() - INTERVAL \'1 minute\'\n    `;\n\n    for (const consent of expiredConsents) {\n      await this.notifyPatient({\n        patientId: consent.patient_id,\n        type: \'expired\',\n        message: \'Specialist access to your data has expired\',\n        timestamp: new Date(),\n        requiresAction: false\n      });\n    }\n\n    return result as unknown as number;\n  }\n\n  /**\n   * Send expiration warnings\n   */\n  async sendExpirationWarnings(): Promise<void> {\n    const warningTime = new Date(Date.now() + this.WARNING_BEFORE_EXPIRY * 60 * 60 * 1000);\n\n    const expiringConsents = await prisma.$queryRaw<any[]>`\n      SELECT * FROM consent_grants \n      WHERE status IN (\'approved\', \'active\')\n        AND expires_at < ${warningTime}\n        AND expires_at > NOW()\n        AND expiration_warning_sent = false\n    `;\n\n    for (const consent of expiringConsents) {\n      await this.notifyPatient({\n        patientId: consent.patient_id,\n        type: \'expiring\',\n        message: `Specialist access will expire in ${this.WARNING_BEFORE_EXPIRY} hours`,\n        timestamp: new Date(),\n        requiresAction: false\n      });\n\n      // Mark warning as sent\n      await prisma.$executeRaw`\n        UPDATE consent_grants \n        SET expiration_warning_sent = true\n        WHERE id = ${consent.id}\n      `;\n    }\n  }\n\n  // Private helper methods\n\n  private validateConsentRequest(request: ConsentRequest): void {\n    if (request.requestedDuration > this.MAX_CONSENT_DURATION) {\n      throw new Error(`Maximum consent duration is ${this.MAX_CONSENT_DURATION} hours`);\n    }\n\n    if (request.requestedDuration < 1) {\n      throw new Error(\'Minimum consent duration is 1 hour\');\n    }\n\n    if (!request.reason || request.reason.trim().length < 10) {\n      throw new Error(\'Detailed reason is required (minimum 10 characters)\');\n    }\n\n    if (!request.requestedPermissions || request.requestedPermissions.length === 0) {\n      throw new Error(\'At least one permission must be requested\');\n    }\n  }\n\n  private async verifySpecialist(specialistId: string): Promise<void> {\n    // In production, verify specialist credentials, license, etc.\n    const specialist = await prisma.user.findUnique({\n      where: { id: specialistId }\n    });\n\n    if (!specialist) {\n      throw new Error(\'Specialist not found\');\n    }\n\n    // Additional verification logic here\n  }\n\n  private async terminateSpecialistSessions(specialistId: string, patientId: string): Promise<void> {\n    // Terminate any active sessions where specialist is viewing patient data\n    await prisma.$executeRaw`\n      DELETE FROM user_sessions \n      WHERE user_id = ${specialistId}\n        AND session_data LIKE ${`%${patientId}%`}\n    `;\n  }\n\n  private async notifyPatient(notification: ConsentNotification): Promise<void> {\n    // In production, send email, SMS, push notification, etc.\n    console.log(`[ConsentManagement] Notifying patient ${notification.patientId}:`, notification.message);\n    \n    // Store notification in database\n    await prisma.$executeRaw`\n      INSERT INTO notifications (patient_id, type, message, requires_action, created_at)\n      VALUES (${notification.patientId}, ${notification.type}, ${notification.message}, \n              ${notification.requiresAction}, NOW())\n    `;\n  }\n\n  private async notifySpecialist(specialistId: string, notification: any): Promise<void> {\n    // In production, send notification to specialist\n    console.log(`[ConsentManagement] Notifying specialist ${specialistId}:`, notification.message);\n  }\n\n  private generateConsentId(): string {\n    return `consent_${Date.now()}_${Math.random().toString(36).substr(2, 12)}`;\n  }\n\n  private generateAccessLogId(): string {\n    return `access_${Date.now()}_${Math.random().toString(36).substr(2, 12)}`;\n  }\n\n  private mapToConsentGrant(row: any): ConsentGrant {\n    return {\n      id: row.id,\n      patientId: row.patient_id,\n      specialistId: row.specialist_id,\n      permissions: JSON.parse(row.permissions),\n      reason: row.reason,\n      grantedAt: row.granted_at,\n      expiresAt: row.expires_at,\n      status: row.status,\n      restrictions: row.restrictions ? JSON.parse(row.restrictions) : []\n    };\n  }\n}\n\nexport const consentManagementService = new ConsentManagementService();\n</create-file>\n</function_calls>'}