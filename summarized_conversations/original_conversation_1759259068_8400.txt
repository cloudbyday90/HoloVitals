{'role': 'assistant', 'content': 'Now let me create a quick reference guide for the development team:\n\n<function_calls>\n<create-file file_path="docs/QUICK_START_GUIDE.md">\n# HoloVitals UI & AI Architecture - Quick Start Guide\n\n## For Developers\n\nThis guide provides a quick overview of the new UI and AI architecture to get you started quickly.\n\n## Architecture at a Glance\n\n### The Big Picture\n\n```\nUser → Simple UI → Lightweight Chatbot (fast) → [If needed] → Queue → Ephemeral Instance → Heavy Analysis\n                                                                              ↓\n                                                                         Result → User\n```\n\n### Two-Tier AI System\n\n**Tier 1: Lightweight Chatbot**\n- Always running\n- GPT-3.5 Turbo\n- <2 second responses\n- Handles 80% of queries\n- Cost: $0.002 per interaction\n\n**Tier 2: Heavy Analysis**\n- On-demand only\n- GPT-4 Turbo / Claude 3 / Llama 3\n- 5-30 minute responses\n- Handles complex analysis\n- Cost: $0.50-$5.00 per analysis\n\n### Key Innovation: Ephemeral Instances\n\nInstead of keeping expensive GPU instances running 24/7:\n1. Spin up instance when analysis needed (2-3 min)\n2. Run analysis (5-25 min)\n3. Terminate instance (<1 min)\n4. **Result: 90% cost savings + HIPAA compliance**\n\n## UI Design Philosophy\n\n### Open Design (Not Closed Ecosystem)\n\n**What we DON\'T have:**\n- ❌ Complex sidebar navigation\n- ❌ Multiple nested menus\n- ❌ Cluttered dashboards\n- ❌ Feature overload\n\n**What we DO have:**\n- ✅ Simple top navigation (Logo, Chat, Upload, Profile)\n- ✅ AI-first interaction\n- ✅ Clean, minimal interface\n- ✅ Progressive disclosure\n\n### Core Screens\n\n1. **Dashboard** - Landing page with chat interface\n2. **Chat** - Always-accessible AI assistant\n3. **Upload** - Document upload section\n4. **Settings** - Minimal settings\n\nThat\'s it. Simple.\n\n## Key Files & Services\n\n### Services to Implement\n\n```\nservices/\n├── LightweightChatbotService.ts    # Tier 1 AI (always on)\n├── ContextOptimizerService.ts      # Smart prompt splitting\n├── AnalysisQueueService.ts         # Task queue management\n└── InstanceProvisionerService.ts   # Ephemeral instance lifecycle\n```\n\n### UI Components to Build\n\n```\ncomponents/\n├── Dashboard.tsx                   # Main landing page\n├── ChatInterface.tsx               # AI chat component\n├── OnboardingFlow.tsx              # 4-step onboarding\n├── DocumentUpload.tsx              # Upload interface\n└── Settings.tsx                    # User settings\n```\n\n### API Routes to Create\n\n```\napp/api/\n├── chat/route.ts                   # Chatbot endpoint\n├── upload/route.ts                 # Document upload\n├── analysis/route.ts               # Analysis queue\n└── profile/route.ts                # User profile\n```\n\n## Database Schema\n\n### New Tables (Add to schema.prisma)\n\n```prisma\n// Core tables\nChatConversation      // User chat sessions\nChatMessage           // Individual messages\nAnalysisQueue         // Analysis task queue\nCloudInstance         // Instance tracking\n\n// Cost tracking\nInstanceCost          // Instance costs\nChatbotCost           // Chatbot costs\nAnalysisCost          // Analysis costs\n\n// Optimization\nPromptOptimization    // Prompt optimization\nPromptSplit           // Split prompts\nModelPerformance      // Model metrics\nSystemHealth          // Health monitoring\n```\n\nSee `prisma/schema-ai-extensions.prisma` for full schema.\n\n## Workflow Examples\n\n### Example 1: Simple Question\n\n```\nUser: "What medications am I taking?"\n  ↓\nLightweight Chatbot (GPT-3.5)\n  ↓\nResponse: "You\'re currently taking..." (<2 seconds)\n```\n\n### Example 2: Document Analysis\n\n```\nUser: "Analyze my latest lab results"\n  ↓\nLightweight Chatbot detects need for deep analysis\n  ↓\nCreates task in AnalysisQueue (priority: NORMAL)\n  ↓\nContextOptimizer analyzes document size\n  ↓\nSelects optimal model (e.g., GPT-4 Turbo)\n  ↓\nInstanceProvisioner spins up Azure instance\n  ↓\nLoads model and runs analysis\n  ↓\nReturns results and terminates instance\n  ↓\nUser receives comprehensive analysis (15 minutes)\n```\n\n### Example 3: Large Document (Needs Splitting)\n\n```\nUser uploads 200-page medical history\n  ↓\nContextOptimizer detects: 150k tokens (exceeds context window)\n  ↓\nSplits into 3 parallel chunks\n  ↓\nProvisions 3 instances simultaneously\n  ↓\nEach analyzes its section\n  ↓\nResults merged and returned\n  ↓\nUser receives complete analysis (20 minutes)\n```\n\n## Cost Optimization\n\n### Model Selection Logic\n\n```typescript\nif (tokens < 7000) {\n  model = \'llama-3-70b\';        // Most cost-efficient\n} else if (tokens < 100000) {\n  model = \'gpt-4-turbo\';        // Balanced\n} else {\n  model = \'claude-3-opus\';      // Large context\n}\n```\n\n### When to Split Prompts\n\n```typescript\nif (tokens > contextWindow * 0.8) {\n  // Need to split\n  if (analysisType.includes(\'timeline\')) {\n    strategy = \'sequential\';    // Process in order\n  } else if (analysisType.includes(\'compare\')) {\n    strategy = \'parallel\';      // Process simultaneously\n  } else {\n    strategy = \'hierarchical\';  // Summary first, then details\n  }\n}\n```\n\n## HIPAA Compliance Checklist\n\nWhen implementing any feature, ensure:\n\n- [ ] All PHI encrypted at rest (AES-256-GCM)\n- [ ] All PHI encrypted in transit (TLS 1.3)\n- [ ] All PHI access logged (audit trail)\n- [ ] PHI sanitized before caching\n- [ ] Ephemeral instances clear PHI on termination\n- [ ] User consent verified before access\n- [ ] Minimum necessary principle applied\n- [ ] MFA required for authentication\n\n## Development Environment Setup\n\n### 1. Prerequisites\n\n```bash\n# Install dependencies\nnode >= 18.0.0\nnpm >= 9.0.0\nPostgreSQL >= 14\nRedis >= 7.0\n```\n\n### 2. Clone and Install\n\n```bash\ngit clone <repository>\ncd holovitals\nnpm install\n```\n\n### 3. Environment Variables\n\n```bash\n# .env.local\nDATABASE_URL="postgresql://..."\nREDIS_URL="redis://..."\nOPENAI_API_KEY="sk-..."\nAZURE_OPENAI_KEY="..."\nANTHROPIC_API_KEY="..."\n\n# Azure credentials\nAZURE_SUBSCRIPTION_ID="..."\nAZURE_TENANT_ID="..."\nAZURE_CLIENT_ID="..."\nAZURE_CLIENT_SECRET="..."\n\n# AWS credentials (optional)\nAWS_ACCESS_KEY_ID="..."\nAWS_SECRET_ACCESS_KEY="..."\n```\n\n### 4. Database Setup\n\n```bash\n# Run migrations\nnpx prisma migrate dev\n\n# Seed database (optional)\nnpx prisma db seed\n```\n\n### 5. Start Development Server\n\n```bash\nnpm run dev\n```\n\n## Testing\n\n### Unit Tests\n\n```bash\nnpm run test\n```\n\n### Integration Tests\n\n```bash\nnpm run test:integration\n```\n\n### E2E Tests\n\n```bash\nnpm run test:e2e\n```\n\n### HIPAA Compliance Tests\n\n```bash\nnpm run test:compliance\n```\n\n## Deployment\n\n### Production Checklist\n\n- [ ] Environment variables configured\n- [ ] Database migrations run\n- [ ] Azure infrastructure provisioned\n- [ ] Monitoring and alerts configured\n- [ ] HIPAA compliance verified\n- [ ] Security audit completed\n- [ ] Load testing passed\n- [ ] Disaster recovery tested\n\n### Deploy to Production\n\n```bash\n# Build\nnpm run build\n\n# Deploy (using CI/CD)\ngit push origin main\n```\n\n## Common Tasks\n\n### Add a New Chat Feature\n\n1. Update `LightweightChatbotService.ts`\n2. Add new intent detection\n3. Implement response logic\n4. Test with various inputs\n5. Deploy\n\n### Add a New Analysis Type\n\n1. Update `AnalysisQueueService.ts`\n2. Add new task type\n3. Implement analysis logic\n4. Update context optimizer if needed\n5. Test end-to-end\n6. Deploy\n\n### Optimize Costs\n\n1. Review `ModelPerformance` table\n2. Identify expensive operations\n3. Implement caching where appropriate\n4. Optimize prompt sizes\n5. Consider smaller models\n6. Monitor cost metrics\n\n## Monitoring\n\n### Key Metrics\n\n```typescript\n// Application metrics\n- Chat response time (target: <2s)\n- Analysis completion time (target: <30min)\n- Error rate (target: <0.1%)\n- Queue length (target: <10)\n\n// Cost metrics\n- Cost per user per month (target: <$10)\n- Cost per analysis (target: <$3)\n- Infrastructure utilization (target: >70%)\n\n// HIPAA metrics\n- Audit log completeness (target: 100%)\n- Access violations (target: 0)\n- Encryption coverage (target: 100%)\n```\n\n### Dashboards\n\n- **Application Dashboard** - Azure Application Insights\n- **Infrastructure Dashboard** - Azure Monitor\n- **Cost Dashboard** - Azure Cost Management\n- **HIPAA Dashboard** - Custom compliance dashboard\n\n## Troubleshooting\n\n### Chat Not Responding\n\n1. Check OpenAI API key\n2. Verify API rate limits\n3. Check error logs\n4. Test with simple query\n\n### Analysis Taking Too Long\n\n1. Check queue length\n2. Verify instance provisioning\n3. Check model selection\n4. Review context optimization\n\n### High Costs\n\n1. Review cost breakdown\n2. Check for inefficient queries\n3. Verify caching is working\n4. Consider smaller models\n5. Optimize context windows\n\n### HIPAA Compliance Issues\n\n1. Review audit logs\n2. Check encryption status\n3. Verify access controls\n4. Test PHI sanitization\n5. Review consent management\n\n## Resources\n\n### Documentation\n\n- [UI Architecture](./UI_ARCHITECTURE.md)\n- [AI Architecture](./AI_ARCHITECTURE.md)\n- [Cloud Infrastructure](./CLOUD_INFRASTRUCTURE.md)\n- [Implementation Summary](./IMPLEMENTATION_SUMMARY.md)\n\n### External Resources\n\n- [Azure Health Data Services](https://azure.microsoft.com/en-us/services/health-data-services/)\n- [OpenAI API](https://platform.openai.com/docs)\n- [Anthropic Claude](https://www.anthropic.com/claude)\n- [HIPAA Compliance Guide](https://www.hhs.gov/hipaa/index.html)\n\n## Getting Help\n\n### Internal\n\n- **Architecture Questions** - Review documentation\n- **Implementation Help** - Check code examples\n- **HIPAA Questions** - Consult compliance officer\n\n### External\n\n- **Azure Support** - Azure Portal\n- **OpenAI Support** - Platform support\n- **Community** - Stack Overflow, GitHub Discussions\n\n## Next Steps\n\n1. **Review architecture documents** - Understand the system\n2. **Set up development environment** - Get coding\n3. **Start with Phase 2** - Database setup\n4. **Build incrementally** - One feature at a time\n5. **Test thoroughly** - Especially HIPAA compliance\n6. **Deploy carefully** - Follow deployment checklist\n\n---\n\n**Remember:** Keep it simple, keep it secure, keep it HIPAA-compliant.\n\nGood luck! 🚀\n</create-file>\n</function_calls>'}