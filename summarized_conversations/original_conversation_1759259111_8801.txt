{'role': 'user', 'content': '<tool_result> <execute-command> ToolResult(success=True, output=\'{\\n  "output": "   // This is your Prisma schema file,\\\\n   // learn more about it in the docs: https://pris.ly/d/prisma-schema\\\\n   \\\\n   generator client {\\\\n     provider = \\\\"prisma-client-js\\\\"\\\\n   }\\\\n   \\\\n   datasource db {\\\\n     provider = \\\\"postgresql\\\\"\\\\n     url      = env(\\\\"DATABASE_URL\\\\")\\\\n   }\\\\n   \\\\n   model User {\\\\n     id                    String    @id @default(uuid())\\\\n     email                 String    @unique\\\\n     passwordHash          String    @map(\\\\"password_hash\\\\")\\\\n     mfaEnabled            Boolean   @default(false) @map(\\\\"mfa_enabled\\\\")\\\\n     mfaSecret             String?   @map(\\\\"mfa_secret\\\\")\\\\n     mfaBackupCodes        String?   @map(\\\\"mfa_backup_codes\\\\")\\\\n     failedLoginAttempts   Int       @default(0) @map(\\\\"failed_login_attempts\\\\")\\\\n     lastFailedLogin       DateTime? @map(\\\\"last_failed_login\\\\")\\\\n     createdAt             DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     updatedAt             DateTime  @updatedAt @map(\\\\"updated_at\\\\")\\\\n     \\\\n     patients              Patient[]\\\\n     documents             Document[]\\\\n     analysisSessions      AnalysisSession[]\\\\n     sessions              UserSession[]\\\\n     consentRequestsAsPatient ConsentGrant[] @relation(\\\\"PatientConsents\\\\")\\\\n     consentRequestsAsSpecialist ConsentGrant[] @relation(\\\\"SpecialistConsents\\\\")\\\\n     auditLogs             AuditLog[]\\\\n     \\\\n     @@map(\\\\"users\\\\")\\\\n   }\\\\n   \\\\n   model Patient {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     firstName     String?   @map(\\\\"first_name\\\\")\\\\n     lastName      String?   @map(\\\\"last_name\\\\")\\\\n     dateOfBirth   DateTime? @map(\\\\"date_of_birth\\\\")\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     documents     Document[]\\\\n     analysisSessions AnalysisSession[]\\\\n     \\\\n     @@map(\\\\"patients\\\\")\\\\n   }\\\\n   \\\\n   model Document {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     patientId     String?   @map(\\\\"patient_id\\\\")\\\\n     filePath      String    @map(\\\\"file_path\\\\")\\\\n     fileName      String    @map(\\\\"file_name\\\\")\\\\n     fileSize      Int?      @map(\\\\"file_size\\\\")\\\\n     mimeType      String?   @map(\\\\"mime_type\\\\")\\\\n     documentType  String?   @map(\\\\"document_type\\\\") // \\\'bloodwork\\\', \\\'imaging\\\', \\\'aftercare\\\', etc.\\\\n     uploadDate    DateTime  @default(now()) @map(\\\\"upload_date\\\\")\\\\n     documentDate  DateTime? @map(\\\\"document_date\\\\") // Date of the actual medical document\\\\n     status        String    @default(\\\\"pending\\\\") // \\\'pending\\\', \\\'processing\\\', \\\'completed\\\', \\\'failed\\\'\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     updatedAt     DateTime  @updatedAt @map(\\\\"updated_at\\\\")\\\\n     \\\\n     user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\\\\n     ocrResults    OcrResult[]\\\\n     extractedData ExtractedData[]\\\\n     sourceLinks   DocumentLink[] @relation(\\\\"SourceDocument\\\\")\\\\n     targetLinks   DocumentLink[] @relation(\\\\"TargetDocument\\\\")\\\\n     embeddings    DocumentEmbedding[]\\\\n     \\\\n     @@map(\\\\"documents\\\\")\\\\n   }\\\\n   \\\\n   model OcrResult {\\\\n     id              String    @id @default(uuid())\\\\n     documentId      String    @map(\\\\"document_id\\\\")\\\\n     rawText         String    @map(\\\\"raw_text\\\\") @db.Text\\\\n     confidenceScore Float?    @map(\\\\"confidence_score\\\\")\\\\n     processedAt     DateTime  @default(now()) @map(\\\\"processed_at\\\\")\\\\n     \\\\n     document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"ocr_results\\\\")\\\\n   }\\\\n   \\\\n   model ExtractedData {\\\\n     id            String    @id @default(uuid())\\\\n     documentId    String    @map(\\\\"document_id\\\\")\\\\n     dataType      String    @map(\\\\"data_type\\\\") // \\\'test_result\\\', \\\'diagnosis\\\', \\\'medication\\\', etc.\\\\n     fieldName     String    @map(\\\\"field_name\\\\")\\\\n     fieldValue    String    @map(\\\\"field_value\\\\") @db.Text\\\\n     unit          String?\\\\n     referenceRange String?  @map(\\\\"reference_range\\\\")\\\\n     isAbnormal    Boolean?  @map(\\\\"is_abnormal\\\\")\\\\n     extractedAt   DateTime  @default(now()) @map(\\\\"extracted_at\\\\")\\\\n     \\\\n     document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"extracted_data\\\\")\\\\n   }\\\\n   \\\\n   model DocumentLink {\\\\n     id                  String    @id @default(uuid())\\\\n     sourceDocumentId    String    @map(\\\\"source_document_id\\\\")\\\\n     targetDocumentId    String    @map(\\\\"target_document_id\\\\")\\\\n     relationshipType    String    @map(\\\\"relationship_type\\\\") // \\\'follow_up\\\', \\\'related\\\', \\\'supersedes\\\', etc.\\\\n     createdAt           DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     sourceDocument      Document  @relation(\\\\"SourceDocument\\\\", fields: [sourceDocumentId], references: [id], onDelete: Cascade)\\\\n     targetDocument      Document  @relation(\\\\"TargetDocument\\\\", fields: [targetDocumentId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@unique([sourceDocumentId, targetDocumentId])\\\\n     @@map(\\\\"document_links\\\\")\\\\n   }\\\\n   \\\\n   model AnalysisSession {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     patientId     String?   @map(\\\\"patient_id\\\\")\\\\n     sessionType   String    @map(\\\\"session_type\\\\") // \\\'query\\\', \\\'trend_analysis\\\', \\\'insight_generation\\\'\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)\\\\n     interactions  AiInteraction[]\\\\n     \\\\n     @@map(\\\\"analysis_sessions\\\\")\\\\n   }\\\\n   \\\\n   model AiInteraction {\\\\n     id                String    @id @default(uuid())\\\\n     sessionId         String    @map(\\\\"session_id\\\\")\\\\n     query             String    @db.Text\\\\n     response          String?   @db.Text\\\\n     contextDocuments  String[]  @map(\\\\"context_documents\\\\") // Array of document IDs\\\\n     createdAt         DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     session           AnalysisSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"ai_interactions\\\\")\\\\n   }\\\\n   \\\\n   model DocumentEmbedding {\\\\n     id            String    @id @default(uuid())\\\\n     documentId    String    @map(\\\\"document_id\\\\")\\\\n     chunkIndex    Int       @map(\\\\"chunk_index\\\\")\\\\n     chunkText     String    @map(\\\\"chunk_text\\\\") @db.Text\\\\n     embedding     Float[]   // Store as array of floats\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"document_embeddings\\\\")\\\\n   }\\\\n   \\\\n   // User Sessions for authentication\\\\n   model UserSession {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     expiresAt     DateTime  @map(\\\\"expires_at\\\\")\\\\n     ipAddress     String?   @map(\\\\"ip_address\\\\")\\\\n     userAgent     String?   @map(\\\\"user_agent\\\\")\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"user_sessions\\\\")\\\\n     @@index([userId])\\\\n     @@index([expiresAt])\\\\n   }\\\\n   \\\\n   // Consent Management\\\\n   model ConsentGrant {\\\\n     id                      String    @id @default(uuid())\\\\n     patientId               String    @map(\\\\"patient_id\\\\")\\\\n     specialistId            String    @map(\\\\"specialist_id\\\\")\\\\n     permissions             String    @db.Text // JSON array of permissions\\\\n     reason                  String    @db.Text\\\\n     requestedDuration       Int       @map(\\\\"requested_duration\\\\") // in hours\\\\n     urgency                 String    // \\\'routine\\\', \\\'urgent\\\', \\\'emergency\\\'\\\\n     status                  String    // \\\'pending\\\', \\\'approved\\\', \\\'active\\\', \\\'expired\\\', \\\'revoked\\\', \\\'denied\\\'\\\\n     restrictions            String?   @db.Text // JSON array of restrictions\\\\n     grantedAt               DateTime? @map(\\\\"granted_at\\\\")\\\\n     expiresAt               DateTime  @map(\\\\"expires_at\\\\")\\\\n     revokedAt               DateTime? @map(\\\\"revoked_at\\\\")\\\\n     revocationReason        String?   @map(\\\\"revocation_reason\\\\") @db.Text\\\\n     denialReason            String?   @map(\\\\"denial_reason\\\\") @db.Text\\\\n     lastAccessed            DateTime? @map(\\\\"last_accessed\\\\")\\\\n     accessCount             Int       @default(0) @map(\\\\"access_count\\\\")\\\\n     expirationWarningSent   Boolean   @default(false) @map(\\\\"expiration_warning_sent\\\\")\\\\n     createdAt               DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     updatedAt               DateTime  @updatedAt @map(\\\\"updated_at\\\\")\\\\n     \\\\n     patient                 User      @relation(\\\\"PatientConsents\\\\", fields: [patientId], references: [id], onDelete: Cascade)\\\\n     specialist              User      @relation(\\\\"SpecialistConsents\\\\", fields: [specialistId], references: [id], onDelete: Cascade)\\\\n     accessLogs              AccessLog[]\\\\n     \\\\n     @@map(\\\\"consent_grants\\\\")\\\\n     @@index([patientId])\\\\n     @@index([specialistId])\\\\n     @@index([status])\\\\n     @@index([expiresAt])\\\\n   }\\\\n   \\\\n   // Access Logs for consent-based access\\\\n   model AccessLog {\\\\n     id            String    @id @default(uuid())\\\\n     consentId     String    @map(\\\\"consent_id\\\\")\\\\n     specialistId  String    @map(\\\\"specialist_id\\\\")\\\\n     action        String\\\\n     resource      String\\\\n     ipAddress     String?   @map(\\\\"ip_address\\\\")\\\\n     userAgent     String?   @map(\\\\"user_agent\\\\")\\\\n     details       String?   @db.Text // JSON\\\\n     timestamp     DateTime  @default(now())\\\\n     success       Boolean   @default(true)\\\\n     \\\\n     consent       ConsentGrant @relation(fields: [consentId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"access_logs\\\\")\\\\n     @@index([consentId])\\\\n     @@index([specialistId])\\\\n     @@index([timestamp])\\\\n   }\\\\n   \\\\n   // Audit Logs for HIPAA compliance\\\\n   model AuditLog {\\\\n     id              String    @id @default(uuid())\\\\n     userId          String    @map(\\\\"user_id\\\\")\\\\n     action          String\\\\n     resource        String\\\\n     resourceId      String    @map(\\\\"resource_id\\\\")\\\\n     details         String?   @db.Text // JSON\\\\n     ipAddress       String?   @map(\\\\"ip_address\\\\")\\\\n     userAgent       String?   @map(\\\\"user_agent\\\\")\\\\n     sessionId       String?   @map(\\\\"session_id\\\\")\\\\n     severity        String    // \\\'low\\\', \\\'medium\\\', \\\'high\\\', \\\'critical\\\'\\\\n     requiresReview  Boolean   @default(false) @map(\\\\"requires_review\\\\")\\\\n     reviewed        Boolean   @default(false)\\\\n     reviewedBy      String?   @map(\\\\"reviewed_by\\\\")\\\\n     reviewedAt      DateTime? @map(\\\\"reviewed_at\\\\")\\\\n     reviewNotes     String?   @map(\\\\"review_notes\\\\") @db.Text\\\\n     consentId       String?   @map(\\\\"consent_id\\\\")\\\\n     timestamp       DateTime  @default(now())\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"audit_logs\\\\")\\\\n     @@index([userId])\\\\n     @@index([action])\\\\n     @@index([resource])\\\\n     @@index([timestamp])\\\\n     @@index([severity])\\\\n     @@index([requiresReview])\\\\n   }\\\\n   \\\\n   // Notifications for patients\\\\n   model Notification {\\\\n     id              String    @id @default(uuid())\\\\n     patientId       String    @map(\\\\"patient_id\\\\")\\\\n     type            String    // \\\'request\\\', \\\'expiring\\\', \\\'expired\\\', \\\'accessed\\\'\\\\n     message         String    @db.Text\\\\n     requiresAction  Boolean   @default(false) @map(\\\\"requires_action\\\\")\\\\n     read            Boolean   @default(false)\\\\n     readAt          DateTime? @map(\\\\"read_at\\\\")\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     @@map(\\\\"notifications\\\\")\\\\n     @@index([patientId])\\\\n     @@index([read])\\\\n     @@index([createdAt])\\\\n   }\\\\n   \\\\n   // Security Alerts\\\\n   model SecurityAlert {\\\\n     id            String    @id @default(uuid())\\\\n     userId        String    @map(\\\\"user_id\\\\")\\\\n     action        String\\\\n     details       String    @db.Text // JSON\\\\n     severity      String    @default(\\\\"high\\\\")\\\\n     acknowledged  Boolean   @default(false)\\\\n     acknowledgedBy String?  @map(\\\\"acknowledged_by\\\\")\\\\n     acknowledgedAt DateTime? @map(\\\\"acknowledged_at\\\\")\\\\n     createdAt     DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     @@map(\\\\"security_alerts\\\\")\\\\n     @@index([userId])\\\\n     @@index([acknowledged])\\\\n     @@index([createdAt])\\\\n   }\\\\n   \\\\n   // Patient Repository - Sandboxed per patient\\\\n   model PatientRepository {\\\\n     id                      String    @id @default(uuid())\\\\n     userId                  String    @unique @map(\\\\"user_id\\\\")\\\\n     primaryIdentityHash     String    @unique @map(\\\\"primary_identity_hash\\\\")\\\\n     secondaryIdentityHash   String    @map(\\\\"secondary_identity_hash\\\\")\\\\n     compositeIdentityHash   String    @unique @map(\\\\"composite_identity_hash\\\\")\\\\n     encryptedPersonalInfo   String    @map(\\\\"encrypted_personal_info\\\\") @db.Text\\\\n     hasMothersMaidenName    Boolean   @default(false) @map(\\\\"has_mothers_maiden_name\\\\")\\\\n     hasPreviousAddress      Boolean   @default(false) @map(\\\\"has_previous_address\\\\")\\\\n     createdAt               DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     updatedAt               DateTime  @updatedAt @map(\\\\"updated_at\\\\")\\\\n     lastAccessedAt          DateTime? @map(\\\\"last_accessed_at\\\\")\\\\n     version                 Int       @default(1)\\\\n     \\\\n     diagnoses               PatientDiagnosis[]\\\\n     medications             PatientMedication[]\\\\n     allergies               PatientAllergy[]\\\\n     vitalSigns              PatientVitalSign[]\\\\n     procedures              PatientProcedure[]\\\\n     immunizations           PatientImmunization[]\\\\n     familyHistory           PatientFamilyHistory[]\\\\n     \\\\n     @@map(\\\\"patient_repositories\\\\")\\\\n     @@index([userId])\\\\n     @@index([compositeIdentityHash])\\\\n   }\\\\n   \\\\n   // Patient Medical Data Tables\\\\n   \\\\n   model PatientDiagnosis {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     condition       String\\\\n     icd10Code       String?   @map(\\\\"icd10_code\\\\")\\\\n     diagnosedDate   DateTime  @map(\\\\"diagnosed_date\\\\")\\\\n     status          String    // \\\'active\\\', \\\'resolved\\\', \\\'chronic\\\'\\\\n     severity        String?   // \\\'mild\\\', \\\'moderate\\\', \\\'severe\\\'\\\\n     notes           String?   @db.Text\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_diagnoses\\\\")\\\\n     @@index([repositoryId])\\\\n     @@index([diagnosedDate])\\\\n   }\\\\n   \\\\n   model PatientMedication {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     name            String\\\\n     dosage          String\\\\n     frequency       String\\\\n     startDate       DateTime  @map(\\\\"start_date\\\\")\\\\n     endDate         DateTime? @map(\\\\"end_date\\\\")\\\\n     prescribedBy    String?   @map(\\\\"prescribed_by\\\\")\\\\n     purpose         String?   @db.Text\\\\n     status          String    // \\\'active\\\', \\\'discontinued\\\', \\\'completed\\\'\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_medications\\\\")\\\\n     @@index([repositoryId])\\\\n     @@index([status])\\\\n   }\\\\n   \\\\n   model PatientAllergy {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     allergen        String\\\\n     type            String    // \\\'drug\\\', \\\'food\\\', \\\'environmental\\\', \\\'other\\\'\\\\n     reaction        String\\\\n     severity        String    // \\\'mild\\\', \\\'moderate\\\', \\\'severe\\\', \\\'life-threatening\\\'\\\\n     diagnosedDate   DateTime? @map(\\\\"diagnosed_date\\\\")\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_allergies\\\\")\\\\n     @@index([repositoryId])\\\\n   }\\\\n   \\\\n   model PatientVitalSign {\\\\n     id                      String    @id @default(uuid())\\\\n     repositoryId            String    @map(\\\\"repository_id\\\\")\\\\n     date                    DateTime\\\\n     bloodPressureSystolic   Int?      @map(\\\\"blood_pressure_systolic\\\\")\\\\n     bloodPressureDiastolic  Int?      @map(\\\\"blood_pressure_diastolic\\\\")\\\\n     heartRate               Int?      @map(\\\\"heart_rate\\\\")\\\\n     temperature             Float?\\\\n     weight                  Float?\\\\n     height                  Float?\\\\n     bmi                     Float?\\\\n     oxygenSaturation        Int?      @map(\\\\"oxygen_saturation\\\\")\\\\n     createdAt               DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository              PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_vital_signs\\\\")\\\\n     @@index([repositoryId])\\\\n     @@index([date])\\\\n   }\\\\n   \\\\n   model PatientProcedure {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     name            String\\\\n     date            DateTime\\\\n     performedBy     String?   @map(\\\\"performed_by\\\\")\\\\n     location        String?\\\\n     notes           String?   @db.Text\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_procedures\\\\")\\\\n     @@index([repositoryId])\\\\n     @@index([date])\\\\n   }\\\\n   \\\\n   model PatientImmunization {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     vaccine         String\\\\n     date            DateTime\\\\n     doseNumber      Int?      @map(\\\\"dose_number\\\\")\\\\n     administeredBy  String?   @map(\\\\"administered_by\\\\")\\\\n     lotNumber       String?   @map(\\\\"lot_number\\\\")\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_immunizations\\\\")\\\\n     @@index([repositoryId])\\\\n     @@index([date])\\\\n   }\\\\n   \\\\n   model PatientFamilyHistory {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     relationship    String\\\\n     condition       String\\\\n     ageAtDiagnosis  Int?      @map(\\\\"age_at_diagnosis\\\\")\\\\n     notes           String?   @db.Text\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)\\\\n     \\\\n     @@map(\\\\"patient_family_history\\\\")\\\\n     @@index([repositoryId])\\\\n   }\\\\n   \\\\n   // Identity Verification Challenges\\\\n   model IdentityChallenge {\\\\n     id              String    @id @default(uuid())\\\\n     repositoryId    String    @map(\\\\"repository_id\\\\")\\\\n     questions       String    @db.Text // JSON array\\\\n     expiresAt       DateTime  @map(\\\\"expires_at\\\\")\\\\n     createdAt       DateTime  @default(now()) @map(\\\\"created_at\\\\")\\\\n     \\\\n     @@map(\\\\"identity_challenges\\\\")\\\\n     @@index([repositoryId])\\\\n     @@index([expiresAt])\\\\n   }\\\\n",\\n  "exit_code": 0,\\n  "cwd": "/workspace"\\n}\') </execute-command> </tool_result>'}