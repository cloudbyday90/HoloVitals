{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="medical-analysis-platform/app/api/errors/log/route.ts">\n/**\n * Error Logging API Endpoint\n * Receives client-side errors and logs them\n */\n\nimport { NextRequest, NextResponse } from \'next/server\';\nimport { errorLogger } from \'@/lib/errors/ErrorLogger\';\nimport { AppError } from \'@/lib/errors/AppError\';\n\nexport async function POST(req: NextRequest) {\n  try {\n    const body = await req.json();\n\n    const {\n      message,\n      stack,\n      componentStack,\n      digest,\n      timestamp,\n      url,\n      userAgent,\n    } = body;\n\n    // Create error object\n    const error = new AppError(\n      message || \'Client-side error\',\n      500,\n      true,\n      \'CLIENT_ERROR\',\n      {\n        stack,\n        componentStack,\n        digest,\n        url,\n        userAgent,\n      }\n    );\n\n    // Get user context from headers\n    const userId = req.headers.get(\'x-user-id\') || undefined;\n    const ipAddress = req.ip || req.headers.get(\'x-forwarded-for\') || undefined;\n\n    // Log the error\n    await errorLogger.logError(error, {\n      userId,\n      endpoint: url,\n      method: \'CLIENT\',\n      userAgent,\n      ipAddress,\n    });\n\n    return NextResponse.json(\n      { success: true, message: \'Error logged successfully\' },\n      { status: 200 }\n    );\n  } catch (error) {\n    console.error(\'Failed to log client error:\', error);\n    return NextResponse.json(\n      { success: false, message: \'Failed to log error\' },\n      { status: 500 }\n    );\n  }\n}\n</create-file>\n</function_calls>'}