{'role': 'assistant', 'content': '<function_calls>\n<create-file file_path="prisma/schema-emergency-recovery.prisma">\n// Emergency Recovery & Change Management Schema\n// This file contains the database schema for emergency recovery, change management,\n// and AI error diagnosis systems\n\n// ============================================================================\n// EMERGENCY RECOVERY SYSTEM\n// ============================================================================\n\nenum SnapshotType {\n  DATABASE      // Database backup\n  CODE          // Code and build artifacts\n  CONFIGURATION // Environment and service config\n  DATA          // Application data\n  FULL_SYSTEM   // Complete system snapshot\n}\n\nenum SnapshotStatus {\n  CREATING      // Snapshot in progress\n  COMPLETED     // Successfully created\n  FAILED        // Creation failed\n  VALIDATING    // Validation in progress\n  VALIDATED     // Validation successful\n  CORRUPTED     // Validation failed\n  ARCHIVED      // Moved to long-term storage\n  DELETED       // Marked for deletion\n}\n\nmodel SystemSnapshot {\n  id                String          @id @default(cuid())\n  \n  // Snapshot Information\n  type              SnapshotType\n  status            SnapshotStatus  @default(CREATING)\n  name              String\n  description       String?         @db.Text\n  \n  // Snapshot Details\n  version           String          // System version at snapshot time\n  environment       String          // PRODUCTION, STAGING, etc.\n  size              BigInt?         // Size in bytes\n  location          String          // Storage location/path\n  checksum          String?         // Integrity checksum\n  \n  // Metadata\n  createdBy         String?         // User or SYSTEM\n  createdAt         DateTime        @default(now())\n  validatedAt       DateTime?\n  archivedAt        DateTime?\n  \n  // Snapshot Contents\n  databaseBackup    String?         // Database backup reference\n  codeCommitHash    String?         // Git commit hash\n  buildArtifacts    String[]        // Build artifact references\n  configFiles       Json?           // Configuration snapshot\n  dataBackup        String?         // Data backup reference\n  \n  // Retention\n  retentionDays     Int             @default(30)\n  expiresAt         DateTime?\n  \n  // Relationships\n  restorations      SystemRestoration[]\n  \n  @@index([type, status])\n  @@index([createdAt])\n  @@index([environment])\n}\n\nenum RestorationType {\n  CODE_ROLLBACK         // Rollback code only\n  DATABASE_RESTORE      // Restore database\n  CONFIG_ROLLBACK       // Rollback configuration\n  FULL_RESTORE          // Full system restore\n  PARTIAL_RESTORE       // Selective restoration\n}\n\nenum RestorationStatus {\n  INITIATED         // Restoration started\n  IN_PROGRESS       // Restoration in progress\n  VALIDATING        // Validation in progress\n  COMPLETED         // Successfully completed\n  FAILED            // Restoration failed\n  ROLLED_BACK       // Restoration rolled back\n}\n\nmodel SystemRestoration {\n  id                String              @id @default(cuid())\n  \n  // Restoration Information\n  type              RestorationType\n  status            RestorationStatus   @default(INITIATED)\n  snapshotId        String\n  snapshot          SystemSnapshot      @relation(fields: [snapshotId], references: [id])\n  \n  // Trigger Information\n  triggeredBy       String              // User ID or SYSTEM\n  triggerReason     String              @db.Text\n  isEmergency       Boolean             @default(false)\n  \n  // Execution Details\n  startedAt         DateTime            @default(now())\n  completedAt       DateTime?\n  duration          Int?                // Duration in seconds\n  \n  // Restoration Steps\n  steps             Json?               // Array of restoration steps\n  currentStep       String?\n  \n  // Validation\n  validationPassed  Boolean             @default(false)\n  validationResults Json?\n  \n  // Rollback Information\n  canRollback       Boolean             @default(true)\n  rollbackSnapshot  String?             // Snapshot created before restoration\n  \n  // Results\n  success           Boolean             @default(false)\n  errorMessage      String?             @db.Text\n  logs              String?             @db.Text\n  \n  // Related Items\n  incidentId        String?\n  changeRequestId   String?\n  \n  @@index([snapshotId])\n  @@index([status])\n  @@index([startedAt])\n}\n\n// ============================================================================\n// CHANGE MANAGEMENT SYSTEM\n// ============================================================================\n\nenum ChangeType {\n  STANDARD          // Pre-approved, low risk\n  NORMAL            // Requires approval, medium risk\n  EMERGENCY         // Critical, fast-track approval\n  MAINTENANCE       // Scheduled maintenance\n}\n\nenum ChangePriority {\n  CRITICAL          // Immediate action required\n  HIGH              // High priority\n  MEDIUM            // Medium priority\n  LOW               // Low priority\n}\n\nenum ChangeStatus {\n  DRAFT             // Being prepared\n  SUBMITTED         // Awaiting approval\n  APPROVED          // Approved for implementation\n  SCHEDULED         // Scheduled for deployment\n  IN_PROGRESS       // Being implemented\n  TESTING           // In testing phase\n  COMPLETED         // Successfully completed\n  FAILED            // Implementation failed\n  ROLLED_BACK       // Changes rolled back\n  CANCELLED         // Change cancelled\n  REJECTED          // Change rejected\n}\n\nenum ChangeRiskLevel {\n  CRITICAL          // System-wide impact, high risk\n  HIGH              // Major service impact\n  MEDIUM            // Limited impact\n  LOW               // Minimal impact\n}\n\nmodel ChangeRequest {\n  id                String            @id @default(cuid())\n  \n  // Change Information\n  type              ChangeType\n  priority          ChangePriority\n  status            ChangeStatus      @default(DRAFT)\n  riskLevel         ChangeRiskLevel\n  \n  // Request Details\n  title             String\n  description       String            @db.Text\n  justification     String            @db.Text\n  \n  // Requester Information\n  requestedBy       String            // User ID\n  requestedByName   String\n  requestedByEmail  String\n  requestedAt       DateTime          @default(now())\n  \n  // Change Details\n  affectedServices  String[]          // Services affected\n  affectedSystems   String[]          // Systems affected\n  changeScope       String            @db.Text\n  implementationPlan String           @db.Text\n  rollbackPlan      String            @db.Text\n  testingPlan       String?           @db.Text\n  \n  // Impact Analysis\n  estimatedDowntime Int?              // Minutes\n  userImpact        String?           @db.Text\n  businessImpact    String?           @db.Text\n  technicalImpact   String?           @db.Text\n  complianceImpact  String?           @db.Text\n  \n  // Scheduling\n  scheduledStart    DateTime?\n  scheduledEnd      DateTime?\n  maintenanceWindow String?\n  \n  // Approval\n  requiresApproval  Boolean           @default(true)\n  approvalLevel     Int               @default(1) // 1=Engineer, 2=Lead, 3=CTO\n  \n  // Implementation\n  implementedBy     String?\n  implementedAt     DateTime?\n  actualStart       DateTime?\n  actualEnd         DateTime?\n  actualDowntime    Int?              // Minutes\n  \n  // Validation\n  validationPassed  Boolean           @default(false)\n  validationResults Json?\n  \n  // Rollback\n  rolledBack        Boolean           @default(false)\n  rollbackReason    String?           @db.Text\n  rollbackAt        DateTime?\n  \n  // Related Items\n  relatedIncidents  String[]          // Incident IDs\n  relatedBugs       String[]          // Bug IDs\n  relatedFeatures   String[]          // Feature IDs\n  \n  // Metadata\n  tags              String[]\n  attachments       String[]\n  \n  // Timestamps\n  createdAt         DateTime          @default(now())\n  updatedAt         DateTime          @updatedAt\n  \n  // Relationships\n  approvals         ChangeApproval[]\n  implementations   ChangeImplementation[]\n  validations       ChangeValidation[]\n  \n  @@index([type, status])\n  @@index([priority, status])\n  @@index([requestedAt])\n  @@index([scheduledStart])\n}\n\nenum ApprovalStatus {\n  PENDING           // Awaiting approval\n  APPROVED          // Approved\n  REJECTED          // Rejected\n  ESCALATED         // Escalated to higher authority\n}\n\nmodel ChangeApproval {\n  id                String            @id @default(cuid())\n  changeRequestId   String\n  changeRequest     ChangeRequest     @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)\n  \n  // Approver Information\n  approverLevel     Int               // 1=Engineer, 2=Lead, 3=CTO, 4=Compliance\n  approverRole      String            // Role of approver\n  approverId        String?           // User ID\n  approverName      String?\n  \n  // Approval Details\n  status            ApprovalStatus    @default(PENDING)\n  decision          String?           // APPROVED, REJECTED, ESCALATED\n  comments          String?           @db.Text\n  conditions        String?           @db.Text // Conditions for approval\n  \n  // Timestamps\n  requestedAt       DateTime          @default(now())\n  respondedAt       DateTime?\n  \n  @@index([changeRequestId])\n  @@index([status])\n}\n\nmodel ChangeImplementation {\n  id                String            @id @default(cuid())\n  changeRequestId   String\n  changeRequest     ChangeRequest     @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)\n  \n  // Implementation Details\n  step              Int               // Step number\n  stepName          String\n  stepDescription   String            @db.Text\n  \n  // Execution\n  status            String            @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED\n  startedAt         DateTime?\n  completedAt       DateTime?\n  duration          Int?              // Seconds\n  \n  // Results\n  success           Boolean           @default(false)\n  output            String?           @db.Text\n  errorMessage      String?           @db.Text\n  \n  // Rollback\n  rollbackCommand   String?           @db.Text\n  canRollback       Boolean           @default(true)\n  \n  @@index([changeRequestId])\n  @@index([status])\n}\n\nmodel ChangeValidation {\n  id                String            @id @default(cuid())\n  changeRequestId   String\n  changeRequest     ChangeRequest     @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)\n  \n  // Validation Details\n  validationType    String            // FUNCTIONAL, PERFORMANCE, SECURITY, COMPLIANCE\n  validationName    String\n  validationSteps   String            @db.Text\n  \n  // Execution\n  status            String            @default("PENDING")\n  startedAt         DateTime?\n  completedAt       DateTime?\n  \n  // Results\n  passed            Boolean           @default(false)\n  results           Json?\n  issues            String[]\n  recommendations   String[]\n  \n  @@index([changeRequestId])\n  @@index([status])\n}\n\n// ============================================================================\n// AI ERROR DIAGNOSIS SYSTEM\n// ============================================================================\n\nenum ErrorSeverity {\n  CRITICAL          // System down, immediate action\n  HIGH              // Major functionality broken\n  MEDIUM            // Functionality impaired\n  LOW               // Minor issue\n  INFO              // Informational\n}\n\nenum ErrorCategory {\n  SYSTEM_OUTAGE     // Complete system failure\n  SERVICE_FAILURE   // Service unavailable\n  DATABASE_ERROR    // Database issues\n  API_ERROR         // API failures\n  AI_ERROR          // AI service errors\n  AUTHENTICATION    // Auth failures\n  AUTHORIZATION     // Permission issues\n  DATA_INTEGRITY    // Data corruption\n  PERFORMANCE       // Performance degradation\n  SECURITY          // Security issues\n  NETWORK           // Network issues\n  CONFIGURATION     // Config errors\n  DEPENDENCY        // External dependency failure\n  UNKNOWN           // Unknown error type\n}\n\nmodel ErrorEvent {\n  id                String            @id @default(cuid())\n  \n  // Error Information\n  severity          ErrorSeverity\n  category          ErrorCategory\n  errorCode         String?\n  errorMessage      String            @db.Text\n  stackTrace        String?           @db.Text\n  \n  // Context\n  service           String            // Service where error occurred\n  environment       String            // PRODUCTION, STAGING, etc.\n  endpoint          String?           // API endpoint if applicable\n  userId            String?           // User affected (if applicable)\n  \n  // Detection\n  detectedAt        DateTime          @default(now())\n  detectedBy        String            // SYSTEM, MONITORING, USER_REPORT\n  \n  // Occurrence\n  firstOccurrence   DateTime          @default(now())\n  lastOccurrence    DateTime          @default(now())\n  occurrenceCount   Int               @default(1)\n  \n  // Impact\n  usersAffected     Int?\n  servicesAffected  String[]\n  \n  // Diagnosis\n  diagnosisStatus   String            @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED\n  rootCause         String?           @db.Text\n  rootCauseService  String?\n  diagnosisConfidence Float?          // 0.0 to 1.0\n  \n  // Resolution\n  resolved          Boolean           @default(false)\n  resolvedAt        DateTime?\n  resolutionMethod  String?           // ROLLBACK, FIX, RESTART, etc.\n  resolutionTime    Int?              // Minutes to resolve\n  \n  // Related Items\n  incidentId        String?\n  changeRequestId   String?\n  relatedErrors     String[]          // Related error IDs\n  \n  // Metadata\n  metadata          Json?\n  tags              String[]\n  \n  // Relationships\n  diagnosis         ErrorDiagnosis?\n  patterns          ErrorPattern[]\n  \n  @@index([severity, category])\n  @@index([detectedAt])\n  @@index([service, environment])\n  @@index([resolved])\n}\n\nmodel ErrorDiagnosis {\n  id                String            @id @default(cuid())\n  errorEventId      String            @unique\n  errorEvent        ErrorEvent        @relation(fields: [errorEventId], references: [id], onDelete: Cascade)\n  \n  // AI Analysis\n  aiModel           String            // Model used for diagnosis\n  modelVersion      String\n  confidence        Float             // 0.0 to 1.0\n  \n  // Root Cause Analysis\n  rootCause         String            @db.Text\n  rootCauseCategory String\n  affectedComponents String[]\n  failureChain      Json?             // Chain of failures\n  \n  // Suggested Fixes\n  suggestedFixes    Json              // Array of suggested fixes\n  recommendedFix    String?           @db.Text\n  fixPriority       Int               @default(1)\n  \n  // Similar Incidents\n  similarIncidents  String[]          // IDs of similar past incidents\n  historicalSuccess Float?            // Success rate of suggested fix\n  \n  // Knowledge Base\n  kbArticles        String[]          // Related KB article IDs\n  \n  // Validation\n  diagnosisCorrect  Boolean?          // Was diagnosis correct?\n  actualRootCause   String?           @db.Text\n  \n  // Timestamps\n  diagnosedAt       DateTime          @default(now())\n  validatedAt       DateTime?\n  \n  @@index([confidence])\n  @@index([diagnosedAt])\n}\n\nmodel ErrorPattern {\n  id                String            @id @default(cuid())\n  \n  // Pattern Information\n  patternName       String\n  patternType       String            // RECURRING, CASCADING, TEMPORAL, etc.\n  description       String            @db.Text\n  \n  // Pattern Details\n  errorCategory     ErrorCategory\n  services          String[]\n  frequency         String            // HOURLY, DAILY, WEEKLY, etc.\n  \n  // Detection\n  firstDetected     DateTime          @default(now())\n  lastDetected      DateTime          @default(now())\n  occurrences       Int               @default(1)\n  \n  // Pattern Characteristics\n  timePattern       Json?             // Time-based pattern\n  servicePattern    Json?             // Service dependency pattern\n  userPattern       Json?             // User behavior pattern\n  \n  // Impact\n  severity          ErrorSeverity\n  averageImpact     Float?            // Average impact score\n  \n  // Resolution\n  knownFix          String?           @db.Text\n  preventiveMeasure String?           @db.Text\n  \n  // Related Errors\n  errorEvents       ErrorEvent[]\n  \n  @@index([patternType])\n  @@index([errorCategory])\n  @@index([lastDetected])\n}\n\nmodel ErrorKnowledgeBase {\n  id                String            @id @default(cuid())\n  \n  // Article Information\n  title             String\n  category          ErrorCategory\n  errorCode         String?\n  \n  // Content\n  description       String            @db.Text\n  symptoms          String            @db.Text\n  rootCause         String            @db.Text\n  resolution        String            @db.Text\n  preventiveMeasures String?          @db.Text\n  \n  // Metadata\n  severity          ErrorSeverity\n  affectedServices  String[]\n  tags              String[]\n  \n  // Usage Statistics\n  timesReferenced   Int               @default(0)\n  successRate       Float?            // Success rate of resolution\n  averageResolutionTime Int?          // Minutes\n  \n  // Maintenance\n  createdBy         String\n  createdAt         DateTime          @default(now())\n  updatedAt         DateTime          @updatedAt\n  lastUsed          DateTime?\n  \n  // Validation\n  verified          Boolean           @default(false)\n  verifiedBy        String?\n  verifiedAt        DateTime?\n  \n  @@index([category])\n  @@index([errorCode])\n  @@index([timesReferenced])\n}\n\n// ============================================================================\n// INCIDENT MANAGEMENT\n// ============================================================================\n\nenum IncidentSeverity {\n  SEV1              // Critical - Complete outage\n  SEV2              // High - Major functionality broken\n  SEV3              // Medium - Partial functionality impaired\n  SEV4              // Low - Minor issue\n}\n\nenum IncidentStatus {\n  DETECTED          // Incident detected\n  ACKNOWLEDGED      // Team acknowledged\n  INVESTIGATING     // Under investigation\n  IDENTIFIED        // Root cause identified\n  RESOLVING         // Resolution in progress\n  RESOLVED          // Incident resolved\n  CLOSED            // Post-incident review complete\n}\n\nmodel Incident {\n  id                String            @id @default(cuid())\n  \n  // Incident Information\n  severity          IncidentSeverity\n  status            IncidentStatus    @default(DETECTED)\n  title             String\n  description       String            @db.Text\n  \n  // Detection\n  detectedAt        DateTime          @default(now())\n  detectedBy        String            // User ID or SYSTEM\n  detectionMethod   String            // MONITORING, USER_REPORT, etc.\n  \n  // Impact\n  affectedServices  String[]\n  affectedUsers     Int?\n  businessImpact    String?           @db.Text\n  \n  // Response\n  acknowledgedAt    DateTime?\n  acknowledgedBy    String?\n  respondedAt       DateTime?\n  respondedBy       String?\n  \n  // Resolution\n  resolvedAt        DateTime?\n  resolvedBy        String?\n  resolutionMethod  String?\n  resolutionSummary String?           @db.Text\n  \n  // Timeline\n  timeToAcknowledge Int?              // Minutes\n  timeToRespond     Int?              // Minutes\n  timeToResolve     Int?              // Minutes\n  totalDuration     Int?              // Minutes\n  \n  // Related Items\n  errorEvents       String[]          // Error event IDs\n  changeRequests    String[]          // Change request IDs\n  restorations      String[]          // Restoration IDs\n  \n  // Communication\n  statusUpdates     Json?             // Array of status updates\n  notifiedParties   String[]          // User IDs notified\n  \n  // Post-Incident\n  postMortemRequired Boolean          @default(false)\n  postMortemCompleted Boolean         @default(false)\n  postMortemUrl     String?\n  lessonsLearned    String?           @db.Text\n  actionItems       Json?\n  \n  // Metadata\n  tags              String[]\n  \n  // Timestamps\n  createdAt         DateTime          @default(now())\n  updatedAt         DateTime          @updatedAt\n  closedAt          DateTime?\n  \n  @@index([severity, status])\n  @@index([detectedAt])\n  @@index([status])\n}\n\n// ============================================================================\n// SERVICE HEALTH MONITORING\n// ============================================================================\n\nenum HealthStatus {\n  HEALTHY           // All systems operational\n  DEGRADED          // Partial functionality\n  DOWN              // Service unavailable\n  MAINTENANCE       // Planned maintenance\n  UNKNOWN           // Status unknown\n}\n\nmodel ServiceHealth {\n  id                String            @id @default(cuid())\n  \n  // Service Information\n  serviceName       String\n  environment       String            // PRODUCTION, STAGING, etc.\n  \n  // Health Status\n  status            HealthStatus\n  previousStatus    HealthStatus?\n  statusChangedAt   DateTime?\n  \n  // Metrics\n  uptime            Float?            // Percentage\n  responseTime      Float?            // Milliseconds\n  errorRate         Float?            // Percentage\n  requestRate       Float?            // Requests per second\n  \n  // Resources\n  cpuUsage          Float?            // Percentage\n  memoryUsage       Float?            // Percentage\n  diskUsage         Float?            // Percentage\n  networkUsage      Float?            // Mbps\n  \n  // Checks\n  lastCheckAt       DateTime          @default(now())\n  checksPerformed   String[]\n  failedChecks      String[]\n  \n  // Issues\n  activeIssues      String[]          // Issue descriptions\n  warningCount      Int               @default(0)\n  errorCount        Int               @default(0)\n  \n  // Metadata\n  metadata          Json?\n  \n  // Timestamps\n  createdAt         DateTime          @default(now())\n  updatedAt         DateTime          @updatedAt\n  \n  @@unique([serviceName, environment])\n  @@index([status])\n  @@index([lastCheckAt])\n}\n</create-file>\n</function_calls>'}