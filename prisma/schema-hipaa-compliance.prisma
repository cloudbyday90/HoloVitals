// HIPAA Compliance and Audit Logging Schema
// This schema defines the database structure for HIPAA compliance features,
// audit logging, and security enhancements

// ============================================================================
// AUDIT LOGGING MODELS
// ============================================================================

model AuditLog {
  id            String   @id @default(cuid())
  timestamp     DateTime @default(now())
  
  // Event Information
  eventId       String   @unique @default(cuid())
  eventType     AuditEventType
  eventCategory AuditEventCategory
  
  // User Information
  userId        String?
  userRole      String?
  userName      String?
  userEmail     String?
  
  // Session Information
  sessionId     String?
  ipAddress     String?
  userAgent     String?
  deviceId      String?
  location      String?
  
  // Action Information
  action        String
  actionDetails Json?
  
  // Resource Information
  resourceType  String?
  resourceId    String?
  resourceName  String?
  
  // Outcome Information
  outcome       AuditOutcome
  outcomeReason String?
  errorMessage  String?
  
  // PHI Access Information
  phiAccessed   Boolean  @default(false)
  patientId     String?
  accessReason  String?
  dataAccessed  Json?    // Array of data fields accessed
  
  // Request Information
  requestId     String?
  requestMethod String?
  requestPath   String?
  requestBody   Json?
  responseCode  Int?
  
  // Security Information
  riskLevel     RiskLevel @default(LOW)
  securityFlags Json?    // Array of security concerns
  
  // Metadata
  metadata      Json?
  tags          String[]
  
  // Retention
  retentionDate DateTime // Date when log can be deleted
  archived      Boolean  @default(false)
  
  // Indexes for efficient querying
  @@index([timestamp])
  @@index([userId])
  @@index([eventType])
  @@index([eventCategory])
  @@index([patientId])
  @@index([sessionId])
  @@index([outcome])
  @@index([riskLevel])
  @@index([retentionDate])
  @@map("audit_logs")
}

enum AuditEventType {
  // Authentication Events
  LOGIN_SUCCESS
  LOGIN_FAILURE
  LOGOUT
  PASSWORD_CHANGE
  PASSWORD_RESET
  MFA_ENABLED
  MFA_DISABLED
  MFA_SUCCESS
  MFA_FAILURE
  SESSION_CREATED
  SESSION_EXPIRED
  SESSION_TERMINATED
  
  // Authorization Events
  ACCESS_GRANTED
  ACCESS_DENIED
  PERMISSION_CHANGED
  ROLE_ASSIGNED
  ROLE_REMOVED
  EMERGENCY_ACCESS
  
  // Data Access Events
  PHI_VIEWED
  PHI_CREATED
  PHI_UPDATED
  PHI_DELETED
  PHI_EXPORTED
  PHI_PRINTED
  PHI_SEARCHED
  RECORD_ACCESSED
  
  // Administrative Events
  USER_CREATED
  USER_UPDATED
  USER_DELETED
  USER_ACTIVATED
  USER_DEACTIVATED
  CONFIG_CHANGED
  SECURITY_POLICY_CHANGED
  SYSTEM_UPDATED
  
  // Security Events
  FAILED_ACCESS_ATTEMPT
  SUSPICIOUS_ACTIVITY
  SECURITY_VIOLATION
  BREACH_ATTEMPT
  VULNERABILITY_DETECTED
  MALWARE_DETECTED
  
  // System Events
  SYSTEM_STARTUP
  SYSTEM_SHUTDOWN
  BACKUP_CREATED
  BACKUP_RESTORED
  DATA_MIGRATION
  
  // Compliance Events
  CONSENT_GIVEN
  CONSENT_REVOKED
  DATA_REQUEST
  DATA_DISCLOSURE
  BREACH_NOTIFICATION
}

enum AuditEventCategory {
  AUTHENTICATION
  AUTHORIZATION
  DATA_ACCESS
  DATA_MODIFICATION
  ADMINISTRATIVE
  SECURITY
  SYSTEM
  COMPLIANCE
}

enum AuditOutcome {
  SUCCESS
  FAILURE
  PARTIAL_SUCCESS
  DENIED
  ERROR
}

enum RiskLevel {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// ============================================================================
// SESSION MANAGEMENT MODELS
// ============================================================================

model UserSession {
  id              String   @id @default(cuid())
  sessionToken    String   @unique
  userId          String
  
  // Session Information
  createdAt       DateTime @default(now())
  expiresAt       DateTime
  lastActivityAt  DateTime @default(now())
  
  // Device Information
  ipAddress       String
  userAgent       String
  deviceId        String?
  deviceType      String?
  browser         String?
  os              String?
  location        String?
  
  // Security Information
  mfaVerified     Boolean  @default(false)
  riskScore       Int      @default(0)
  securityFlags   Json?
  
  // Session State
  active          Boolean  @default(true)
  terminatedAt    DateTime?
  terminationReason String?
  
  // Activity Tracking
  requestCount    Int      @default(0)
  lastRequestPath String?
  
  @@index([userId])
  @@index([sessionToken])
  @@index([expiresAt])
  @@index([active])
  @@map("user_sessions")
}

// ============================================================================
// ACCESS CONTROL MODELS
// ============================================================================

model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  
  // Role Properties
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  priority    Int      @default(0)
  
  // Permissions
  permissions RolePermission[]
  
  // Relationships
  userRoles   UserRole[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String?
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String
  description String?
  
  // Permission Properties
  resource    String   // e.g., "patient", "lab_result", "user"
  action      String   // e.g., "read", "write", "delete"
  scope       PermissionScope @default(OWN)
  
  // Conditions
  conditions  Json?    // Additional conditions for permission
  
  // Relationships
  rolePermissions RolePermission[]
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([resource, action, scope])
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  // Additional Constraints
  constraints  Json?
  
  createdAt    DateTime   @default(now())
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  // Assignment Information
  assignedAt DateTime @default(now())
  assignedBy String?
  expiresAt  DateTime?
  
  // Scope Limitations
  scopeType  String?  // e.g., "organization", "department", "patient_group"
  scopeId    String?
  
  // Status
  active     Boolean  @default(true)
  
  @@unique([userId, roleId, scopeType, scopeId])
  @@index([userId])
  @@index([roleId])
  @@map("user_roles")
}

enum PermissionScope {
  OWN       // User's own data only
  ASSIGNED  // Assigned patients/resources
  DEPARTMENT // Department-level access
  ORGANIZATION // Organization-level access
  SYSTEM    // System-wide access
}

// ============================================================================
// ACCESS REQUEST MODELS
// ============================================================================

model AccessRequest {
  id              String   @id @default(cuid())
  
  // Requester Information
  requesterId     String
  requesterName   String
  requesterRole   String
  
  // Request Details
  resourceType    String
  resourceId      String
  accessType      String   // e.g., "read", "write", "emergency"
  reason          String
  urgency         AccessUrgency @default(NORMAL)
  
  // Emergency Access
  isEmergency     Boolean  @default(false)
  emergencyReason String?
  
  // Approval Workflow
  status          AccessRequestStatus @default(PENDING)
  approvedBy      String?
  approvedAt      DateTime?
  rejectedBy      String?
  rejectedAt      DateTime?
  rejectionReason String?
  
  // Access Period
  requestedAt     DateTime @default(now())
  accessStartTime DateTime?
  accessEndTime   DateTime?
  
  // Audit Trail
  reviewNotes     String?
  auditLogId      String?
  
  @@index([requesterId])
  @@index([status])
  @@index([resourceType, resourceId])
  @@map("access_requests")
}

enum AccessUrgency {
  LOW
  NORMAL
  HIGH
  EMERGENCY
}

enum AccessRequestStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
  REVOKED
}

// ============================================================================
// SECURITY MONITORING MODELS
// ============================================================================

model SecurityAlert {
  id          String   @id @default(cuid())
  
  // Alert Information
  alertType   SecurityAlertType
  severity    AlertSeverity
  title       String
  description String
  
  // Source Information
  source      String   // e.g., "intrusion_detection", "anomaly_detection"
  detectedAt  DateTime @default(now())
  
  // Affected Resources
  userId      String?
  resourceType String?
  resourceId  String?
  ipAddress   String?
  
  // Alert Details
  indicators  Json     // Indicators of compromise
  evidence    Json?    // Supporting evidence
  
  // Response
  status      AlertStatus @default(NEW)
  assignedTo  String?
  assignedAt  DateTime?
  resolvedAt  DateTime?
  resolution  String?
  
  // Actions Taken
  actionsTaken Json?
  
  // Related Items
  relatedAlerts String[] // IDs of related alerts
  auditLogIds   String[] // Related audit log entries
  
  @@index([alertType])
  @@index([severity])
  @@index([status])
  @@index([detectedAt])
  @@index([userId])
  @@map("security_alerts")
}

enum SecurityAlertType {
  FAILED_LOGIN_ATTEMPTS
  SUSPICIOUS_ACCESS_PATTERN
  UNAUTHORIZED_ACCESS_ATTEMPT
  DATA_EXFILTRATION
  PRIVILEGE_ESCALATION
  MALWARE_DETECTED
  VULNERABILITY_EXPLOIT
  POLICY_VIOLATION
  ANOMALOUS_BEHAVIOR
  BRUTE_FORCE_ATTACK
  SQL_INJECTION_ATTEMPT
  XSS_ATTEMPT
  CSRF_ATTEMPT
  DDOS_ATTACK
}

enum AlertSeverity {
  INFO
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  NEW
  ACKNOWLEDGED
  INVESTIGATING
  RESOLVED
  FALSE_POSITIVE
  IGNORED
}

// ============================================================================
// BREACH NOTIFICATION MODELS
// ============================================================================

model BreachIncident {
  id                String   @id @default(cuid())
  
  // Incident Information
  incidentNumber    String   @unique
  discoveredAt      DateTime
  reportedAt        DateTime @default(now())
  
  // Breach Details
  breachType        BreachType
  description       String
  causeOfBreach     String
  
  // Affected Data
  affectedRecords   Int
  affectedIndividuals Int
  dataTypes         Json     // Types of PHI affected
  
  // Risk Assessment
  riskLevel         RiskLevel
  riskAssessment    String
  
  // Affected Parties
  affectedPatientIds String[]
  affectedUserIds    String[]
  
  // Notification Status
  notificationStatus NotificationStatus @default(PENDING)
  individualsNotifiedAt DateTime?
  hhsNotifiedAt      DateTime?
  mediaNotifiedAt    DateTime?
  
  // Investigation
  investigationStatus InvestigationStatus @default(ONGOING)
  investigationNotes  String?
  rootCause          String?
  
  // Remediation
  remediationActions Json?
  remediationStatus  String?
  remediationCompletedAt DateTime?
  
  // Documentation
  documents          Json?    // Links to related documents
  
  // Metadata
  createdBy          String
  updatedAt          DateTime @updatedAt
  
  @@index([discoveredAt])
  @@index([notificationStatus])
  @@index([riskLevel])
  @@map("breach_incidents")
}

enum BreachType {
  UNAUTHORIZED_ACCESS
  UNAUTHORIZED_DISCLOSURE
  THEFT
  LOSS
  IMPROPER_DISPOSAL
  HACKING
  MALWARE
  PHISHING
  INSIDER_THREAT
  SYSTEM_ERROR
  OTHER
}

enum NotificationStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  NOT_REQUIRED
}

enum InvestigationStatus {
  PENDING
  ONGOING
  COMPLETED
  CLOSED
}

// ============================================================================
// ENCRYPTION KEY MANAGEMENT
// ============================================================================

model EncryptionKey {
  id          String   @id @default(cuid())
  
  // Key Information
  keyId       String   @unique
  keyType     KeyType
  algorithm   String
  keySize     Int
  
  // Key Material (encrypted)
  encryptedKey String
  keyVersion   Int      @default(1)
  
  // Key Status
  status      KeyStatus @default(ACTIVE)
  createdAt   DateTime @default(now())
  activatedAt DateTime?
  deactivatedAt DateTime?
  destroyedAt DateTime?
  
  // Rotation
  rotationSchedule String?
  lastRotatedAt    DateTime?
  nextRotationAt   DateTime?
  
  // Usage
  purpose     String   // e.g., "database", "file_storage", "field_level"
  usageCount  Int      @default(0)
  
  // Access Control
  allowedRoles String[]
  
  @@index([keyId])
  @@index([status])
  @@map("encryption_keys")
}

enum KeyType {
  MASTER_KEY
  DATA_ENCRYPTION_KEY
  KEY_ENCRYPTION_KEY
}

enum KeyStatus {
  PENDING
  ACTIVE
  DEACTIVATED
  COMPROMISED
  DESTROYED
}

// ============================================================================
// CONSENT MANAGEMENT
// ============================================================================

model PatientConsent {
  id          String   @id @default(cuid())
  
  // Patient Information
  patientId   String
  
  // Consent Details
  consentType ConsentType
  purpose     String
  description String?
  
  // Consent Status
  status      ConsentStatus @default(ACTIVE)
  givenAt     DateTime @default(now())
  givenBy     String   // Patient or authorized representative
  
  // Expiration
  expiresAt   DateTime?
  revokedAt   DateTime?
  revokedBy   String?
  revocationReason String?
  
  // Scope
  scope       Json?    // What data/actions are covered
  restrictions Json?   // Any restrictions on use
  
  // Documentation
  documentUrl String?
  signatureUrl String?
  
  // Audit
  auditLogId  String?
  
  @@index([patientId])
  @@index([consentType])
  @@index([status])
  @@map("patient_consents")
}

enum ConsentType {
  TREATMENT
  PAYMENT
  OPERATIONS
  RESEARCH
  MARKETING
  DISCLOSURE
  ELECTRONIC_COMMUNICATION
  DATA_SHARING
}

enum ConsentStatus {
  PENDING
  ACTIVE
  EXPIRED
  REVOKED
  SUPERSEDED
}

// ============================================================================
// DATA RETENTION POLICIES
// ============================================================================

model DataRetentionPolicy {
  id          String   @id @default(cuid())
  
  // Policy Information
  name        String   @unique
  description String
  
  // Scope
  dataType    String   // e.g., "patient_record", "audit_log", "lab_result"
  category    String?
  
  // Retention Rules
  retentionPeriodDays Int
  archiveAfterDays    Int?
  deleteAfterDays     Int?
  
  // Legal Requirements
  legalBasis  String?
  jurisdiction String?
  
  // Status
  active      Boolean  @default(true)
  effectiveFrom DateTime @default(now())
  effectiveTo   DateTime?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   String
  
  @@map("data_retention_policies")
}

// ============================================================================
// SECURITY CONFIGURATION
// ============================================================================

model SecurityConfiguration {
  id          String   @id @default(cuid())
  
  // Configuration Key
  key         String   @unique
  category    String
  
  // Configuration Value
  value       Json
  description String?
  
  // Validation
  valueType   String   // e.g., "string", "number", "boolean", "json"
  validation  Json?    // Validation rules
  
  // Status
  active      Boolean  @default(true)
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  updatedBy   String?
  
  @@map("security_configurations")
}

// ============================================================================
// COMPLIANCE REPORTS
// ============================================================================

model ComplianceReport {
  id          String   @id @default(cuid())
  
  // Report Information
  reportType  ComplianceReportType
  reportPeriodStart DateTime
  reportPeriodEnd   DateTime
  
  // Report Data
  summary     Json
  findings    Json
  recommendations Json?
  
  // Compliance Status
  overallStatus ComplianceStatus
  score         Float?
  
  // Generation
  generatedAt DateTime @default(now())
  generatedBy String
  
  // Review
  reviewedAt  DateTime?
  reviewedBy  String?
  reviewNotes String?
  
  // Documentation
  reportUrl   String?
  
  @@index([reportType])
  @@index([reportPeriodStart, reportPeriodEnd])
  @@map("compliance_reports")
}

enum ComplianceReportType {
  HIPAA_SECURITY
  HIPAA_PRIVACY
  ACCESS_REVIEW
  AUDIT_LOG_REVIEW
  SECURITY_ASSESSMENT
  RISK_ASSESSMENT
  INCIDENT_SUMMARY
  TRAINING_COMPLIANCE
}

enum ComplianceStatus {
  COMPLIANT
  PARTIALLY_COMPLIANT
  NON_COMPLIANT
  UNDER_REVIEW
}