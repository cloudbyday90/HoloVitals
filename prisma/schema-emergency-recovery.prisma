// Emergency Recovery & Change Management Schema
// This file contains the database schema for emergency recovery, change management,
// and AI error diagnosis systems

// ============================================================================
// EMERGENCY RECOVERY SYSTEM
// ============================================================================

enum SnapshotType {
  DATABASE      // Database backup
  CODE          // Code and build artifacts
  CONFIGURATION // Environment and service config
  DATA          // Application data
  FULL_SYSTEM   // Complete system snapshot
}

enum SnapshotStatus {
  CREATING      // Snapshot in progress
  COMPLETED     // Successfully created
  FAILED        // Creation failed
  VALIDATING    // Validation in progress
  VALIDATED     // Validation successful
  CORRUPTED     // Validation failed
  ARCHIVED      // Moved to long-term storage
  DELETED       // Marked for deletion
}

model SystemSnapshot {
  id                String          @id @default(cuid())
  
  // Snapshot Information
  type              SnapshotType
  status            SnapshotStatus  @default(CREATING)
  name              String
  description       String?         @db.Text
  
  // Snapshot Details
  version           String          // System version at snapshot time
  environment       String          // PRODUCTION, STAGING, etc.
  size              BigInt?         // Size in bytes
  location          String          // Storage location/path
  checksum          String?         // Integrity checksum
  
  // Metadata
  createdBy         String?         // User or SYSTEM
  createdAt         DateTime        @default(now())
  validatedAt       DateTime?
  archivedAt        DateTime?
  
  // Snapshot Contents
  databaseBackup    String?         // Database backup reference
  codeCommitHash    String?         // Git commit hash
  buildArtifacts    String[]        // Build artifact references
  configFiles       Json?           // Configuration snapshot
  dataBackup        String?         // Data backup reference
  
  // Retention
  retentionDays     Int             @default(30)
  expiresAt         DateTime?
  
  // Relationships
  restorations      SystemRestoration[]
  
  @@index([type, status])
  @@index([createdAt])
  @@index([environment])
}

enum RestorationType {
  CODE_ROLLBACK         // Rollback code only
  DATABASE_RESTORE      // Restore database
  CONFIG_ROLLBACK       // Rollback configuration
  FULL_RESTORE          // Full system restore
  PARTIAL_RESTORE       // Selective restoration
}

enum RestorationStatus {
  INITIATED         // Restoration started
  IN_PROGRESS       // Restoration in progress
  VALIDATING        // Validation in progress
  COMPLETED         // Successfully completed
  FAILED            // Restoration failed
  ROLLED_BACK       // Restoration rolled back
}

model SystemRestoration {
  id                String              @id @default(cuid())
  
  // Restoration Information
  type              RestorationType
  status            RestorationStatus   @default(INITIATED)
  snapshotId        String
  snapshot          SystemSnapshot      @relation(fields: [snapshotId], references: [id])
  
  // Trigger Information
  triggeredBy       String              // User ID or SYSTEM
  triggerReason     String              @db.Text
  isEmergency       Boolean             @default(false)
  
  // Execution Details
  startedAt         DateTime            @default(now())
  completedAt       DateTime?
  duration          Int?                // Duration in seconds
  
  // Restoration Steps
  steps             Json?               // Array of restoration steps
  currentStep       String?
  
  // Validation
  validationPassed  Boolean             @default(false)
  validationResults Json?
  
  // Rollback Information
  canRollback       Boolean             @default(true)
  rollbackSnapshot  String?             // Snapshot created before restoration
  
  // Results
  success           Boolean             @default(false)
  errorMessage      String?             @db.Text
  logs              String?             @db.Text
  
  // Related Items
  incidentId        String?
  changeRequestId   String?
  
  @@index([snapshotId])
  @@index([status])
  @@index([startedAt])
}

// ============================================================================
// CHANGE MANAGEMENT SYSTEM
// ============================================================================

enum ChangeType {
  STANDARD          // Pre-approved, low risk
  NORMAL            // Requires approval, medium risk
  EMERGENCY         // Critical, fast-track approval
  MAINTENANCE       // Scheduled maintenance
}

enum ChangePriority {
  CRITICAL          // Immediate action required
  HIGH              // High priority
  MEDIUM            // Medium priority
  LOW               // Low priority
}

enum ChangeStatus {
  DRAFT             // Being prepared
  SUBMITTED         // Awaiting approval
  APPROVED          // Approved for implementation
  SCHEDULED         // Scheduled for deployment
  IN_PROGRESS       // Being implemented
  TESTING           // In testing phase
  COMPLETED         // Successfully completed
  FAILED            // Implementation failed
  ROLLED_BACK       // Changes rolled back
  CANCELLED         // Change cancelled
  REJECTED          // Change rejected
}

enum ChangeRiskLevel {
  CRITICAL          // System-wide impact, high risk
  HIGH              // Major service impact
  MEDIUM            // Limited impact
  LOW               // Minimal impact
}

model ChangeRequest {
  id                String            @id @default(cuid())
  
  // Change Information
  type              ChangeType
  priority          ChangePriority
  status            ChangeStatus      @default(DRAFT)
  riskLevel         ChangeRiskLevel
  
  // Request Details
  title             String
  description       String            @db.Text
  justification     String            @db.Text
  
  // Requester Information
  requestedBy       String            // User ID
  requestedByName   String
  requestedByEmail  String
  requestedAt       DateTime          @default(now())
  
  // Change Details
  affectedServices  String[]          // Services affected
  affectedSystems   String[]          // Systems affected
  changeScope       String            @db.Text
  implementationPlan String           @db.Text
  rollbackPlan      String            @db.Text
  testingPlan       String?           @db.Text
  
  // Impact Analysis
  estimatedDowntime Int?              // Minutes
  userImpact        String?           @db.Text
  businessImpact    String?           @db.Text
  technicalImpact   String?           @db.Text
  complianceImpact  String?           @db.Text
  
  // Scheduling
  scheduledStart    DateTime?
  scheduledEnd      DateTime?
  maintenanceWindow String?
  
  // Approval
  requiresApproval  Boolean           @default(true)
  approvalLevel     Int               @default(1) // 1=Engineer, 2=Lead, 3=CTO
  
  // Implementation
  implementedBy     String?
  implementedAt     DateTime?
  actualStart       DateTime?
  actualEnd         DateTime?
  actualDowntime    Int?              // Minutes
  
  // Validation
  validationPassed  Boolean           @default(false)
  validationResults Json?
  
  // Rollback
  rolledBack        Boolean           @default(false)
  rollbackReason    String?           @db.Text
  rollbackAt        DateTime?
  
  // Related Items
  relatedIncidents  String[]          // Incident IDs
  relatedBugs       String[]          // Bug IDs
  relatedFeatures   String[]          // Feature IDs
  
  // Metadata
  tags              String[]
  attachments       String[]
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  // Relationships
  approvals         ChangeApproval[]
  implementations   ChangeImplementation[]
  validations       ChangeValidation[]
  
  @@index([type, status])
  @@index([priority, status])
  @@index([requestedAt])
  @@index([scheduledStart])
}

enum ApprovalStatus {
  PENDING           // Awaiting approval
  APPROVED          // Approved
  REJECTED          // Rejected
  ESCALATED         // Escalated to higher authority
}

model ChangeApproval {
  id                String            @id @default(cuid())
  changeRequestId   String
  changeRequest     ChangeRequest     @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)
  
  // Approver Information
  approverLevel     Int               // 1=Engineer, 2=Lead, 3=CTO, 4=Compliance
  approverRole      String            // Role of approver
  approverId        String?           // User ID
  approverName      String?
  
  // Approval Details
  status            ApprovalStatus    @default(PENDING)
  decision          String?           // APPROVED, REJECTED, ESCALATED
  comments          String?           @db.Text
  conditions        String?           @db.Text // Conditions for approval
  
  // Timestamps
  requestedAt       DateTime          @default(now())
  respondedAt       DateTime?
  
  @@index([changeRequestId])
  @@index([status])
}

model ChangeImplementation {
  id                String            @id @default(cuid())
  changeRequestId   String
  changeRequest     ChangeRequest     @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)
  
  // Implementation Details
  step              Int               // Step number
  stepName          String
  stepDescription   String            @db.Text
  
  // Execution
  status            String            @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, FAILED
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?              // Seconds
  
  // Results
  success           Boolean           @default(false)
  output            String?           @db.Text
  errorMessage      String?           @db.Text
  
  // Rollback
  rollbackCommand   String?           @db.Text
  canRollback       Boolean           @default(true)
  
  @@index([changeRequestId])
  @@index([status])
}

model ChangeValidation {
  id                String            @id @default(cuid())
  changeRequestId   String
  changeRequest     ChangeRequest     @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)
  
  // Validation Details
  validationType    String            // FUNCTIONAL, PERFORMANCE, SECURITY, COMPLIANCE
  validationName    String
  validationSteps   String            @db.Text
  
  // Execution
  status            String            @default("PENDING")
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Results
  passed            Boolean           @default(false)
  results           Json?
  issues            String[]
  recommendations   String[]
  
  @@index([changeRequestId])
  @@index([status])
}

// ============================================================================
// AI ERROR DIAGNOSIS SYSTEM
// ============================================================================

enum ErrorSeverity {
  CRITICAL          // System down, immediate action
  HIGH              // Major functionality broken
  MEDIUM            // Functionality impaired
  LOW               // Minor issue
  INFO              // Informational
}

enum ErrorCategory {
  SYSTEM_OUTAGE     // Complete system failure
  SERVICE_FAILURE   // Service unavailable
  DATABASE_ERROR    // Database issues
  API_ERROR         // API failures
  AI_ERROR          // AI service errors
  AUTHENTICATION    // Auth failures
  AUTHORIZATION     // Permission issues
  DATA_INTEGRITY    // Data corruption
  PERFORMANCE       // Performance degradation
  SECURITY          // Security issues
  NETWORK           // Network issues
  CONFIGURATION     // Config errors
  DEPENDENCY        // External dependency failure
  UNKNOWN           // Unknown error type
}

model ErrorEvent {
  id                String            @id @default(cuid())
  
  // Error Information
  severity          ErrorSeverity
  category          ErrorCategory
  errorCode         String?
  errorMessage      String            @db.Text
  stackTrace        String?           @db.Text
  
  // Context
  service           String            // Service where error occurred
  environment       String            // PRODUCTION, STAGING, etc.
  endpoint          String?           // API endpoint if applicable
  userId            String?           // User affected (if applicable)
  
  // Detection
  detectedAt        DateTime          @default(now())
  detectedBy        String            // SYSTEM, MONITORING, USER_REPORT
  
  // Occurrence
  firstOccurrence   DateTime          @default(now())
  lastOccurrence    DateTime          @default(now())
  occurrenceCount   Int               @default(1)
  
  // Impact
  usersAffected     Int?
  servicesAffected  String[]
  
  // Diagnosis
  diagnosisStatus   String            @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED
  rootCause         String?           @db.Text
  rootCauseService  String?
  diagnosisConfidence Float?          // 0.0 to 1.0
  
  // Resolution
  resolved          Boolean           @default(false)
  resolvedAt        DateTime?
  resolutionMethod  String?           // ROLLBACK, FIX, RESTART, etc.
  resolutionTime    Int?              // Minutes to resolve
  
  // Related Items
  incidentId        String?
  changeRequestId   String?
  relatedErrors     String[]          // Related error IDs
  
  // Metadata
  metadata          Json?
  tags              String[]
  
  // Relationships
  diagnosis         ErrorDiagnosis?
  patterns          ErrorPattern[]
  
  @@index([severity, category])
  @@index([detectedAt])
  @@index([service, environment])
  @@index([resolved])
}

model ErrorDiagnosis {
  id                String            @id @default(cuid())
  errorEventId      String            @unique
  errorEvent        ErrorEvent        @relation(fields: [errorEventId], references: [id], onDelete: Cascade)
  
  // AI Analysis
  aiModel           String            // Model used for diagnosis
  modelVersion      String
  confidence        Float             // 0.0 to 1.0
  
  // Root Cause Analysis
  rootCause         String            @db.Text
  rootCauseCategory String
  affectedComponents String[]
  failureChain      Json?             // Chain of failures
  
  // Suggested Fixes
  suggestedFixes    Json              // Array of suggested fixes
  recommendedFix    String?           @db.Text
  fixPriority       Int               @default(1)
  
  // Similar Incidents
  similarIncidents  String[]          // IDs of similar past incidents
  historicalSuccess Float?            // Success rate of suggested fix
  
  // Knowledge Base
  kbArticles        String[]          // Related KB article IDs
  
  // Validation
  diagnosisCorrect  Boolean?          // Was diagnosis correct?
  actualRootCause   String?           @db.Text
  
  // Timestamps
  diagnosedAt       DateTime          @default(now())
  validatedAt       DateTime?
  
  @@index([confidence])
  @@index([diagnosedAt])
}

model ErrorPattern {
  id                String            @id @default(cuid())
  
  // Pattern Information
  patternName       String
  patternType       String            // RECURRING, CASCADING, TEMPORAL, etc.
  description       String            @db.Text
  
  // Pattern Details
  errorCategory     ErrorCategory
  services          String[]
  frequency         String            // HOURLY, DAILY, WEEKLY, etc.
  
  // Detection
  firstDetected     DateTime          @default(now())
  lastDetected      DateTime          @default(now())
  occurrences       Int               @default(1)
  
  // Pattern Characteristics
  timePattern       Json?             // Time-based pattern
  servicePattern    Json?             // Service dependency pattern
  userPattern       Json?             // User behavior pattern
  
  // Impact
  severity          ErrorSeverity
  averageImpact     Float?            // Average impact score
  
  // Resolution
  knownFix          String?           @db.Text
  preventiveMeasure String?           @db.Text
  
  // Related Errors
  errorEvents       ErrorEvent[]
  
  @@index([patternType])
  @@index([errorCategory])
  @@index([lastDetected])
}

model ErrorKnowledgeBase {
  id                String            @id @default(cuid())
  
  // Article Information
  title             String
  category          ErrorCategory
  errorCode         String?
  
  // Content
  description       String            @db.Text
  symptoms          String            @db.Text
  rootCause         String            @db.Text
  resolution        String            @db.Text
  preventiveMeasures String?          @db.Text
  
  // Metadata
  severity          ErrorSeverity
  affectedServices  String[]
  tags              String[]
  
  // Usage Statistics
  timesReferenced   Int               @default(0)
  successRate       Float?            // Success rate of resolution
  averageResolutionTime Int?          // Minutes
  
  // Maintenance
  createdBy         String
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  lastUsed          DateTime?
  
  // Validation
  verified          Boolean           @default(false)
  verifiedBy        String?
  verifiedAt        DateTime?
  
  @@index([category])
  @@index([errorCode])
  @@index([timesReferenced])
}

// ============================================================================
// INCIDENT MANAGEMENT
// ============================================================================

enum IncidentSeverity {
  SEV1              // Critical - Complete outage
  SEV2              // High - Major functionality broken
  SEV3              // Medium - Partial functionality impaired
  SEV4              // Low - Minor issue
}

enum IncidentStatus {
  DETECTED          // Incident detected
  ACKNOWLEDGED      // Team acknowledged
  INVESTIGATING     // Under investigation
  IDENTIFIED        // Root cause identified
  RESOLVING         // Resolution in progress
  RESOLVED          // Incident resolved
  CLOSED            // Post-incident review complete
}

model Incident {
  id                String            @id @default(cuid())
  
  // Incident Information
  severity          IncidentSeverity
  status            IncidentStatus    @default(DETECTED)
  title             String
  description       String            @db.Text
  
  // Detection
  detectedAt        DateTime          @default(now())
  detectedBy        String            // User ID or SYSTEM
  detectionMethod   String            // MONITORING, USER_REPORT, etc.
  
  // Impact
  affectedServices  String[]
  affectedUsers     Int?
  businessImpact    String?           @db.Text
  
  // Response
  acknowledgedAt    DateTime?
  acknowledgedBy    String?
  respondedAt       DateTime?
  respondedBy       String?
  
  // Resolution
  resolvedAt        DateTime?
  resolvedBy        String?
  resolutionMethod  String?
  resolutionSummary String?           @db.Text
  
  // Timeline
  timeToAcknowledge Int?              // Minutes
  timeToRespond     Int?              // Minutes
  timeToResolve     Int?              // Minutes
  totalDuration     Int?              // Minutes
  
  // Related Items
  errorEvents       String[]          // Error event IDs
  changeRequests    String[]          // Change request IDs
  restorations      String[]          // Restoration IDs
  
  // Communication
  statusUpdates     Json?             // Array of status updates
  notifiedParties   String[]          // User IDs notified
  
  // Post-Incident
  postMortemRequired Boolean          @default(false)
  postMortemCompleted Boolean         @default(false)
  postMortemUrl     String?
  lessonsLearned    String?           @db.Text
  actionItems       Json?
  
  // Metadata
  tags              String[]
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  closedAt          DateTime?
  
  @@index([severity, status])
  @@index([detectedAt])
  @@index([status])
}

// ============================================================================
// SERVICE HEALTH MONITORING
// ============================================================================

enum HealthStatus {
  HEALTHY           // All systems operational
  DEGRADED          // Partial functionality
  DOWN              // Service unavailable
  MAINTENANCE       // Planned maintenance
  UNKNOWN           // Status unknown
}

model ServiceHealth {
  id                String            @id @default(cuid())
  
  // Service Information
  serviceName       String
  environment       String            // PRODUCTION, STAGING, etc.
  
  // Health Status
  status            HealthStatus
  previousStatus    HealthStatus?
  statusChangedAt   DateTime?
  
  // Metrics
  uptime            Float?            // Percentage
  responseTime      Float?            // Milliseconds
  errorRate         Float?            // Percentage
  requestRate       Float?            // Requests per second
  
  // Resources
  cpuUsage          Float?            // Percentage
  memoryUsage       Float?            // Percentage
  diskUsage         Float?            // Percentage
  networkUsage      Float?            // Mbps
  
  // Checks
  lastCheckAt       DateTime          @default(now())
  checksPerformed   String[]
  failedChecks      String[]
  
  // Issues
  activeIssues      String[]          // Issue descriptions
  warningCount      Int               @default(0)
  errorCount        Int               @default(0)
  
  // Metadata
  metadata          Json?
  
  // Timestamps
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  
  @@unique([serviceName, environment])
  @@index([status])
  @@index([lastCheckAt])
}