// Development & QA Repository System Schema
// This file contains the database schema for Bug Repository, Development & Enhancement Repository,
// and Development & QA Processing Repository

// ============================================================================
// BUG REPOSITORY
// ============================================================================

enum BugSource {
  USER_REPORT      // User-reported via UI or support
  SYSTEM_DETECTION // Automatically detected by monitoring
  AUTOMATED_TEST   // Found during automated testing
  SECURITY_SCAN    // Discovered in security audit
  PERFORMANCE_MON  // Performance degradation detected
  CODE_REVIEW      // Found during code review
  EXTERNAL_REPORT  // Reported by external party
}

enum BugSeverity {
  CRITICAL  // System down, data loss, security breach
  HIGH      // Major functionality broken, workaround difficult
  MEDIUM    // Functionality impaired, workaround available
  LOW       // Minor issue, cosmetic, or edge case
  TRIVIAL   // Typo, formatting, non-functional
}

enum BugStatus {
  NEW           // Just reported, not yet triaged
  TRIAGED       // Reviewed and categorized
  CONFIRMED     // Reproduced and validated
  IN_PROGRESS   // Being actively worked on
  FIXED         // Fix implemented in dev
  TESTING       // Being tested in QA
  VERIFIED      // Fix verified in QA
  DEPLOYED      // Fix deployed to production
  CLOSED        // Resolved and closed
  WONT_FIX      // Decided not to fix
  DUPLICATE     // Duplicate of another bug
  CANNOT_REPRO  // Cannot reproduce the issue
}

enum BugCategory {
  AUTHENTICATION    // Login, MFA, session issues
  AUTHORIZATION     // Permission, consent, access control
  DATA_INTEGRITY    // Data corruption, loss, inconsistency
  PERFORMANCE       // Slow response, timeout, resource usage
  SECURITY          // Vulnerabilities, exploits, breaches
  UI_UX             // Interface, usability, display issues
  API               // API errors, integration issues
  DATABASE          // Query errors, connection issues
  AI_ANALYSIS       // AI processing, analysis errors
  DOCUMENT_PROCESS  // OCR, parsing, extraction issues
  NOTIFICATION      // Email, alerts, messaging issues
  REPOSITORY        // Repository system issues
  DEPLOYMENT        // Build, deployment, configuration
  MONITORING        // Logging, metrics, alerting
  OTHER             // Uncategorized or misc issues
}

model Bug {
  id                String        @id @default(cuid())
  
  // Basic Information
  title             String
  description       String        @db.Text
  source            BugSource
  severity          BugSeverity
  status            BugStatus     @default(NEW)
  category          BugCategory
  
  // Reporter Information
  reportedBy        String?       // User ID or system identifier
  reportedByEmail   String?
  reportedAt        DateTime      @default(now())
  
  // Technical Details
  stackTrace        String?       @db.Text
  errorMessage      String?       @db.Text
  affectedComponent String?       // Component/module affected
  affectedVersion   String?       // Version where bug exists
  environment       String?       // Dev, QA, Staging, Production
  
  // Reproduction
  stepsToReproduce  String?       @db.Text
  expectedBehavior  String?       @db.Text
  actualBehavior    String?       @db.Text
  reproducible      Boolean       @default(false)
  
  // Impact Analysis
  usersAffected     Int?          // Number of users impacted
  impactScore       Float?        // Calculated impact score (0-100)
  businessImpact    String?       @db.Text
  
  // Priority & Assignment
  priority          Int           @default(0) // Higher = more urgent
  assignedTo        String?       // Developer ID
  assignedAt        DateTime?
  
  // Resolution
  fixedBy           String?       // Developer ID
  fixedAt           DateTime?
  fixDescription    String?       @db.Text
  fixVersion        String?       // Version where fix is included
  
  // Duplicate Management
  isDuplicate       Boolean       @default(false)
  duplicateOf       String?       // ID of original bug
  duplicates        Bug[]         @relation("BugDuplicates")
  originalBug       Bug?          @relation("BugDuplicates", fields: [duplicateOf], references: [id])
  
  // Related Items
  relatedBugs       String[]      // IDs of related bugs
  relatedFeatures   String[]      // IDs of related features
  
  // Metadata
  tags              String[]
  attachments       String[]      // URLs to screenshots, logs, etc.
  
  // Timestamps
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  closedAt          DateTime?
  
  // Relationships
  comments          BugComment[]
  history           BugHistory[]
  testCases         BugTestCase[]
  
  @@index([status, severity, priority])
  @@index([category, status])
  @@index([reportedAt])
  @@index([assignedTo])
}

model BugComment {
  id          String    @id @default(cuid())
  bugId       String
  bug         Bug       @relation(fields: [bugId], references: [id], onDelete: Cascade)
  
  authorId    String
  authorName  String
  content     String    @db.Text
  isInternal  Boolean   @default(false) // Internal team comment vs public
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([bugId])
}

model BugHistory {
  id          String    @id @default(cuid())
  bugId       String
  bug         Bug       @relation(fields: [bugId], references: [id], onDelete: Cascade)
  
  field       String    // Field that changed
  oldValue    String?   @db.Text
  newValue    String?   @db.Text
  changedBy   String    // User ID
  changedAt   DateTime  @default(now())
  
  @@index([bugId, changedAt])
}

model BugTestCase {
  id              String    @id @default(cuid())
  bugId           String
  bug             Bug       @relation(fields: [bugId], references: [id], onDelete: Cascade)
  
  title           String
  description     String    @db.Text
  steps           String    @db.Text
  expectedResult  String    @db.Text
  automated       Boolean   @default(false)
  testScript      String?   @db.Text
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([bugId])
}

// ============================================================================
// DEVELOPMENT & ENHANCEMENT REPOSITORY
// ============================================================================

enum FeatureStatus {
  PROPOSED      // Initial proposal
  EVALUATING    // Under evaluation
  APPROVED      // Approved for development
  PLANNED       // Added to roadmap
  IN_PROGRESS   // Being developed
  TESTING       // In QA testing
  COMPLETED     // Deployed to production
  REJECTED      // Not approved
  DEFERRED      // Postponed to future
  CANCELLED     // Cancelled
}

enum FeaturePriority {
  CRITICAL      // Must have, blocking other work
  HIGH          // Important, should be done soon
  MEDIUM        // Nice to have, moderate impact
  LOW           // Low impact, can wait
  BACKLOG       // Future consideration
}

enum FeatureType {
  NEW_FEATURE       // Brand new functionality
  ENHANCEMENT       // Improvement to existing feature
  REFACTORING       // Code improvement, no user-facing change
  PERFORMANCE       // Performance optimization
  SECURITY          // Security improvement
  TECHNICAL_DEBT    // Addressing technical debt
  INTEGRATION       // Third-party integration
  DOCUMENTATION     // Documentation improvement
}

model Feature {
  id                  String            @id @default(cuid())
  
  // Basic Information
  title               String
  description         String            @db.Text
  type                FeatureType
  status              FeatureStatus     @default(PROPOSED)
  priority            FeaturePriority   @default(MEDIUM)
  
  // Requester Information
  requestedBy         String?           // User ID
  requestedByEmail    String?
  requestedAt         DateTime          @default(now())
  
  // Business Value
  businessValue       String?           @db.Text
  targetAudience      String?           // Who benefits
  expectedImpact      String?           @db.Text
  successMetrics      String?           @db.Text
  
  // Technical Details
  technicalSpec       String?           @db.Text
  estimatedEffort     Int?              // Story points or hours
  complexity          Int?              // 1-10 scale
  
  // Dependencies
  dependsOn           String[]          // IDs of features this depends on
  blockedBy           String[]          // IDs of bugs/issues blocking this
  blocks              String[]          // IDs of features this blocks
  
  // Planning
  targetRelease       String?           // Version or release name
  targetDate          DateTime?
  assignedTo          String?           // Team or developer ID
  assignedAt          DateTime?
  
  // Implementation
  startedAt           DateTime?
  completedAt         DateTime?
  deployedAt          DateTime?
  implementedBy       String?           // Developer ID
  
  // Related Items
  relatedBugs         String[]          // Bug IDs that inspired this
  relatedFeatures     String[]          // Related feature IDs
  
  // Metadata
  tags                String[]
  attachments         String[]          // Design docs, mockups, etc.
  
  // Timestamps
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @updatedAt
  
  // Relationships
  comments            FeatureComment[]
  history             FeatureHistory[]
  tasks               FeatureTask[]
  votes               FeatureVote[]
  
  @@index([status, priority])
  @@index([type, status])
  @@index([targetRelease])
  @@index([requestedAt])
}

model FeatureComment {
  id          String    @id @default(cuid())
  featureId   String
  feature     Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  authorId    String
  authorName  String
  content     String    @db.Text
  isInternal  Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([featureId])
}

model FeatureHistory {
  id          String    @id @default(cuid())
  featureId   String
  feature     Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  field       String
  oldValue    String?   @db.Text
  newValue    String?   @db.Text
  changedBy   String
  changedAt   DateTime  @default(now())
  
  @@index([featureId, changedAt])
}

model FeatureTask {
  id              String    @id @default(cuid())
  featureId       String
  feature         Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  title           String
  description     String?   @db.Text
  status          String    @default("TODO") // TODO, IN_PROGRESS, DONE
  assignedTo      String?
  estimatedHours  Int?
  actualHours     Int?
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  completedAt     DateTime?
  
  @@index([featureId])
}

model FeatureVote {
  id          String    @id @default(cuid())
  featureId   String
  feature     Feature   @relation(fields: [featureId], references: [id], onDelete: Cascade)
  
  userId      String
  vote        Int       // +1 for upvote, -1 for downvote
  comment     String?   @db.Text
  
  createdAt   DateTime  @default(now())
  
  @@unique([featureId, userId])
  @@index([featureId])
}

model Roadmap {
  id              String    @id @default(cuid())
  
  name            String
  description     String?   @db.Text
  version         String    // e.g., "v2.0", "Q1 2025"
  
  startDate       DateTime
  endDate         DateTime
  
  features        String[]  // Feature IDs included in this roadmap
  goals           String[]  // High-level goals
  
  status          String    @default("PLANNING") // PLANNING, ACTIVE, COMPLETED
  
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  @@index([version])
  @@index([status])
}

// ============================================================================
// DEVELOPMENT & QA PROCESSING REPOSITORY
// ============================================================================

enum EnvironmentType {
  DEVELOPMENT   // Active development
  QA            // Quality assurance testing
  STAGING       // Pre-production validation
  PRODUCTION    // Live production (read-only reference)
}

enum DeploymentStatus {
  PENDING       // Waiting to deploy
  IN_PROGRESS   // Deployment in progress
  SUCCESS       // Successfully deployed
  FAILED        // Deployment failed
  ROLLED_BACK   // Rolled back to previous version
}

enum TestStatus {
  PENDING       // Not yet run
  RUNNING       // Currently executing
  PASSED        // All tests passed
  FAILED        // Some tests failed
  SKIPPED       // Tests skipped
  ERROR         // Error during execution
}

model DevelopmentProject {
  id                String              @id @default(cuid())
  
  // Basic Information
  name              String
  description       String              @db.Text
  type              String              // BUG_FIX, FEATURE, REFACTOR, etc.
  
  // Source
  sourceType        String              // BUG, FEATURE, TECHNICAL_DEBT
  sourceId          String?             // ID of bug or feature
  
  // Status
  status            String              @default("PLANNING") // PLANNING, DEVELOPMENT, TESTING, STAGING, DEPLOYED, CLOSED
  
  // Assignment
  assignedTo        String?             // Developer ID
  assignedTeam      String?
  
  // Timing
  startedAt         DateTime?
  completedAt       DateTime?
  
  // Metadata
  tags              String[]
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Relationships
  environments      ProjectEnvironment[]
  deployments       Deployment[]
  testRuns          TestRun[]
  codeChanges       CodeChange[]
  
  @@index([status])
  @@index([sourceType, sourceId])
}

model ProjectEnvironment {
  id                String              @id @default(cuid())
  projectId         String
  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  environment       EnvironmentType
  
  // Configuration
  branch            String              // Git branch
  version           String?             // Version deployed
  databaseUrl       String?             // Environment-specific DB
  
  // Status
  isActive          Boolean             @default(true)
  healthStatus      String              @default("UNKNOWN") // HEALTHY, DEGRADED, DOWN, UNKNOWN
  lastHealthCheck   DateTime?
  
  // Resources
  cpuUsage          Float?
  memoryUsage       Float?
  diskUsage         Float?
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@unique([projectId, environment])
  @@index([projectId])
}

model Deployment {
  id                String              @id @default(cuid())
  projectId         String
  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Deployment Details
  environment       EnvironmentType
  version           String
  branch            String
  commitHash        String?
  
  // Status
  status            DeploymentStatus    @default(PENDING)
  
  // Execution
  startedAt         DateTime?
  completedAt       DateTime?
  deployedBy        String              // User ID
  
  // Results
  success           Boolean             @default(false)
  errorMessage      String?             @db.Text
  logs              String?             @db.Text
  
  // Rollback
  canRollback       Boolean             @default(true)
  rolledBackAt      DateTime?
  rolledBackBy      String?
  previousVersion   String?
  
  // Metadata
  notes             String?             @db.Text
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@index([projectId, environment])
  @@index([status])
}

model TestRun {
  id                String              @id @default(cuid())
  projectId         String
  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Test Details
  environment       EnvironmentType
  testSuite         String              // Name of test suite
  testType          String              // UNIT, INTEGRATION, E2E, PERFORMANCE, SECURITY
  
  // Status
  status            TestStatus          @default(PENDING)
  
  // Execution
  startedAt         DateTime?
  completedAt       DateTime?
  duration          Int?                // Seconds
  
  // Results
  totalTests        Int                 @default(0)
  passedTests       Int                 @default(0)
  failedTests       Int                 @default(0)
  skippedTests      Int                 @default(0)
  
  // Details
  results           String?             @db.Text // JSON with detailed results
  coverage          Float?              // Code coverage percentage
  
  // Metadata
  triggeredBy       String?             // User ID or "AUTOMATED"
  
  // Timestamps
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  @@index([projectId, environment])
  @@index([status])
}

model CodeChange {
  id                String              @id @default(cuid())
  projectId         String
  project           DevelopmentProject  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  // Change Details
  type              String              // ADD, MODIFY, DELETE, RENAME
  filePath          String
  
  // Git Information
  commitHash        String?
  commitMessage     String?             @db.Text
  branch            String?
  author            String?
  
  // Code Metrics
  linesAdded        Int?
  linesRemoved      Int?
  complexity        Int?                // Cyclomatic complexity
  
  // Review
  reviewed          Boolean             @default(false)
  reviewedBy        String?
  reviewedAt        DateTime?
  reviewComments    String?             @db.Text
  
  // Timestamps
  createdAt         DateTime            @default(now())
  
  @@index([projectId])
  @@index([commitHash])
}

model EnvironmentHealth {
  id                String              @id @default(cuid())
  
  environment       EnvironmentType
  
  // Health Metrics
  status            String              // HEALTHY, DEGRADED, DOWN
  uptime            Float?              // Percentage
  responseTime      Float?              // Average response time (ms)
  errorRate         Float?              // Percentage
  
  // Resources
  cpuUsage          Float?
  memoryUsage       Float?
  diskUsage         Float?
  activeConnections Int?
  
  // Checks
  lastCheck         DateTime            @default(now())
  checksPerformed   String[]            // List of health checks run
  
  // Issues
  issues            String[]            // List of detected issues
  
  // Timestamps
  createdAt         DateTime            @default(now())
  
  @@index([environment, lastCheck])
}