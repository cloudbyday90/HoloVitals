// Additional HIPAA Compliance Schema
// This schema adds support for 2FA, secure file storage, and patient rights

// ============================================================================
// TWO-FACTOR AUTHENTICATION
// ============================================================================

model User2FA {
  id        String   @id @default(cuid())
  userId    String
  method    TwoFactorMethod
  
  // TOTP
  secret    String?
  
  // SMS
  phoneNumber String?
  smsCode     String?
  smsCodeExpiresAt DateTime?
  
  // Backup Codes
  backupCodes String? // JSON array
  
  // Status
  enabled   Boolean  @default(false)
  
  // Metadata
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, method])
  @@map("user_2fa")
}

enum TwoFactorMethod {
  TOTP_2FA
  SMS_2FA
}

// ============================================================================
// SECURE FILE STORAGE
// ============================================================================

model SecureFile {
  id          String   @id @default(cuid())
  
  // File Information
  fileName    String
  fileType    String
  fileSize    Int
  fileHash    String
  
  // Classification
  category    String
  description String?
  tags        String[] // Array of tags
  
  // Encryption
  encrypted   Boolean  @default(true)
  encryptionMetadata Json?
  
  // Storage
  storagePath String
  
  // Ownership
  uploadedBy  String
  patientId   String?
  
  // Access Tracking
  accessCount Int      @default(0)
  lastAccessedAt DateTime?
  
  // Status
  deleted     Boolean  @default(false)
  deletedAt   DateTime?
  deletedBy   String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relationships
  accessGrants FileAccessGrant[]
  
  @@index([patientId])
  @@index([uploadedBy])
  @@index([category])
  @@index([deleted])
  @@map("secure_files")
}

model FileAccessGrant {
  id        String   @id @default(cuid())
  
  fileId    String
  userId    String
  
  file      SecureFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  grantedBy String
  grantedAt DateTime @default(now())
  expiresAt DateTime?
  
  @@unique([fileId, userId])
  @@index([userId])
  @@map("file_access_grants")
}

// ============================================================================
// PATIENT RIGHTS MANAGEMENT
// ============================================================================

model PatientAccessRequest {
  id              String   @id @default(cuid())
  
  patientId       String
  requestType     AccessRequestType
  specificRecords String[] // JSON array
  startDate       DateTime?
  endDate         DateTime?
  
  deliveryMethod  DeliveryMethod
  deliveryAddress String?
  
  status          RequestStatus @default(PENDING)
  requestedAt     DateTime @default(now())
  fulfilledAt     DateTime?
  fulfilledBy     String?
  notes           String?
  
  @@index([patientId])
  @@index([status])
  @@map("patient_access_requests")
}

enum AccessRequestType {
  FULL_RECORD
  SPECIFIC_RECORDS
  DATE_RANGE
}

enum DeliveryMethod {
  ELECTRONIC
  PAPER
  PICKUP
}

model PatientAmendmentRequest {
  id            String   @id @default(cuid())
  
  patientId     String
  recordId      String
  recordType    String
  currentValue  String
  proposedValue String
  reason        String
  
  status        RequestStatus @default(PENDING)
  requestedAt   DateTime @default(now())
  reviewedAt    DateTime?
  reviewedBy    String?
  reviewNotes   String?
  
  @@index([patientId])
  @@index([status])
  @@map("patient_amendment_requests")
}

model PatientRestrictionRequest {
  id              String   @id @default(cuid())
  
  patientId       String
  restrictionType RestrictionType
  dataType        String
  recipient       String?
  reason          String
  
  status          RequestStatus @default(PENDING)
  requestedAt     DateTime @default(now())
  reviewedAt      DateTime?
  reviewedBy      String?
  reviewNotes     String?
  
  @@index([patientId])
  @@index([status])
  @@map("patient_restriction_requests")
}

enum RestrictionType {
  USE
  DISCLOSURE
  BOTH
}

model PatientCommunicationRequest {
  id                 String   @id @default(cuid())
  
  patientId          String
  communicationType  CommunicationType
  alternativeContact String
  reason             String
  
  status             RequestStatus @default(PENDING)
  requestedAt        DateTime @default(now())
  reviewedAt         DateTime?
  reviewedBy         String?
  
  @@index([patientId])
  @@index([status])
  @@map("patient_communication_requests")
}

enum CommunicationType {
  EMAIL
  PHONE
  MAIL
}

enum RequestStatus {
  PENDING
  APPROVED
  DENIED
  FULFILLED
  CANCELLED
}

// ============================================================================
// AUDIT LOG RETENTION
// ============================================================================

model AuditLogArchive {
  id          String   @id @default(cuid())
  
  // Archive Information
  archiveDate DateTime
  startDate   DateTime
  endDate     DateTime
  recordCount Int
  
  // Storage
  storagePath String
  fileSize    Int
  compressed  Boolean  @default(true)
  encrypted   Boolean  @default(true)
  
  // Metadata
  createdAt   DateTime @default(now())
  createdBy   String
  
  @@index([archiveDate])
  @@map("audit_log_archives")
}

// ============================================================================
// ACCESS REVIEW
// ============================================================================

model AccessReview {
  id          String   @id @default(cuid())
  
  // Review Information
  reviewType  AccessReviewType
  reviewPeriodStart DateTime
  reviewPeriodEnd   DateTime
  
  // Scope
  userId      String?
  departmentId String?
  
  // Status
  status      ReviewStatus @default(PENDING)
  scheduledAt DateTime
  startedAt   DateTime?
  completedAt DateTime?
  
  // Results
  findings    Json?
  actions     Json?
  
  // Reviewers
  assignedTo  String?
  reviewedBy  String?
  
  // Metadata
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([status])
  @@index([scheduledAt])
  @@map("access_reviews")
}

enum AccessReviewType {
  USER_ACCESS
  ROLE_ASSIGNMENT
  PERMISSION_AUDIT
  EMERGENCY_ACCESS
  COMPREHENSIVE
}

enum ReviewStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}