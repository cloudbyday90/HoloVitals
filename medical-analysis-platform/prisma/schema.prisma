// HoloVitals Complete Database Schema
// Includes: Base platform + AI Architecture + All Repository Systems

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// USER MANAGEMENT & AUTHENTICATION
// ============================================================================

model User {
  id                    String    @id @default(uuid())
  email                 String    @unique
  passwordHash          String    @map("password_hash")
  mfaEnabled            Boolean   @default(false) @map("mfa_enabled")
  mfaSecret             String?   @map("mfa_secret")
  mfaBackupCodes        String?   @map("mfa_backup_codes")
  failedLoginAttempts   Int       @default(0) @map("failed_login_attempts")
  lastFailedLogin       DateTime? @map("last_failed_login")
  createdAt             DateTime  @default(now()) @map("created_at")
  updatedAt             DateTime  @updatedAt @map("updated_at")
  
  patients              Patient[]
  documents             Document[]
  analysisSessions      AnalysisSession[]
  sessions              UserSession[]
  consentRequestsAsPatient ConsentGrant[] @relation("PatientConsents")
  consentRequestsAsSpecialist ConsentGrant[] @relation("SpecialistConsents")
  auditLogs             AuditLog[]
  
  // AI Architecture Relations
  chatConversations     ChatConversation[]
  analysisQueue         AnalysisQueue[]
  chatbotCosts          ChatbotCost[]
  analysisCosts         AnalysisCost[]
  contextOptimizations  ContextOptimization[]
  
  @@map("users")
}

model Patient {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  firstName     String?   @map("first_name")
  lastName      String?   @map("last_name")
  dateOfBirth   DateTime? @map("date_of_birth")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  documents     Document[]
  analysisSessions AnalysisSession[]
  
  @@map("patients")
}

// ============================================================================
// DOCUMENT MANAGEMENT
// ============================================================================

model Document {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  patientId     String?   @map("patient_id")
  filePath      String    @map("file_path")
  fileName      String    @map("file_name")
  fileSize      Int?      @map("file_size")
  mimeType      String?   @map("mime_type")
  documentType  String?   @map("document_type")
  uploadDate    DateTime  @default(now()) @map("upload_date")
  documentDate  DateTime? @map("document_date")
  status        String    @default("pending")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  ocrResults    OcrResult[]
  extractedData ExtractedData[]
  sourceLinks   DocumentLink[] @relation("SourceDocument")
  targetLinks   DocumentLink[] @relation("TargetDocument")
  embeddings    DocumentEmbedding[]
  
  @@map("documents")
}

model OcrResult {
  id              String    @id @default(uuid())
  documentId      String    @map("document_id")
  rawText         String    @map("raw_text") @db.Text
  confidenceScore Float?    @map("confidence_score")
  processedAt     DateTime  @default(now()) @map("processed_at")
  
  document        Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("ocr_results")
}

model ExtractedData {
  id            String    @id @default(uuid())
  documentId    String    @map("document_id")
  dataType      String    @map("data_type")
  fieldName     String    @map("field_name")
  fieldValue    String    @map("field_value") @db.Text
  unit          String?
  referenceRange String?  @map("reference_range")
  isAbnormal    Boolean?  @map("is_abnormal")
  extractedAt   DateTime  @default(now()) @map("extracted_at")
  
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("extracted_data")
}

model DocumentLink {
  id                  String    @id @default(uuid())
  sourceDocumentId    String    @map("source_document_id")
  targetDocumentId    String    @map("target_document_id")
  relationshipType    String    @map("relationship_type")
  createdAt           DateTime  @default(now()) @map("created_at")
  
  sourceDocument      Document  @relation("SourceDocument", fields: [sourceDocumentId], references: [id], onDelete: Cascade)
  targetDocument      Document  @relation("TargetDocument", fields: [targetDocumentId], references: [id], onDelete: Cascade)
  
  @@unique([sourceDocumentId, targetDocumentId])
  @@map("document_links")
}

model DocumentEmbedding {
  id            String    @id @default(uuid())
  documentId    String    @map("document_id")
  chunkIndex    Int       @map("chunk_index")
  chunkText     String    @map("chunk_text") @db.Text
  embedding     Float[]
  createdAt     DateTime  @default(now()) @map("created_at")
  
  document      Document  @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@map("document_embeddings")
}

// ============================================================================
// ANALYSIS SESSIONS (Legacy)
// ============================================================================

model AnalysisSession {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  patientId     String?   @map("patient_id")
  sessionType   String    @map("session_type")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  patient       Patient?  @relation(fields: [patientId], references: [id], onDelete: Cascade)
  interactions  AiInteraction[]
  
  @@map("analysis_sessions")
}

model AiInteraction {
  id                String    @id @default(uuid())
  sessionId         String    @map("session_id")
  query             String    @db.Text
  response          String?   @db.Text
  contextDocuments  String[]  @map("context_documents")
  createdAt         DateTime  @default(now()) @map("created_at")
  
  session           AnalysisSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  
  @@map("ai_interactions")
}

// ============================================================================
// CHATBOT CONVERSATIONS (New AI Architecture)
// ============================================================================

model ChatConversation {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title     String?
  startedAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  
  messages  ChatMessage[]
  
  @@index([userId])
  @@index([lastMessageAt])
  @@map("chat_conversations")
}

model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  conversation   ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  role           String
  content        String   @db.Text
  timestamp      DateTime @default(now())
  
  type           String   @default("quick")
  confidence     Float?
  
  needsEscalation Boolean @default(false)
  escalationReason String? @db.Text
  escalatedToTaskId String?
  
  documentId     String?
  analysisId     String?
  
  metadata       Json?
  
  @@index([conversationId])
  @@index([timestamp])
  @@map("chat_messages")
}

// ============================================================================
// ANALYSIS QUEUE SYSTEM (New AI Architecture)
// ============================================================================

model AnalysisQueue {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type      String
  priority  Int      @default(3)
  
  prompt    String   @db.Text
  documents Json
  
  totalTokens      Int
  contextWindow    Int
  needsSplitting   Boolean @default(false)
  splitStrategy    String?
  estimatedCost    Float
  recommendedModel String
  
  status    String   @default("queued")
  
  createdAt   DateTime @default(now())
  startedAt   DateTime?
  completedAt DateTime?
  
  result    Json?
  error     String?  @db.Text
  
  instanceId String?
  instance   CloudInstance? @relation(fields: [instanceId], references: [id])
  
  actualCost Float?
  
  @@index([userId])
  @@index([status])
  @@index([priority, createdAt])
  @@index([createdAt])
  @@map("analysis_queue")
}

// ============================================================================
// CLOUD INSTANCE TRACKING (New AI Architecture)
// ============================================================================

model CloudInstance {
  id           String   @id @default(cuid())
  
  provider     String
  region       String
  instanceType String
  instanceId   String   @unique
  
  model        String
  
  status       String   @default("provisioning")
  
  createdAt    DateTime @default(now())
  readyAt      DateTime?
  terminatedAt DateTime?
  
  costPerMinute Float
  totalCost     Float   @default(0)
  
  tasks        AnalysisQueue[]
  
  metadata     Json?
  
  @@index([status])
  @@index([createdAt])
  @@index([provider, region])
  @@map("cloud_instances")
}

// ============================================================================
// COST TRACKING (New AI Architecture)
// ============================================================================

model InstanceCost {
  id           String   @id @default(cuid())
  
  instanceId   String
  provider     String
  instanceType String
  model        String
  
  createdAt    DateTime
  terminatedAt DateTime
  duration     Float
  
  costPerMinute Float
  totalCost     Float
  
  tasksCompleted Int    @default(0)
  tokensProcessed Int   @default(0)
  
  metadata     Json?
  
  @@index([createdAt])
  @@index([provider])
  @@index([model])
  @@map("instance_costs")
}

model ChatbotCost {
  id        String   @id @default(cuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  messageId String
  timestamp DateTime @default(now())
  
  inputTokens  Int
  outputTokens Int
  totalTokens  Int
  
  cost      Float
  
  model     String   @default("gpt-3.5-turbo")
  
  @@index([userId])
  @@index([timestamp])
  @@map("chatbot_costs")
}

model AnalysisCost {
  id        String   @id @default(cuid())
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  taskId    String
  timestamp DateTime @default(now())
  
  inputTokens  Int
  outputTokens Int
  totalTokens  Int
  
  modelCost      Float
  infrastructureCost Float
  totalCost      Float
  
  model        String
  instanceType String?
  
  duration     Float
  
  @@index([userId])
  @@index([timestamp])
  @@map("analysis_costs")
}

// ============================================================================
// CONTEXT OPTIMIZATION (New AI Architecture)
// ============================================================================

model PromptOptimization {
  id        String   @id @default(cuid())
  
  originalPrompt String @db.Text
  originalTokens Int
  
  optimizedPrompt String @db.Text
  optimizedTokens Int
  
  strategy       String
  tokenReduction Int
  reductionPercent Float
  
  executionTime  Float?
  successRate    Float?
  
  createdAt DateTime @default(now())
  
  metadata  Json?
  
  @@index([createdAt])
  @@map("prompt_optimizations")
}

model PromptSplit {
  id        String   @id @default(cuid())
  
  taskId    String
  
  splitId   String
  content   String   @db.Text
  tokens    Int
  order     Int
  
  dependencies Json
  
  status    String   @default("pending")
  
  result    Json?
  error     String?  @db.Text
  
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  @@index([taskId])
  @@index([order])
  @@map("prompt_splits")
}

// ============================================================================
// MODEL PERFORMANCE TRACKING (New AI Architecture)
// ============================================================================

model ModelPerformance {
  id        String   @id @default(cuid())
  
  model     String
  provider  String
  
  avgResponseTime Float
  avgTokensPerSecond Float
  successRate Float
  errorRate   Float
  
  avgCostPerRequest Float
  avgCostPerToken   Float
  
  totalRequests Int
  totalTokens   Int
  totalCost     Float
  
  periodStart DateTime
  periodEnd   DateTime
  
  metadata    Json?
  
  @@index([model])
  @@index([periodStart])
  @@map("model_performance")
}

// ============================================================================
// SYSTEM HEALTH MONITORING (New AI Architecture)
// ============================================================================

model SystemHealth {
  id        String   @id @default(cuid())
  
  component String
  
  status    String
  
  responseTime Float?
  errorRate    Float?
  throughput   Float?
  
  cpuUsage    Float?
  memoryUsage Float?
  diskUsage   Float?
  
  timestamp DateTime @default(now())
  
  message   String?  @db.Text
  metadata  Json?
  
  @@index([component])
  @@index([timestamp])
  @@index([status])
  @@map("system_health")
}

// ============================================================================
// AUTHENTICATION & SESSIONS
// ============================================================================

model UserSession {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  expiresAt     DateTime  @map("expires_at")
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
  @@index([userId])
  @@index([expiresAt])
}

// ============================================================================
// CONSENT MANAGEMENT
// ============================================================================

model ConsentGrant {
  id                      String    @id @default(uuid())
  patientId               String    @map("patient_id")
  specialistId            String    @map("specialist_id")
  permissions             String    @db.Text
  reason                  String    @db.Text
  requestedDuration       Int       @map("requested_duration")
  urgency                 String
  status                  String
  restrictions            String?   @db.Text
  grantedAt               DateTime? @map("granted_at")
  expiresAt               DateTime  @map("expires_at")
  revokedAt               DateTime? @map("revoked_at")
  revocationReason        String?   @map("revocation_reason") @db.Text
  denialReason            String?   @map("denial_reason") @db.Text
  lastAccessed            DateTime? @map("last_accessed")
  accessCount             Int       @default(0) @map("access_count")
  expirationWarningSent   Boolean   @default(false) @map("expiration_warning_sent")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  
  patient                 User      @relation("PatientConsents", fields: [patientId], references: [id], onDelete: Cascade)
  specialist              User      @relation("SpecialistConsents", fields: [specialistId], references: [id], onDelete: Cascade)
  accessLogs              AccessLog[]
  
  @@map("consent_grants")
  @@index([patientId])
  @@index([specialistId])
  @@index([status])
  @@index([expiresAt])
}

model AccessLog {
  id            String    @id @default(uuid())
  consentId     String    @map("consent_id")
  specialistId  String    @map("specialist_id")
  action        String
  resource      String
  ipAddress     String?   @map("ip_address")
  userAgent     String?   @map("user_agent")
  details       String?   @db.Text
  timestamp     DateTime  @default(now())
  success       Boolean   @default(true)
  
  consent       ConsentGrant @relation(fields: [consentId], references: [id], onDelete: Cascade)
  
  @@map("access_logs")
  @@index([consentId])
  @@index([specialistId])
  @@index([timestamp])
}

// ============================================================================
// AUDIT & COMPLIANCE
// ============================================================================

model AuditLog {
  id              String    @id @default(uuid())
  userId          String    @map("user_id")
  action          String
  resource        String
  resourceId      String    @map("resource_id")
  details         String?   @db.Text
  ipAddress       String?   @map("ip_address")
  userAgent       String?   @map("user_agent")
  sessionId       String?   @map("session_id")
  severity        String
  requiresReview  Boolean   @default(false) @map("requires_review")
  reviewed        Boolean   @default(false)
  reviewedBy      String?   @map("reviewed_by")
  reviewedAt      DateTime? @map("reviewed_at")
  reviewNotes     String?   @map("review_notes") @db.Text
  consentId       String?   @map("consent_id")
  timestamp       DateTime  @default(now())
  createdAt       DateTime  @default(now()) @map("created_at")
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("audit_logs")
  @@index([userId])
  @@index([action])
  @@index([resource])
  @@index([timestamp])
  @@index([severity])
  @@index([requiresReview])
}

// ============================================================================
// NOTIFICATIONS & ALERTS
// ============================================================================

model Notification {
  id              String    @id @default(uuid())
  patientId       String    @map("patient_id")
  type            String
  message         String    @db.Text
  requiresAction  Boolean   @default(false) @map("requires_action")
  read            Boolean   @default(false)
  readAt          DateTime? @map("read_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@map("notifications")
  @@index([patientId])
  @@index([read])
  @@index([createdAt])
}

model SecurityAlert {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  action        String
  details       String    @db.Text
  severity      String    @default("high")
  acknowledged  Boolean   @default(false)
  acknowledgedBy String?  @map("acknowledged_by")
  acknowledgedAt DateTime? @map("acknowledged_at")
  createdAt     DateTime  @default(now()) @map("created_at")
  
  @@map("security_alerts")
  @@index([userId])
  @@index([acknowledged])
  @@index([createdAt])
}

// ============================================================================
// PATIENT REPOSITORY (Sandboxed per patient)
// ============================================================================

model PatientRepository {
  id                      String    @id @default(uuid())
  userId                  String    @unique @map("user_id")
  primaryIdentityHash     String    @unique @map("primary_identity_hash")
  secondaryIdentityHash   String    @map("secondary_identity_hash")
  compositeIdentityHash   String    @unique @map("composite_identity_hash")
  encryptedPersonalInfo   String    @map("encrypted_personal_info") @db.Text
  hasMothersMaidenName    Boolean   @default(false) @map("has_mothers_maiden_name")
  hasPreviousAddress      Boolean   @default(false) @map("has_previous_address")
  createdAt               DateTime  @default(now()) @map("created_at")
  updatedAt               DateTime  @updatedAt @map("updated_at")
  lastAccessedAt          DateTime? @map("last_accessed_at")
  version                 Int       @default(1)
  
  diagnoses               PatientDiagnosis[]
  medications             PatientMedication[]
  allergies               PatientAllergy[]
  vitalSigns              PatientVitalSign[]
  procedures              PatientProcedure[]
  immunizations           PatientImmunization[]
  familyHistory           PatientFamilyHistory[]
  
  @@map("patient_repositories")
  @@index([userId])
  @@index([compositeIdentityHash])
}

model PatientDiagnosis {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  condition       String
  icd10Code       String?   @map("icd10_code")
  diagnosedDate   DateTime  @map("diagnosed_date")
  status          String
  severity        String?
  notes           String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  
  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_diagnoses")
  @@index([repositoryId])
  @@index([diagnosedDate])
}

model PatientMedication {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  name            String
  dosage          String
  frequency       String
  startDate       DateTime  @map("start_date")
  endDate         DateTime? @map("end_date")
  prescribedBy    String?   @map("prescribed_by")
  purpose         String?   @db.Text
  status          String
  createdAt       DateTime  @default(now()) @map("created_at")
  
  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_medications")
  @@index([repositoryId])
  @@index([status])
}

model PatientAllergy {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  allergen        String
  type            String
  reaction        String
  severity        String
  diagnosedDate   DateTime? @map("diagnosed_date")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_allergies")
  @@index([repositoryId])
}

model PatientVitalSign {
  id                      String    @id @default(uuid())
  repositoryId            String    @map("repository_id")
  date                    DateTime
  bloodPressureSystolic   Int?      @map("blood_pressure_systolic")
  bloodPressureDiastolic  Int?      @map("blood_pressure_diastolic")
  heartRate               Int?      @map("heart_rate")
  temperature             Float?
  weight                  Float?
  height                  Float?
  bmi                     Float?
  oxygenSaturation        Int?      @map("oxygen_saturation")
  createdAt               DateTime  @default(now()) @map("created_at")
  
  repository              PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_vital_signs")
  @@index([repositoryId])
  @@index([date])
}

model PatientProcedure {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  name            String
  date            DateTime
  performedBy     String?   @map("performed_by")
  location        String?
  notes           String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  
  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_procedures")
  @@index([repositoryId])
  @@index([date])
}

model PatientImmunization {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  vaccine         String
  date            DateTime
  doseNumber      Int?      @map("dose_number")
  administeredBy  String?   @map("administered_by")
  lotNumber       String?   @map("lot_number")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_immunizations")
  @@index([repositoryId])
  @@index([date])
}

model PatientFamilyHistory {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  relationship    String
  condition       String
  ageAtDiagnosis  Int?      @map("age_at_diagnosis")
  notes           String?   @db.Text
  createdAt       DateTime  @default(now()) @map("created_at")
  
  repository      PatientRepository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@map("patient_family_history")
  @@index([repositoryId])
}

model IdentityChallenge {
  id              String    @id @default(uuid())
  repositoryId    String    @map("repository_id")
  questions       String    @db.Text
  expiresAt       DateTime  @map("expires_at")
  createdAt       DateTime  @default(now()) @map("created_at")
  
  @@map("identity_challenges")
  @@index([repositoryId])
  @@index([expiresAt])
}

model ContextOptimization {
  id                  String   @id @default(cuid())
  userId              String
  originalTokens      Int
  optimizedTokens     Int
  reductionPercentage Float
  strategy            String
  compressionRatio    Float
  relevanceScore      Float
  informationDensity  Float
  processingTimeMs    Int
  qualityScore        Float
  createdAt           DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([createdAt])
  @@index([strategy])
}
